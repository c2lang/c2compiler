module ifaddrs;

import c2 local;

import sys_socket;

/* The `getifaddrs' function generates a linked list of these structures.
   Each element of the list describes one network interface.  */
type Ifaddrs struct {
  Ifaddrs* ifa_next;    /* Pointer to the next structure.  */

  char* ifa_name;       /* Name of this network interface.  */
  u32   ifa_flags;      /* Flags as from SIOCGIFFLAGS ioctl.  */

  sys_socket.Sockaddr* ifa_addr;    /* Network address of this interface.  */
  sys_socket.Sockaddr* ifa_netmask; /* Netmask of this interface.  */
  union ifa_ifu {
    /* At most one of the following two is valid.  If the IFF_BROADCAST
       bit is set in `ifa_flags', then `ifa_broadaddr' is valid.  If the
       IFF_POINTOPOINT bit is set, then `ifa_dstaddr' is valid.
       It is never the case that both these bits are set at once.  */
    sys_socket.Sockaddr *ifu_broadaddr; /* Broadcast address of this interface. */
    sys_socket.Sockaddr *ifu_dstaddr; /* Point-to-point destination address.  */
  }
  void* ifa_data;       /* Address-specific data (may be unused).  */
}


/* Create a linked list of `struct ifaddrs' structures, one for each
   network interface on the host machine.  If successful, store the
   list in *IFAP and return 0.  On errors, return -1 and set `errno'.

   The storage returned in *IFAP is allocated dynamically and can
   only be properly freed by passing it to `freeifaddrs'.
*/
fn c_int get(Ifaddrs** __ifap) @(cname="getifaddrs");

/* Reclaim the storage allocated by a previous `getifaddrs' call.  */
fn void Ifaddrs.free(Ifaddrs* __ifa) @(cname="freeifaddrs");

