module stdio;

import c2 local;
import stdarg local;

// possibilities for the third argument to 'setvbuf'
const u8 _IOFBF = 0; // fully buffered
const u8 _IOLBF = 1; // line buffering
const u8 _IONBF = 2; // no buffering

const i8 EOF = -1;

const u8 SEEK_SET = 0;   // Seek from beginning of file.
const u8 SEEK_CUR = 1;   // Seek from current position.
const u8 SEEK_END = 2;   // Seek from end of file.
#if __USE_GNU
const u8 SEEK_DATA = 3;  // Seek to next data.
const u8 SEEK_HOLE = 4;  // Seek to next hole.
#endif

// from libio.h
type IO_marker struct @(cname="_IO_marker") {
    IO_marker* next;
    FILE* sbuf;
    i32 _pos;
}

type Offset u64 @(cname="off_t");

//NOTE: _G_fpos_t is some struct(_G_fpos_t.h)
//type fpos_t _G_fpos_t;

#if SYSTEM_LINUX
type FILE struct @(opaque) {}

FILE* stdin;
FILE* stdout;
FILE* stderr;
#endif
#if SYSTEM_DARWIN
type FILE struct @(opaque) {}

FILE* stdin @(cname="__stdinp");
FILE* stdout @(cname="__stdoutp");
FILE* stderr @(cname="__stderrp");
#endif
#if SYSTEM_FREEBSD
type FILE struct @(opaque) {}

FILE* stdin @(cname="__stdinp");
FILE* stdout @(cname="__stdoutp");
FILE* stderr @(cname="__stderrp");
#endif
#if SYSTEM_OPENBSD
type Sbuf__ struct {
    u8 *_base;
    c_int _size;
}
type FILE struct {
    u8 *_p;
    c_int _r;
    c_int _w;
    c_short _flags;
    c_short _file;
    Sbuf__ _bf;
    c_int _lbfsize;
    void *_cookie;
    void *_close;   //int (*_close)(void *);
    void *_read;    //int (*_read)(void *, char *, int);
    void *_seek;    //fpos_t (*_seek)(void *, fpos_t, int);
    void *_write;   //int (*_write)(void *, const char *, int);
    Sbuf__ _ext;
    u8 *_up;
    c_int _ur;
    u8[3] _ubuf;
    u8[1] _nbuf;
    Sbuf__ _lb;
    c_int _blksize;
    i64 _offset;
}
static_assert(152, sizeof(FILE));

FILE* stdin @(cname="(&__sF[0])", cdef="FILE __sF[]");
FILE* stdout @(cname="(&__sF[1])", cdef="FILE __sF[]");
FILE* stderr @(cname="(&__sF[2])", cdef="FILE __sF[]");
#endif

fn c_int remove(const c_char* __filename);

fn c_int rename(const c_char* __old, const c_char* __new);

fn FILE* tmpfile();
//fn c_char* tmpnam(c_char* __s); // deprecated
fn c_char* tempnam(const c_char* __dir, const c_char* __pfx);

fn c_int fclose(FILE* __stream);
fn c_int fflush(FILE* __stream);
fn FILE* fopen(const c_char* __filename, const c_char* __modes);
fn FILE* freopen(const c_char* __filename, const c_char* __modes, FILE* __stream);
fn FILE* fdopen(c_int __fd, const c_char* __modes);
fn void setbuf(FILE* __stream, c_char* __buf);
fn c_int setvbuf(FILE* __stream, c_char* __buf, c_int __modes, c_size __n);
fn void setbuffer(FILE* __stream, c_char* __buf, c_size __size);
fn void setlinebuf(FILE* __stream);
fn c_int fprintf(FILE* __stream, const c_char* __format @(printf_format), ...);
fn c_int printf(const c_char* __format @(printf_format), ...);
fn c_int sprintf(c_char* __s, const c_char* __format @(printf_format), ...);
fn c_int snprintf(c_char* __s, c_size size, const c_char* __format @(printf_format), ...);
fn c_int dprintf(c_int __fd, const c_char* __fmt @(printf_format), ...);
fn c_int fscanf(FILE* __stream, const c_char* __format, ...);
fn c_int scanf(const c_char* __format, ...);
fn c_int sscanf(const c_char* __s, const c_char* __format, ...);
fn c_int fgetc(FILE* __stream);
fn c_int getc(FILE* __stream);
fn c_int getchar();
fn c_int getc_unlocked(FILE* __stream);
fn c_int getchar_unlocked();
fn c_int fputc(c_int __c, FILE* __stream);
fn c_int putc(c_int __c, FILE* __stream);
fn c_int putchar(c_int __c);
fn c_int putchar_unlocked(c_int __c);
fn c_int getw(FILE* __stream);
fn c_int putw(c_int __w, FILE* __stream);
fn c_char* fgets(c_char* __s, c_int __n, FILE* __stream);
fn c_ssize getdelim(c_char** __lineptr, c_size* __n, c_int __delimiter, FILE* __stream);
fn c_ssize getline(c_char** __lineptr, c_size* __n, FILE* __stream);
fn c_int fputs(const c_char* __s, FILE* __stream);
fn c_int puts(const c_char* __s);
fn c_int ungetc(c_int __c, FILE* __stream);
fn c_int fread(void* __ptr, c_size __size, c_size __n, FILE* __stream);
fn c_size fwrite(const void* __ptr, c_size __size, c_size __n, FILE* __s);
fn c_int fseek(FILE* __stream, c_long __off, c_int __whence);
fn c_long ftell(FILE* __stream);
fn void rewind(FILE* __stream);
fn c_int fseeko(FILE* __stream, Offset __off, c_int __whence);
fn Offset ftello(FILE* __stream);
//fn c_int fgetpos(FILE* __stream, fpos_t* __pos);
//fn c_int fsetpos(FILE* __stream, const fpos_t* __pos);
fn void clearerr(FILE* __stream);
fn c_int feof(FILE* __stream);
fn c_int ferror(FILE* __stream);
fn void perror(const c_char* __s);
fn c_int fileno(FILE* __stream);
fn FILE* popen(const c_char* __command, const c_char* __modes);
fn c_int pclose(FILE* __stream);
fn c_char* ctermid(c_char* __s);
fn void flockfile(FILE* __stream);
fn c_int ftrylockfile(FILE* __stream);
fn void funlockfile(FILE* __stream);

// --- Linux only ---
#if __USE_LARGEFILE64
fn FILE* tmpfile64(void);
#endif
fn c_char* tmpnam_r(c_char* __s);
fn c_int renameat(c_int __oldfd, const c_char* __old, c_int __newfd, const c_char* __new);
fn FILE* fmemopen(void* __s, c_size __len, const c_char* __modes);
fn FILE* open_memstream(c_char** __bufloc, c_size* __sizeloc);
fn c_int fflush_unlocked(FILE* __stream);
fn c_int fgetc_unlocked(FILE* __stream);
fn c_int putc_unlocked(c_int __c, FILE* __stream);
fn c_int fputc_unlocked(c_int __c, FILE* __stream);
fn c_ssize __getdelim(c_char** __lineptr, c_size* __n, c_int __delimiter, FILE* __stream);
fn c_int fread_unlocked(void* __ptr, c_size __size, c_size __n, FILE* __stream);
fn c_size fwrite_unlocked(const void* __ptr, c_size __size, c_size __n, FILE* __stream);
fn void clearerr_unlocked(FILE* __stream);
fn c_int feof_unlocked(FILE* __stream);
fn c_int ferror_unlocked(FILE* __stream);

// --- Darwin/BSD only----
// unlocked functions below exist, but as macro
//fn void clearerr_unlocked(FILE* __stream);
//fn c_int feof_unlocked(FILE* __stream);
//fn c_int ferror_unlocked(FILE* __stream);
//fn c_int fileno_unlocked(FILE* __stream);

fn c_int asprintf(c_char**, const c_char* @(printf_format), ...);
fn c_char* ctermid_r(c_char*);
fn c_char* fgetln(FILE*, c_size*);
fn const c_char* fmtcheck(const c_char*, const c_char*);
fn c_int fpurge(FILE *);
//fn c_int vasprintf(c_char**, const c_char*, va_list);
fn FILE *zopen(const c_char*, const c_char*, c_int);

fn c_int vdprintf(c_int __fd, const c_char *format, va_list ap);
fn c_int vfprintf(FILE* stream, const c_char *format, va_list ap);
fn c_int vprintf(const c_char* format, va_list ap);
fn c_int vsprintf(c_char* str, const c_char *format, va_list ap);
fn c_int vsnprintf(c_char* str, c_size size, const c_char *format, va_list ap);
