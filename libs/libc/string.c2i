module string;

import c2 local;

// TODO restrict, size_t
// TODO use builtin functions

/* 7.26 String handling <string.h> */

/* 7.26.1 String function conventions */

/* 7.26.2 Copying functions */
fn void* memcpy(void* dest, const void* src, c_size n);
fn void* memccpy(void* dest, const void* src, c_int c, c_size n);
fn void* memmove(void* dest, const void* src, c_size n);
fn c_char* strcpy(c_char* dest, const c_char* src);
fn c_char* strncpy(c_char* dest, const c_char* src, c_size n);
fn c_char* strdup(const c_char* s);
fn c_char* strndup(const c_char* s, c_size n);

/* 7.26.3 Concatenation functions */
fn c_char* strcat(c_char* dest, const c_char* src);
fn c_char* strncat(c_char* dest, const c_char* src, c_size n);

/* 7.26.4 Comparison functions */
fn c_int memcmp(const void* s1, const void* s2, c_size n);
fn c_int strcmp(const c_char* s1, const c_char* s2);
fn c_int strcoll(const c_char* s1, const c_char* s2);
fn c_int strncmp(const c_char* s1, const c_char* s2, c_size n);
fn c_size strxfrm(c_char* s1, const c_char* s2, c_size n);

/* 7.26.5 Search functions */
fn void* memchr(const void* s, c_int c, c_size n);
fn c_char* strchr(const c_char* s, c_int c);
fn c_size strcspn(const c_char* s1, const c_char* s2);
fn c_char* strpbrk(const c_char* s1, const c_char* s2);
fn c_char* strrchr(const c_char* s, c_int c);
fn c_size strspn(const c_char* s1, const c_char* s2);
fn c_char* strstr(const c_char* s1, const c_char* s2);
fn c_char* strtok(c_char* s1, const c_char* s2);

/* 7.26.6 Miscellaneous functions */
fn void* memset(void* s, c_int c, c_size n);
fn void* memset_explicit(void* s, c_int c, c_size n);
fn c_char* strerror(c_int errnum);
fn c_size strlen(const c_char* s);

/* POSIX.1-1995 functions */
fn c_char* strtok_r(c_char* s, const c_char* delim, c_char** save_ptr);

/* POSIX.1-2001 functions */
fn c_int strerror_r(c_int errnum, c_char* dest, c_size n);

/* POSIX.1-2008 functions */
fn c_char* stpcpy(c_char* dest, const c_char* src);
fn c_char* stpncpy(c_char* dest, const c_char* src, c_size n);
fn c_size strnlen(const c_char* s, c_size n);
fn c_char* strsignal(c_int sig);

/* BSD and GNU extensions */
fn void* memmem(const void* s1, c_size size1, const void* s2, c_size size2);
fn c_int strcasecmp(const c_char* s1, const c_char* s2);
fn c_int strncasecmp(const c_char* s1, const c_char* s2, c_size n);
fn c_char* strcasestr(const c_char* s1, const c_char* s2);
fn c_char* strsep(c_char** stringp, const c_char* delim);
fn void* mempcpy(void* dest, const void* src, c_size n);
fn void* memrchr(const void* s, c_int c, c_size n);
fn c_char* strchrnul(const c_char* s, c_int c);

#if SYSTEM_DARWIN || SYSTEM_FREEBSD || SYSTEM_OPENBSD
fn c_char* strnstr(const c_char* s1, const c_char* s2, c_size n);
fn c_size strlcpy(c_char* dest, const c_char* src, c_size n);
fn c_size strlcat(c_char* dest, const c_char* src, c_size n);
#endif
