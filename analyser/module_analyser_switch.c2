/* Copyright 2022-2025 Bas van den Berg
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

module module_analyser;

import ast local;
import ctv_analyser;
import init_checker;
import src_loc local;
import scope;
import string_buffer;
import string;

fn void Analyser.analyseSwitchStmt(Analyser* ma, Stmt* s) {
    SwitchStmt* sw = cast<SwitchStmt*>(s);

    ma.scope.enter(scope.Decl);

    bool is_string = false;

    EnumTypeDecl* etd = nil;
    // TODO switch is not a condition, not a bool!
    QualType ct = ma.analyseExpr(sw.getCond2(), true, RHS);
    if (ct.isInvalid()) return;

    bool isCharPtr = ct.isCharPointer();

    // TODO check type (must be number-ish)

    if (isCharPtr) {
        is_string = true;
        sw.setString();
    } else {
        EnumType* et = ct.getEnumTypeOrNil();
        if (et) etd = et.getDecl();
    }

    const u32 numCases = sw.getNumCases();
    SwitchCase** cases = sw.getCases();

    if (numCases == 0) {
        ma.error(sw.getLoc(), "switch without cases or default");
        return;
    }

    SwitchCase* defaultCase = nil;

    init_checker.Checker checker = init_checker.Checker.create(numCases);

    bool ok = true;
    for (u32 i=0; i<numCases; i++) {
        SwitchCase* c = cases[i];
        bool is_last = (i+1 == numCases);

        u32 flags = scope.Decl | scope.Break;
        if (!is_last) flags |= scope.Fallthrough;
        ma.scope.enter(flags);

        if (c.isDefault()) {
            if (defaultCase) {
                ma.error(defaultCase.getLoc(), "multiple default labels");
                checker.free();
                return;
            }
            defaultCase = c;

            if (!is_last) {
                ma.error(c.getLoc(), "default case must be last in switch");
                checker.free();
                return;
            }
        }

        ok &= ma.analyseCase(c, &checker, etd, is_string);
        ma.scope.exit(ma.has_error);
    }

    if (!ok) {
        checker.free();
        return;
    }

    ma.scope.exit(ma.has_error);

    if (etd) {
        const u32 numConstants = etd.getNumConstants();

        if (defaultCase) {
            // check for default with all cases covered
            if (checker.getCount() >= numConstants) {
                ma.error(defaultCase.getLoc(), "default label in switch which covers all enumeration values");
            }
        } else {
            // check for uncovered cases
            if (checker.getCount() < numConstants) {
                string_buffer.Buf* out = string_buffer.create(128, false, 0);
                u32 missing = 0;
                EnumConstantDecl** ecd = etd.getConstants();
                for (u32 i=0; i<numConstants; i++) {
                    Value v = ecd[i].getValue();
                    if (!checker.find(v.as_u32())) {
                        if (missing != 0) out.add(", ");
                        if (missing >= 3) {
                            out.add("...");
                            break;
                        }
                        missing++;
                        out.add(ecd[i].asDecl().getName());
                    }
                }

                ma.error(sw.getLoc(), "unhandled enumeration value%s: %s", missing > 1 ? "s" : "", out.data());
                out.free();
            }
        }
    }

    checker.free();
}

fn bool Analyser.analyseCase(Analyser* ma,
                             SwitchCase* c,
                             init_checker.Checker* checker,
                             EnumTypeDecl* etd,
                             bool is_string) {
    bool is_default = c.isDefault();
    if (!is_default) {
        if (!ma.analyseCaseCondition(c, checker, etd, is_string)) return false;
    }

    const u32 count = c.getNumStmts();
    if (!count) return true;
    Stmt** stmts = c.getStmts();
    bool has_decls = false;
    for (u32 i=0; i<count; i++) {
        Stmt* st = stmts[i];
        ma.analyseStmt(st, true);
        if (ma.has_error) return false;

        if (st.isDecl()) has_decls = true;

        if (st.isFallthrough() && (i+1 != count)) {
            ma.error(st.getLoc(), "'fallthrough' statement must be last statement in case");
            return false;
        }
    }
    if (has_decls) c.setHasDecls();

    Stmt* last = stmts[count-1];
    if (isTerminatingStmt(last, is_default))
        return true;

    SrcLoc loc = last.getLoc();
    if (!loc) loc = c.getLoc();
    if (is_default) {
        ma.error(loc, "no terminating statement (break|return|continue|goto|noreturn-func) at end of default case");
    } else {
        ma.error(loc, "no terminating statement (break|fallthrough|goto|return|continue|noreturn-func) at end of case");
    }
    return false;
}

fn bool Analyser.analyseCaseCondition(Analyser* ma,
                                      SwitchCase* c,
                                      init_checker.Checker* checker,
                                      EnumTypeDecl* etd,
                                      bool is_string) {
    if (c.numMulti()) return ma.analyseMultiCaseCondition(c, checker, etd);

    Expr* cond = c.getCond();
    if (etd) {
        if (!cond.isIdentifier()) {
            if (cond.isMember()) {
                ma.error(cond.getLoc(), "enum constant may not be prefixed in case statement");
            } else {
                ma.error(cond.getLoc(), "condition is not a constant of enum type '%s'",
                    etd.asDecl().getFullName());
            }
            return false;
        }

        u32 enum_idx;
        IdentifierExpr* id = cast<IdentifierExpr*>(cond);
        if (!ma.checkEnumConstantCase(id, checker, etd, &enum_idx)) return false;
    } else {
        Expr* orig = c.getCond();
        QualType qt = ma.analyseExpr(c.getCond2(), true, RHS);

        if (qt.isInvalid()) return false;
        cond.setType(qt);

        if (is_string) {
            u32 index;
            if (orig.isNil()) {
                index = 0;
                SrcLoc duplicate = checker.find(index);
                if (duplicate) {
                    ma.errorRange(cond.getLoc(), cond.getRange(), "duplicate case value nil");
                    ma.note(duplicate, "previous case is here");
                    return false;
                }
            } else
            if (orig.isStringLiteral()) {
                StringLiteral* lit = cast<StringLiteral*>(orig);
                u32 len = lit.getSize() - 1;
                if (len > 255) {
                    ma.error(cond.getLoc(), "string switch case string is loo long (max 255 bytes)");
                    return false;
                }
                if (string.memchr(lit.getText(), 0, len)) {
                    ma.error(cond.getLoc(), "case string value has embedded null byte");
                    return false;
                }
                index = lit.getTextIndex();
                SrcLoc duplicate = checker.find(index);
                if (duplicate) {
                    ma.errorRange(cond.getLoc(), cond.getRange(), "duplicate case string");
                    ma.note(duplicate, "previous case is here");
                    return false;
                }
            } else {
                ma.error(cond.getLoc(), "string switch case can only have a string literal or nil as condition");
                return false;
            }
            checker.add(index, cond.getLoc());
        } else {
            if (!cond.isCtv()) {
                ma.error(cond.getLoc(), "case condition is not compile-time constant");
                return false;
            }

            // check for duplicate value
            Value v = ctv_analyser.get_value(cond);
            u32 index = v.as_u32();
            SrcLoc duplicate = checker.find(index);
            if (duplicate) {
                ma.errorRange(cond.getLoc(), cond.getRange(), "duplicate case value %d", index);
                ma.note(duplicate, "previous case is here");
                return false;
            }
            checker.add(index, cond.getLoc());
        }
    }
    return true;
}

fn bool Analyser.checkEnumConstantCase(Analyser* ma,
                                       IdentifierExpr* id,
                                       init_checker.Checker* checker,
                                       EnumTypeDecl* etd,
                                       u32* enum_idx) {
    Expr* e = cast<Expr*>(id);
    EnumConstantDecl* ecd = etd.findConstantIdx(id.getNameIdx(), enum_idx);
    if (!ecd) {
        ma.error(e.getLoc(), "enum '%s' has no constant '%s'", etd.asDecl().getFullName(), id.getName());
        return false;
    }
    Decl* d = cast<Decl*>(ecd);
    d.setUsed();
    QualType qt = d.getType();
    e.setType(qt);
    e.setCtc();
    e.setCtv();
    e.setRValue();
    id.setDecl(d);
    id.setKind(IdentifierKind.EnumConstant);

    // check for duplicate value
    Value v = ecd.getValue();
    u32 index = v.as_u32();
    SrcLoc duplicate = checker.find(index);
    if (duplicate) {
        ma.error(e.getLoc(), "duplicate case value '%s'", id.getName());
        ma.note(duplicate, "previous case is here");
        return false;
    }
    checker.add(index, e.getLoc());
    return true;
}

fn bool Analyser.analyseMultiCaseCondition(Analyser* ma,
                                           SwitchCase* c,
                                           init_checker.Checker* checker,
                                           EnumTypeDecl* etd) {
    if (!etd) {
        // TODO
        assert(0);
    }

    IdentifierExpr** multi = c.getMultiCond();

    for (u32 i=0; i<c.numMulti(); i++) {
        IdentifierExpr* id = multi[i];
        u32 enum_idx = 0;
        if (!ma.checkEnumConstantCase(id, checker, etd, &enum_idx)) return false;


        if (id.isCaseRange()) {
            IdentifierExpr* id2 = multi[i+1];
            u32 enum_idx2 = 0;
            if (!ma.checkEnumConstantCase(id2, checker, etd, &enum_idx2)) return false;

            if (enum_idx >= enum_idx2) {
                Expr* e = cast<Expr*>(id2);
                ma.error(e.getLoc(), "enum constant '%s' does not come after '%s'", id2.getName(), id.getName());
                return false;
            }

            Expr* e1 = cast<Expr*>(id);
            SrcLoc loc1 = e1.getLoc();
            for (u32 idx=enum_idx+1; idx<enum_idx2; idx++) {
                EnumConstantDecl* ecd = etd.getConstant(idx);
                // check for duplicate value
                Value v = ecd.getValue();
                u32 index = v.as_u32();
                SrcLoc duplicate = checker.find(index);
                if (duplicate) {
                    Decl* d = cast<Decl*>(ecd);
                    ma.error(loc1, "duplicate case value '%s'", d.getName());
                    ma.note(duplicate, "previous case is here");
                    return false;
                }
                checker.add(index, loc1);
            }
            i++;
        }
    }

    return true;
}

fn bool isTerminatingStmt(const Stmt* s, bool is_default) {
    if (!s) return false;
    switch (s.getKind()) {
    case Return:
        return true;
    case Expr:
        const Expr* e = cast<Expr*>(s);
        if (!e.isCall()) break;
        // get from CallExpr -> FunctionDecl
        const CallExpr* c = cast<CallExpr*>(e);
        e = c.getFunc();
        QualType qt = e.getType();
        const FunctionType* ft = qt.getFunctionTypeOrNil();
        assert(ft);
        const FunctionDecl* fd = ft.getDecl();
        if (fd.hasAttrNoReturn()) return true;
        break;
    case If:
        const IfStmt* is = cast<IfStmt*>(s);
        return isTerminatingStmt(is.getThen(), is_default)
        &&     isTerminatingStmt(is.getElse(), is_default);
    case While:
    case For:
        // TODO: check constant condition and no break
        break;
    case Switch:
        // TODO: check if unreachable
        break;
    case Break:
        return true;
    case Continue:
        return true;
    case Fallthrough:
        return !is_default;
    case Goto:
        return true;
    case Compound:
        CompoundStmt* c = cast<CompoundStmt*>(s);
        return isTerminatingStmt(c.getLastStmt(), is_default);
    default:
        break;
    }
    return false;
}

