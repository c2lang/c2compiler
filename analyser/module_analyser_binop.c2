/* Copyright 2022-2025 Bas van den Berg
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

module module_analyser;

import ast local;
import conversion_checker;
import ctv_analyser;

fn bool validBinOpKind(QualType t) {
    t = t.getCanonicalType();

    switch (t.getKind()) {
    case Builtin:
        return true;
    case Pointer:
        return true;
    case Array:
        break;
    case Struct:
        return true;
    case Enum:
        return true;
    case Function:
        return true;    // eg. when assigning function pointers
    case Alias:
        assert(0);
        break;
    case Module:
        break;
    }
    return false;
}

const u32[] Binop_lhs = {
    RHS,        // Multiply
    RHS,        // Divide
    RHS,        // Remainder
    RHS,        // Add
    RHS,        // Subtract
    RHS,        // ShiftLeft
    RHS,        // ShiftRight
    RHS,        // LessThan
    RHS,        // GreaterThan
    RHS,        // LessEqual
    RHS,        // GreaterEqual
    RHS,        // Equal
    RHS,        // NotEqual
    RHS,        // And
    RHS,        // Xor
    RHS,        // Or
    RHS,        // LAnd
    RHS,        // LOr
    LHS,        // Assign
    LHS|RHS,    // MulAssign
    LHS|RHS,    // DivAssign
    LHS|RHS,    // RemAssign
    LHS|RHS,    // AddAssign
    LHS|RHS,    // SubAssign
    LHS|RHS,    // ShlAssign
    LHS|RHS,    // ShrASsign
    LHS|RHS,    // AndAssign
    LHS|RHS,    // XorAssign
    LHS|RHS,    // OrAssign
}

static_assert(elemsof(BinaryOpcode), elemsof(Binop_lhs));

/*
    // convert aliasType + enum to impl for check
    // ignoring Floats for now
    Multiply,       int
    Divide          int
    Remainder,      int
    Add,            ptr(l/r), int
    Subtract,       ptr(l/both), int
    ShiftLeft,      int
    ShiftRight,     int
    LessThan,       ptr(both), int (both)
    GreaterThan,    ptr(both), int (both)
    LessEqual,      ptr(both), int (both)
    GreaterEqual,   ptr(both), int (hoth)
    Equal,          ptr(both), int (both)
    NotEqual,       ptr(both), int (both)
    And,            int
    Xor,            int
    Or,             int
    LAnd,           ptr, int
    LOr,            ptr, int
    Assign,         struct(both), ptr, int
    MulAssign,      int
    DivAssign,      int
    RemAssign,      int
    AddAssign,      ptr(l), int
    SubAssign,      ptr(l), int
    ShlAssign,      int
    ShrASsign,      int
    AndAssign,      int
    XorAssign,      int
    OrAssign,       int
*/

    /*
        int + int -> integer promotions
        const int + int -> int
        const int + const int -> int
        int + enum -> int
        enumA + enumA -> enumA

        Not Allowed
        enumA + enumB
    */
// Both sides must be integers (Enum is allowed)
fn QualType Analyser.checkBinopIntArgs(Analyser* ma, BinaryOperator* b, QualType lhs, QualType rhs) {
    QualType lcanon = lhs.getCanonicalType();
    QualType rcanon = rhs.getCanonicalType();
    assert(lcanon.isValid());
    assert(rcanon.isValid());

    // Note: enums are their own canonical type, so use implType here
    if (lcanon.isEnum()) {
        EnumType* et = lcanon.getEnum();
        EnumTypeDecl* etd = et.getDecl();
        lcanon = etd.getImplType();
    }
    if (rcanon.isEnum()) {
        EnumType* et = rcanon.getEnum();
        EnumTypeDecl* etd = et.getDecl();
        rcanon = etd.getImplType();
    }

    BuiltinType* bl = lcanon.getBuiltinTypeOrNil();
    BuiltinType* br = rcanon.getBuiltinTypeOrNil();
    if (!bl || !br || lcanon.isVoid() || lcanon.isVoid()) {
        Expr* e = cast<Expr*>(b);
        ma.error(e.getLoc(), "invalid operands to binary expression ('%s' and '%s')", lhs.diagName(), rhs.diagName());
        return QualType_Invalid;
    }

    QualType optype = conversion_checker.usual_arithmetic_conversion(bl, br);
    BuiltinType* bi = optype.getBuiltin();
    if (bl != bi) {
        ma.builder.insertImplicitCast(ImplicitCastKind.IntegralCast, b.getLHS2(), optype);
    }
    if (br != bi) {
        ma.builder.insertImplicitCast(ImplicitCastKind.IntegralCast, b.getRHS2(), optype);
    }
    return optype;
}

fn QualType Analyser.checkBinopLogical(Analyser* ma, BinaryOperator* b, QualType lhs, QualType rhs) {
    bool ok = ma.checker.check(builtins[BuiltinKind.Bool], lhs, b.getLHS2(), b.getLHS().getLoc());
    ok &= ma.checker.check(builtins[BuiltinKind.Bool], rhs, b.getRHS2(), b.getRHS().getLoc());
    if (ok) return builtins[BuiltinKind.Bool];

    Expr* e = cast<Expr*>(b);
    ma.error(e.getLoc(), "invalid operands to binary expression ('%s' and '%s')", lhs.diagName(), rhs.diagName());
    return QualType_Invalid;
}

// 0  cannot happen
// 1  invalid
// 2  builtin - builtin
// 3  builtin - enum -> int
// 4  pointer - builtin/enum
// 5  enum - builtin
// 6  enum - enum -> int (CTV)
const u8[elemsof(TypeKind)][elemsof(TypeKind)] BinOpConvAddSubAss = {
    //  Builtin Pointer Array   Struct  Enum    Func   Alias  Module
    //  Builtin += / -=
    {   2,      1,      0,      1,      3,      0,     0,     0  },
    //  Pointer += / -=
    {   4,      1,      0,      1,      4,      1,     0,     0  },
    //  Array += / -=
    {   0,      0,      0,      0,      0,      0,     0,     0  },
    //  Struct += / -=
    {   1,      1,      0,      1,      1,      1,     0,     0  },
    //  Enum += / -=
    {   5,      1,      0,      1,      6,      1,     0,     0  },
    //  Function += / -=
    {   0,      0,      0,      1,      0,      0,     0,     0  },
    // Alias + Module are zero
}
fn QualType Analyser.checkBinopAddSubAssign(Analyser* ma, BinaryOperator* b, QualType lhs, QualType rhs) {
    QualType lcanon = lhs.getCanonicalType();
    QualType rcanon = rhs.getCanonicalType();
    assert(lcanon.isValid());
    assert(rcanon.isValid());

    u8 res = BinOpConvAddSubAss[lcanon.getKind()][rcanon.getKind()];
    switch (res) {
    case 0: // cannot happen
        break;
    case 1: // invalid
        Expr* e = cast<Expr*>(b);
        ma.error(e.getLoc(), "invalid operands to binary expression ('%s' and '%s')", lhs.diagName(), rhs.diagName());
        return QualType_Invalid;
    case 2: // builtin - builtin
        // TODO do integer promotion, int -> float conversion
        return lhs;
    case 3: // builtin - enum -> int
        // TODO do integer promotion, int -> float conversion
        return lhs;
    case 4: // pointer - builtin/enum
        return lhs;
    case 5: // enum - builtin
        // TODO do integer promotion, int -> float conversion
        return lhs;
    case 6: // enum - enum -> int (CTV)
        // TODO check same enum type
        return lhs;
    }
    assert(0);
    return QualType_Invalid;
}

// 0  cannot happen
// 1  invalid
// 2  builtin + builtin
// 3  builtin/enum + ptr
// 4  ptr + builtin/enum
// 5  builtin +  enum
// 6  enum + builtin
// 7  enum + enum -> int
// TODO remove Alias/Module (+Array, need to move) since already checked
// TODO need to fix C2C.c++ (asserts of elemsof(..) -2), then table can be 5x5
const u8[elemsof(TypeKind)][elemsof(TypeKind)] BinOpConvAdd = {
    //  Builtin Pointer Array   Struct  Enum    Func   Alias  Module
    //  Builtin +
    {   2,      3,      0,      1,      5,      0,     0,     0  },
    //  Pointer +
    {   4,      1,      0,      1,      4,      1,     0,     0  },
    //  Array +
    {   0,      0,      0,      0,      0,      0,     0,     0  },
    //  Struct +
    {   1,      1,      0,      1,      1,      1,     0,     0  },
    //  Enum +
    {   6,      3,      0,      1,      7,      1,     0,     0  },
    //  Function +
    {   0,      0,      0,      1,      0,      0,     0,     0  },
    // Alias + Module are zero
}

fn QualType Analyser.checkBinopAddArgs(Analyser* ma, BinaryOperator* b, QualType lhs, QualType rhs) {
    QualType lcanon = lhs.getCanonicalType();
    QualType rcanon = rhs.getCanonicalType();
    assert(lcanon.isValid());
    assert(rcanon.isValid());

    u8 res = BinOpConvAdd[lcanon.getKind()][rcanon.getKind()];
    switch (res) {
    case 0: // cannot happen
        break;
    case 1: // invalid
        Expr* e = cast<Expr*>(b);
        ma.error(e.getLoc(), "invalid operands to binary expression ('%s' and '%s')", lhs.diagName(), rhs.diagName());
        return QualType_Invalid;
    case 2: // builtin + builtin
        BuiltinType* bl = lcanon.getBuiltin();
        BuiltinType* br = rcanon.getBuiltin();
        // TODO return BuiltinType?
        // TODO move somewhere else (used at many places)
        QualType optype = conversion_checker.usual_arithmetic_conversion(bl, br);
        BuiltinType* bi = optype.getBuiltin();
        if (bl != bi) {
            //stdio.printf("promote left\n");
            ma.builder.insertImplicitCast(ImplicitCastKind.IntegralCast, b.getLHS2(), optype);
        }
        if (br != bi) {
            //stdio.printf("promote right\n");
            ma.builder.insertImplicitCast(ImplicitCastKind.IntegralCast, b.getRHS2(), optype);
        }
        return optype;
    case 3: // builtin/enum + ptr
        // TODO check float
        return rhs;
    case 4: // ptr + builtin/enum
        // TODO check float
        return lhs;
    case 5: // builtin + enum
        return rhs;
    case 6: // enum +  builtin
        return lhs;
    case 7: // enum + enum -> int
        return builtins[BuiltinKind.UInt32];
    }
    assert(0);
    return QualType_Invalid;
}

// 0  cannot happen
// 1  invalid
// 2  builtin - builtin
// 3  builtin - enum -> int
// 4  pointer - builtin/enum
// 5  pointer - pointer -> isize
// 6  enum - builtin
// 7  enum - enum -> int (CTV)
const u8[elemsof(TypeKind)][elemsof(TypeKind)] BinOpConvSub = {
    //  Builtin Pointer Array   Struct  Enum    Func   Alias  Module
    //  Builtin -
    {   2,      1,      0,      1,      2,      0,     0,     0  },
    //  Pointer -
    {   4,      5,      0,      1,      4,      6,     0,     0  },
    //  Array -
    {   0,      0,      0,      0,      0,      0,     0,     0  },
    //  Struct -
    {   1,      1,      0,      1,      1,      1,     0,     0  },
    //  Enum -
    {   6,      1,      0,      1,      7,      1,     0,     0  },
    //  Function -
    {   0,      0,      0,      1,      0,      0,     0,     0  },
    // Alias + Module are zero
}
fn QualType Analyser.checkBinopSubArgs(Analyser* ma, BinaryOperator* b, QualType lhs, QualType rhs) {
    QualType lcanon = lhs.getCanonicalType();
    QualType rcanon = rhs.getCanonicalType();
    assert(lcanon.isValid());
    assert(rcanon.isValid());

    u8 res = BinOpConvSub[lcanon.getKind()][rcanon.getKind()];
    switch (res) {
    case 0: // cannot happen
        break;
    case 1: // invalid
        Expr* e = cast<Expr*>(b);
        ma.error(e.getLoc(), "invalid operands to binary expression ('%s' and '%s')", lhs.diagName(), rhs.diagName());
        return QualType_Invalid;
    case 2: // builtin - builtin
        BuiltinType* bl = lcanon.getBuiltin();
        BuiltinType* br = rcanon.getBuiltin();
        return conversion_checker.usual_arithmetic_conversion(bl, br);
    case 3: // builtin - enum -> int
        BuiltinType* bl = lcanon.getBuiltin();
        BuiltinType* br = rcanon.getBuiltin();
        // TODO do integer promotion first (get common type)
        return conversion_checker.usual_arithmetic_conversion(bl, br);
    case 4: // pointer - builtin/enum
        return lhs;
    case 5: // pointer - pointer
        // TODO extract to function? (same_pointer)
        PointerType* pt1 = lcanon.getPointerType();
        PointerType* pt2 = rcanon.getPointerType();
        QualType t1 = pt1.getInner();
        QualType t2 = pt2.getInner();
        if (t1.getTypeOrNil() != t2.getTypeOrNil() || t1.isVoid() || t2.isVoid()) {
            Expr* e = cast<Expr*>(b);
            ma.error(e.getLoc(), "invalid operands to binary expression ('%s' and '%s')", lhs.diagName(), rhs.diagName());
            return QualType_Invalid;
        }
        return builtins[BuiltinKind.ISize];
    case 6: // enum - builtin
        // TODO check if float
        return lhs;
    case 7: // enum - enum -> int
        // Result will be CTV
        return ast.builtins[BuiltinKind.Int32];
    }
    Expr* e = cast<Expr*>(b);
    ma.error(e.getLoc(), "invalid operands to binary expression ('%s' and '%s')", lhs.diagName(), rhs.diagName());
    return QualType_Invalid;
}

// 0  cannot happen
// 1  invalid
// 2  builtin vs builtin
// 3  pointer vs pointer - check same type
// 4  builtin vs enum
// 5  enum vs builtin
// 6  enum vs enum -> both CTV
// 7  pointer vs function
// 8  function vs pointer
// 9  function vs function
const u8[elemsof(TypeKind)][elemsof(TypeKind)] BinOpConvComparision = {
    //  Builtin Pointer Array   Struct  Enum    Func   Alias  Module
    //  Builtin vs
    {   2,      1,      0,      1,      4,      0,     0,     0  },
    //  Pointer vs
    {   1,      3,      0,      1,      1,      7,     0,     0  },
    //  Array +
    {   0,      0,      0,      0,      0,      0,     0,     0  },
    //  Struct vs
    {   1,      1,      0,      1,      1,      1,     0,     0  },
    //  Enum vs
    {   5,      1,      0,      1,      6,      1,     0,     0  },
    //  Function vs
    {   1,      8,      1,      1,      1,      9,     0,     0  },
    // Alias + Module are zero
}

fn QualType Analyser.checkBinopComparison(Analyser* ma, BinaryOperator* b, QualType lhs, QualType rhs) {
    QualType lcanon = lhs.getCanonicalType();
    QualType rcanon = rhs.getCanonicalType();
    Expr* e = cast<Expr*>(b);
    assert(lcanon.isValid());
    assert(rcanon.isValid());

    u8 res = BinOpConvComparision[lcanon.getKind()][rcanon.getKind()];
    switch (res) {
    case 0: // cannot happen
        ma.error(e.getLoc(), "invalid operands to binary expression ('%s' and '%s')", lhs.diagName(), rhs.diagName());
        return QualType_Invalid;
    case 1: // invalid
        ma.error(e.getLoc(), "invalid operands to binary expression ('%s' and '%s')", lhs.diagName(), rhs.diagName());
        return QualType_Invalid;
    case 2: // builtin vs builtin
        // TODO i32 < u32 is not the same as i32 = u32! dont use checker
        //if (ma.checker.check(lhs, rhs, &e, e.getLoc())) return QualType_Invalid;
        // TODO check floats
        return builtins[BuiltinKind.Bool];
    case 3: // pointer vs pointer - check same type
        // TODO check if same pointer type (ignoring const)
        return builtins[BuiltinKind.Bool];
    case 4: // builtin vs enum
        // TODO check floats
        return builtins[BuiltinKind.Bool];
    case 5: // enum vs builtin
        // TODO check floats
        return builtins[BuiltinKind.Bool];
    case 6: // enum vs enum -> both CTV
        if (lcanon.getTypeOrNil() != rcanon.getTypeOrNil()) {
            ma.error(e.getLoc(), "comparing enums of different types ('%s' and '%s')", lhs.diagName(), rhs.diagName());
            return QualType_Invalid;
        }
        return builtins[BuiltinKind.Bool];
    case 7: // function vs pointer
        return ma.checkPointerFuncComparison(b, lhs, rhs, lcanon, rcanon);
    case 8: // pointer vs function
        return ma.checkPointerFuncComparison(b, lhs, rhs, rcanon, lcanon);
    case 9: // function vs function
        // TODO only allow ==
        if (b.getOpcode() != BinaryOpcode.Equal && b.getOpcode() != BinaryOpcode.NotEqual) {
            ma.error(e.getLoc(), "comparing functions may only be done with '!=' or '=='");
            return QualType_Invalid;
        }
        return builtins[BuiltinKind.Bool];
    }
    ma.error(e.getLoc(), "TODO BINOP %d", res);
    assert(0);
    return QualType_Invalid;
}

fn QualType Analyser.checkPointerFuncComparison(Analyser* ma, BinaryOperator* b, QualType lhs, QualType rhs, QualType lcanon, QualType rcanon) {
    // only allow nil vs weak-function

    // pointer
    assert(lcanon.isPointer());
    PointerType* pt = lcanon.getPointerType();
    QualType inner = pt.getInner();
    Expr* e = cast<Expr*>(b);
    if (!inner.isVoid()) {
        ma.error(e.getLoc(), "invalid operands to binary expression ('%s' and '%s')", lhs.diagName(), rhs.diagName());
        return QualType_Invalid;
    }

    // function
    assert(rcanon.isFunction());
    FunctionType* ft = rcanon.getFunctionType();
    FunctionDecl* fd = ft.getDecl();
    if (fd.isType() || fd.hasAttrWeak()) return builtins[BuiltinKind.Bool]; // Variable with Function type (eg callback)

    ma.error(e.getLoc(), "comparison of function '%s' will always be true", fd.asDecl().getFullName());
    return QualType_Invalid;
}

fn QualType Analyser.analyseBinaryOperator(Analyser* ma, Expr** e_ptr) {
    Expr* e = *e_ptr;
    BinaryOperator* b = cast<BinaryOperator*>(e);
    BinaryOpcode opcode = b.getOpcode();

    bool need_lhs_rvalue = true;
    if (opcode >= BinaryOpcode.Assign) need_lhs_rvalue = false;

    QualType ltype = ma.analyseExpr(b.getLHS2(), need_lhs_rvalue, Binop_lhs[opcode]);
    if (ltype.isInvalid()) return QualType_Invalid;

    if (!need_lhs_rvalue) { // so we need an lvalue
        if (!ma.checkAssignment(b.getLHS(), ltype, "left operand of assignment", e.getLoc())) {
            return QualType_Invalid;
        }
    }

    QualType rtype;
    if (opcode.isComparison()) {
        // special case for enum comparison without prefix (eg kind >= KW_void)
        if (ma.checkEnumArg(b.getRHS2(), ltype))
            return builtins[BuiltinKind.Bool];
    }
    if (opcode == BinaryOpcode.Assign) {
        if (!ma.analyseInitExpr(b.getRHS2(), ltype, e.getLoc()))
            return QualType_Invalid;
        rtype = b.getRHS().getType();
    } else {
        rtype = ma.analyseExpr(b.getRHS2(), true, RHS);
    }
    if (rtype.isInvalid()) return QualType_Invalid;

    Expr* lhs = b.getLHS();
    Expr* rhs = b.getRHS();

    if (!validBinOpKind(ltype) || ltype.isVoid()) {
        QualType tl = lhs.getType();
        ma.error(lhs.getLoc(), "invalid operand to binary expression '%s'", tl.diagName());
        return QualType_Invalid;
    }

    if (!validBinOpKind(rtype) || rtype.isVoid()) {
        QualType tr = rhs.getType();
        ma.error(rhs.getLoc(), "invalid operand to binary expression '%s'", tr.diagName());
        return QualType_Invalid;
    }

    // TODO pass a struct with the types and canonical Types along, so we dont have to do this in every function

    QualType result = QualType_Invalid;
    switch (opcode) {
    case Multiply:
        result = ma.checkBinopIntArgs(b, ltype, rtype);
        break;
    case Divide:
        if (!ma.checkZero(rhs, "division")) return QualType_Invalid;
        result = ma.checkBinopIntArgs(b, ltype, rtype);
        break;
    case Remainder:
        if (!ma.checkZero(rhs, "remainder")) return QualType_Invalid;
        if (!ma.checkFloat(lhs, rhs, "remainder")) return QualType_Invalid;
        result = ma.checkBinopIntArgs(b, ltype, rtype);
        break;
    case Add:
        result = ma.checkBinopAddArgs(b, ltype, rtype);
        break;
    case Subtract:
        result = ma.checkBinopSubArgs(b, ltype, rtype);
        break;
    case ShiftLeft:
    case ShiftRight:
        // TODO First promote, then check ShiftArgs
        result = ma.checkBinopIntArgs(b, ltype, rtype);
        // TODO re-read
        if (!ma.checkShiftArgs(b.getLHS(), b.getRHS())) return QualType_Invalid;
        break;
    case LessThan:
    case GreaterThan:
    case LessEqual:
    case GreaterEqual:
        // TODO dont allow some (ptr vs func etc)
        result = ma.checkBinopComparison(b, ltype, rtype);
        break;
    case Equal:
    case NotEqual:
        result = ma.checkBinopComparison(b, ltype, rtype);
        break;
    case And:
    case Xor:
    case Or:
        result = ma.checkBinopIntArgs(b, ltype, rtype);
        break;
    case LAnd:
    case LOr:
        result = ma.checkBinopLogical(b, ltype, rtype);
        break;
    case Assign:
        result = ltype;
        break;
    case MulAssign:
        result = ma.checkBinopIntArgs(b, ltype, rtype);
        break;
    case DivAssign:
        if (!ma.checkZero(rhs, "division")) return QualType_Invalid;
        result = ma.checkBinopIntArgs(b, ltype, rtype);
        break;
    case RemAssign:
        if (!ma.checkZero(rhs, "remainder")) return QualType_Invalid;
        result = ma.checkBinopIntArgs(b, ltype, rtype);
        break;
    case AddAssign:
    case SubAssign:
        result = ma.checkBinopAddSubAssign(b, ltype, rtype);
        break;
    case ShlAssign:
    case ShrAssign:
        if (!ma.checkShiftArgs(lhs, rhs)) return QualType_Invalid;
        fallthrough;
    case AndAssign:
    case XorAssign:
    case OrAssign:
        result = ma.checkBinopIntArgs(b, ltype, rtype);
        break;
    }

    e.combineConstantFlags(lhs, rhs);
    return result;
}

fn bool Analyser.checkShiftArgs(Analyser* ma, Expr* lhs, Expr* rhs) {
    // check lhs
    QualType qt = lhs.getType();
    QualType canon = qt.getCanonicalType();
    if (!canon.isBuiltin()) {
        // TODO
        ma.error(lhs.getLoc(), "cannot shift .. TODO");
        return false;
    }
    BuiltinType* bi = canon.getBuiltinTypeOrNil();
    u32 width = bi.getWidth();
    width += bi.isSigned(); // allow i32 a = 1 << 31

    if (lhs.isCtv()) {
        Value val = ctv_analyser.get_value(lhs);
        if (val.isNegative()) {
            ma.error(lhs.getLoc(), "shifting a negative signed value is undefined");
            return false;
        }
    }

    // check rhs
    if (rhs.isCtv()) {
        Value val = ctv_analyser.get_value(rhs);
        if (val.isNegative()) {
            ma.error(rhs.getLoc(), "shift count is negative");
            return false;
        }

        // check if shifting more than width
        if (val.as_u64() >= width) {
            ma.error(rhs.getLoc(), "shift count >= width of type");
            return false;
        }
    }

    return true;
}

fn bool Analyser.checkZero(Analyser* ma, Expr* e, const char* operation) {
    if (!e.isCtv()) return true;

    Value val = ctv_analyser.get_value(e);
    if (val.isDecimal()) {
        if (val.isZero()) {
            ma.error(e.getLoc(), "%s by zero is undefined", operation);
            return false;
        }
        // TODO check for division overflow: max_i64 / -1
    }
    return true;
}

fn bool Analyser.checkFloat(Analyser* ma, Expr* lhs, Expr* rhs, const char* operation) {
    QualType t1 = lhs.getType();
    if (t1.isFloat()) {
        ma.error(lhs.getLoc(), "invalid operand for binary operation %s", operation);
        return false;
    }
    QualType t2 = rhs.getType();
    if (t2.isFloat()) {
        ma.error(rhs.getLoc(), "invalid operand for binary operation %s", operation);
        return false;
    }
    return true;
}

