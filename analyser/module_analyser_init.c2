/* Copyright 2022-2025 Bas van den Berg
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

module module_analyser;

import ast local;
import ctv_analyser;
import init_checker;
import src_loc local;

fn bool Analyser.analyseInitExpr(Analyser* ma, Expr** e_ptr, QualType expectedType, SrcLoc assignLoc) {
    Expr* e = *e_ptr;
    if (e.isInitList()) {
        return ma.analyseInitListExpr(cast<InitListExpr*>(e), expectedType);
    }

    if (e.isStringLiteral()) {
        // could be (const) char* x = "text" OR (const) char[] x = "text";
        // check array case for overflow
        // when doing char[] a = "abc" -> string is not an LValue
        // when doing char*  a = "abc" -> string is lvalue (so insert ArrayToPointerDecay)
        ArrayType* at = expectedType.getArrayTypeOrNil();
        if (at) {
            // check that element type is char/i8/u8
            QualType elem = at.getElemType();
            if (elem.getTypeOrNil() != builtins[BuiltinKind.Char].getTypeOrNil()
            &&  elem.getTypeOrNil() != builtins[BuiltinKind.Int8].getTypeOrNil()
            &&  elem.getTypeOrNil() != builtins[BuiltinKind.UInt8].getTypeOrNil()) {
                ma.errorRange(assignLoc, e.getRange(), "cannot initialize array of '%s' with a string literal", elem.diagName());
                return false;
            }

            QualType st = e.getType();
            ArrayType* at2 = st.getArrayType();
            u32 rhs_len = at2.getSize();
            if (at.hasSize()) {
                u32 lhs_len = at.getSize();
                if (rhs_len > lhs_len) {
                    ma.errorRange(assignLoc, e.getRange(), "initializer-string for char array is too long");
                    return false;
                }
            } else {
                at.setSize(rhs_len);
            }
            e.setRValue();
        } else {
            // need to add ArrayToPointerDecay (otherwise checker can get arrays)
            QualType qt = ma.analyseExpr(e_ptr, true, RHS);
            // TODO check qt?
            e = *e_ptr;
            if (!ma.checker.check(expectedType, e.getType(), e_ptr, assignLoc)) return false;
        }
        return true;
    }

    if (expectedType.isArray() && !e.isInitList()) {
        ma.error(assignLoc, "array initializer must be an initializer list");
        return false;
    }

    if (e.isCall() && ma.globalScope()) {
        //CallExpr* c = cast<CallExpr*>(e);
        QualType qt = ma.analysePureCallExpr(e);
        // TODO check if compatible
        return true;
    }

    QualType res = ma.analyseExpr(e_ptr, true, RHS);
    if (res.isInvalid()) return false;
    e = *e_ptr; // re-read since ImplicitCasts could have been inserted

    // TODO Canonical?
    if (e.isCtv() && expectedType.isBuiltin() && !res.isPointer()) {
        // TODO not correct since conversion might be to something else?
        if (expectedType.isBool()) return true;
        return ctv_analyser.check(ma.diags, expectedType, e);
    }

    if (!ma.checker.check(expectedType, res, e_ptr, assignLoc)) return false;

    if (!ma.curFunction && !e.isCtv()) {
        if (!e.isCtc()) {
            ma.errorRange(e.getLoc(), e.getRange(), "initializer element is not a compile-time constant");
            return false;
        }

        if (expectedType.needsCtvInit()) {
            ma.errorRange(e.getLoc(), e.getRange(), "initializer element is not a compile-time value");
            return false;
        }
    }

    return true;
}

fn bool Analyser.analyseInitListExpr(Analyser* ma, InitListExpr* ile, QualType expectedType) {
    const Type* t = expectedType.getTypeOrNil();
    if (t.isArrayType()) {
        return ma.analyseInitListArray(ile, expectedType);
    }

    if (t.isStructType()) {
        return ma.analyseInitListStruct(ile, expectedType);
    }

    Expr* e = cast<Expr*>(ile);
    ma.error(e.getLoc(), "cannot initialize variable of type '%s' with initializer list", expectedType.diagName());
    return false;
}

// Note: this function should only be called from analyseInitListArray directly!
fn bool Analyser.analyseArrayDesignatedInit(Analyser* ma, Expr* e, QualType expectedType) {
    ArrayDesignatedInitExpr* ad = cast<ArrayDesignatedInitExpr*>(e);

    QualType qt = ma.analyseExpr(ad.getDesignator2(), false, RHS);
    if (qt.isInvalid()) return false;

    Expr* de = ad.getDesignator();
    if (!de.isCtv()) {
        ma.errorRange(de.getLoc(), de.getRange(), "array index is not a compile-time value");
        return false;
    }

    Expr* val = ad.getInit();

    if (val.isInitList()) {
        return ma.analyseInitListExpr(cast<InitListExpr*>(val), expectedType);
    }
    bool ok = ma.analyseInitExpr(ad.getInit2(), expectedType, val.getLoc());
    if (!ok) return false;

    if (!ma.curFunction) {
        if (!val.isCtc()) {
            ma.errorRange(val.getLoc(), val.getRange(), "initializer element is not a compile-time constant");
            return false;
        }

        if (!val.isCtv() && expectedType.needsCtvInit()) {
            ma.errorRange(val.getLoc(), val.getRange(), "initializer element is not a compile-time value");
            return false;
        }
    }

    val = ad.getInit(); // re-read because of ImplicitCasts
    e.copyConstantFlags(val);
    e.setType(expectedType);
    return true;
}

fn bool Analyser.analyseInitListArray(Analyser* ma, InitListExpr* ile, QualType expectedType) {
    Expr* e = cast<Expr*>(ile);
    u32 numValues = ile.getNumValues();
    Expr** values = ile.getValues();

    expectedType.clearQuals();
    ArrayType* at = expectedType.getArrayType();
    QualType et = at.getElemType();
    et.clearQuals();

    bool ok = true;
    bool ctc = true;
    bool have_designators = false;
    u32 current_index = 0;

    for (u32 i=0; i<numValues; i++) {
        Expr* value = values[i];

        if (value.isFieldDesignatedInit()) {
            ma.errorRange(value.getLoc(), value.getRange(), "field designator cannot initialize an array");
            ok = false;
            continue;
        }
        if (value.isArrayDesignatedInit()) {
            ok &= ma.analyseArrayDesignatedInit(value, et);
            have_designators = true;
            continue;
        }
        ok &= ma.analyseInitExpr(&values[i], et, values[i].getLoc());
        ctc &= values[i].isCtc();
    }
    current_index = numValues;   // TODO also keep track of ArrayDesignatedInit

    if (ctc) e.setCtc();
    if (!ok) return false;

    if (have_designators) {
        i32 array_size = -1; // will be determined by init-expr
        if (at.hasSize()) array_size = cast<i32>(at.getSize());

        init_checker.Checker* checker = ma.getInitChecker();
        ok = ma.checkArrayDesignators(ile, &array_size, checker);
        ma.putInitChecker(checker);

        if (!at.hasSize()) at.setSize(cast<u32>(array_size));

    } else {
        if (at.hasSize()) {
            u32 arraySize = at.getSize();
            if (current_index > arraySize) {
                ma.error(values[arraySize].getLoc(), "excess elements in array initializer");
                return false;
            }
        } else {
            at.setSize(numValues);
        }
    }

    e.setType(expectedType);
    return ok;
}

fn bool Analyser.checkArrayDesignators(Analyser* ma, InitListExpr* ile, i32* size, init_checker.Checker* checker) {
    u32 numValues = ile.getNumValues();
    Expr** values = ile.getValues();

    i32 max_index = 0;
    i32 current_index = -1;
    for (u32 i=0; i<numValues; i++) {
        SrcLoc loc;
        Expr* value = values[i];
        if (value.isArrayDesignatedInit()) {
            ArrayDesignatedInitExpr* ad = cast<ArrayDesignatedInitExpr*>(value);
            Expr* desig = ad.getDesignator();
            loc = desig.getLoc();
            Value idx = ctv_analyser.get_value(desig);
            if (idx.isNegative()) {
                ma.error(loc, "array designator value '%s' is negative", idx.str());
                return false;
            }
            if (*size != -1 && (*size <= 0 || !idx.checkRange(0, cast<u64>(*size - 1)))) {
                ma.error(loc, "array designator index (%s) exceeds array bounds (%d)", idx.str(), *size);
                return false;
            }
            current_index = idx.as_i32();
        } else {
            loc = value.getLoc();
            current_index++;
        }
        if (*size != -1 && current_index >= *size) {
            ma.error(value.getLoc(), "excess elements in array initializer");
            return false;
        }

        // check for duplicate entries
        SrcLoc duplicate = checker.find(cast<u32>(current_index));
        if (duplicate) {
            ma.error(loc, "duplicate initialization of array index");
            ma.note(duplicate, "previous initialization is here");
        } else {
            checker.add(cast<u32>(current_index), loc);
        }

        if (current_index > max_index) max_index = current_index;
    }
    if (*size == -1) *size = max_index + 1;
    return true;
}

fn bool Analyser.analyseInitListStruct(Analyser* ma, InitListExpr* ile, QualType expectedType) {
    // Note: expectedType is StructType
    Expr* e = cast<Expr*>(ile);
    u32 numValues = ile.getNumValues();
    Expr** values = ile.getValues();

    StructType* st = expectedType.getStructType();
    StructTypeDecl* std = st.getDecl();

    // just init all values to 0
    if (numValues == 0) {
        e.setType(expectedType);
        return true;
    }

    // only allow none or all fields to use Designators
    const bool haveDesignators = (values[0].isFieldDesignatedInit());

    if (!haveDesignators && std.isUnion()) {
        ma.error(values[0].getLoc(), "union member initializer needs field designator");
        return false;
    }

    const u32 num_members = std.getNumMembers();
    Decl** members = std.getMembers();

    for (u32 i=0; i<numValues; i++) {
        Expr* value = values[i];
        if (i >= num_members) {
            ma.error(value.getLoc(), "excess initializer elements in struct");
            return false;
        }
        if (value.isArrayDesignatedInit()) {
            ma.error(value.getLoc(), "array designator cannot initialize non-array type '%s'", expectedType.diagName());
            return false;
        }
        bool is_designator = value.isFieldDesignatedInit();
        if (haveDesignators != is_designator) {
            ma.error(value.getLoc(), "mixing field designators with non-field designators");
            return false;
        }
        if (is_designator) {
            FieldDesignatedInitExpr* fdi = cast<FieldDesignatedInitExpr*>(value);
            u32 field = fdi.getField();
            Decl* member = ma.findStructMember(std, field, value.getLoc(), false);
            if (!member) return false;

            fdi.setDecl(member);
            member.setUsed();

            bool ok = ma.analyseInitExpr(fdi.getInit2(), member.getType(), fdi.getInit().getLoc());
            if (!ok) return false;
            // TODO allow substruct init by name?
            value.setType(fdi.getInit().getType());

        } else {
            members[i].setUsed();
            bool ok = ma.analyseInitExpr(&values[i], members[i].getType(), values[i].getLoc());
            if (!ok) return false;
        }

    }

    // check for duplicates
    if (haveDesignators) {
        init_checker.Checker* checker = ma.getInitChecker();
        bool ok = ma.checkFieldDesignators(ile, checker);
        ma.putInitChecker(checker);
        if (!ok) return false;
    }

    expectedType.clearQuals();
    e.setType(expectedType);
    return true;
}

fn bool Analyser.checkFieldDesignators(Analyser* ma, InitListExpr* ile, init_checker.Checker* checker) {
    u32 numValues = ile.getNumValues();
    Expr** values = ile.getValues();

    for (u32 i=0; i<numValues; i++) {
        Expr* value = values[i];
        if (!value.isFieldDesignatedInit()) {
            ma.error(value.getLoc(), "mixing field designators with non-field designators");
            return false;
        }
        FieldDesignatedInitExpr* fdi = cast<FieldDesignatedInitExpr*>(value);
        SrcLoc loc = value.getLoc();
        u32 field = fdi.getField();

        SrcLoc duplicate = checker.find(field);
        if (duplicate) {
            ma.error(loc, "duplicate initialization of field '%s'", fdi.getFieldName());
            ma.note(duplicate, "previous initialization is here");
            return false;
        } else {
            checker.add(field, loc);
        }
    }
    return true;
}

