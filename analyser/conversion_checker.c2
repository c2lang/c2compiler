/* Copyright 2022-2025 Bas van den Berg
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

module conversion_checker;

import ast local;
import ast_builder;
import diagnostics;
import ctv_analyser;
import src_loc local;

import stdio local;

//  0 = cannot happen (mostly Module/Alias type)
//  1 = Not allowed
//  2 = Builtin -> Builtin
//  3 = Builtin -> Pointer (only usize/u64/u32 -> void*)
//  4 = Pointer -> Builtin (only void* -> usize/u64/u32)
//  5 = Pointer -> Pointer
//  6 = Pointer -> Func (void* or Func*)
//  7 = Array -> Pointer
//  8 = Array -> Array
//  9 = Struct -> Struct
// 10 = Enum -> Builtin (check range)
// 11 = Func -> Pointer (void* or Func*)
// 12 = Func -> Func
// 13 = Builtin -> Enum
// 14 = Enum -> Enum
// 15 = Builtin -> Func
// 16 = Func -> Builtin
const u8[elemsof(TypeKind)][elemsof(TypeKind)] Conversions = {
    //  Builtin Pointer Array   Struct  Enum    Func   Alias    Module
    //  Builtin ->
    {   2,      3,      1,      1,     13,     15,      0,      0   },
    //  Pointer ->
    {   4,      5,      1,      1,      1,      6,      0,      0   },
    //  Array ->
    {   1,      7,      8,      1,      1,      1,      0,      0   },
    //  Struct ->
    {   1,      1,      1,      9,      1,      1,      0,      0   },
    //  Enum ->
    {   10,     1,      1,      1,     14,      1,      0,      0   },
    //  Function ->
    {   16,     11,     1,      1,      1,      12,     0,      0   },
    //  Alias ->
    {   0,      0,      0,      0,      0,      0,      0,      0   },
    //  Module ->
    {   0,      0,      0,      0,      0,      0,      0,      0   },
}

//  0 = should not happen? (same)
//  1 = ok, but needs conversion
//  2 = incompatible
//  3 = sign-conversion
//  4 = loss of integer-precision
//  5 = float -> integer
//  6 = loss of FP-precision
//  7 = ok, no conversion needed (eg. char -> u8, isize -> i64, i32 -> bool)
const u8[elemsof(BuiltinKind)][elemsof(BuiltinKind)] BuiltinConversions = {
    //  Char   Int8   Int16  Int32  Int64  UInt8  UInt16 UInt32 UInt64 Flt32  Flt64  ISize  USize  Bool  Void
    //  1      2      3      4      5      6      7      8      9      10     11     12     13     14    15
    // Char ->
    {   0,     3,     1,     1,     1,     7,     1,     1,     1,     1,     1,     1,     1,     7,    2  },
    // Int8 ->
    {   3,     0,     1,     1,     1,     3,     3,     3,     3,     1,     1,     1,     3,     7,    2  },
    // Int16 ->
    {   4,     4,     0,     1,     1,     3,     3,     3,     3,     1,     1,     1,     3,     7,    2  },
    // Int32 ->
    {   4,     4,     4,     0,     1,     3,     3,     3,     3,     1,     1,     1,     3,     7,    2  },
    // Int64 ->
    {   4,     4,     4,     4,     0,     3,     3,     3,     3,     1,     1,     7,     3,     7,    2  },
    // UInt8 ->
    {   1,     3,     3,     3,     3,     0,     1,     1,     1,     1,     1,     3,     1,     7,    2  },
    // UInt16 ->
    {   4,     4,     3,     3,     3,     4,     0,     1,     1,     1,     1,     3,     1,     7,    2  },
    // UInt32 ->
    {   4,     4,     4,     3,     3,     4,     4,     0,     1,     1,     1,     3,     1,     7,    2  },
    // UInt64 ->
    {   4,     4,     4,     4,     3,     4,     4,     4,     0,     1,     1,     3,     7,     7,    2  },
    // Flt32 ->
    {   5,     5,     5,     5,     5,     5,     5,     5,     5,     0,     1,     5,     5,     2,    2  },
    // Flt64 ->
    {   5,     5,     5,     5,     5,     5,     5,     5,     5,     6,     0,     5,     5,     2,    2  },
    // ISize ->
    {   4,     4,     4,     4,     7,     4,     4,     4,     3,     1,     1,     0,     3,     7,    2  },
    // USize ->
    {   4,     4,     4,     4,     3,     4,     4,     4,     7,     1,     1,     3,     0,     7,    2  },
    // Bool ->
    {   1,     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,     0,    2  },
    // Void ->
    {   2,     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,    0  },
}

public type Checker struct {
    diagnostics.Diags* diags;
    ast_builder.Builder* builder;

    // changes every check
    SrcLoc loc;
    QualType lhs;
    QualType rhs;
    Expr** expr_ptr;
}

public fn void Checker.init(Checker* c, diagnostics.Diags* diags, ast_builder.Builder* builder) {
    c.diags = diags;
    c.builder = builder;
}

public fn bool Checker.check(Checker* c, QualType lhs,  QualType rhs, Expr** e_ptr, SrcLoc loc) {
    assert(lhs.ptr);
    assert(rhs.ptr);
    assert (!(*e_ptr).isNValue());

    QualType t1 = lhs.getCanonicalType();
    QualType t2 = rhs.getCanonicalType();

    if ((*e_ptr).isCtv() && t1.isBuiltin() && !t2.isPointer()) {
        // TODO also need to check conversion otherwise (eg. Struct a = 123)
        // TODO if bool, always allow, except in init?
        if (t1.isBool()) return true;

        return ctv_analyser.check(c.diags, lhs, *e_ptr);
    }

    const Type* lcanon = t1.getTypeOrNil();
    const Type* rcanon = t2.getTypeOrNil();

    if (lcanon == rcanon) {
        u32 lquals = lhs.getQuals();
        u32 rquals = rhs.getQuals();
        if (lcanon.getKind() == TypeKind.Pointer && rhs.isConst() && !lhs.isConst()) {
            // TODO volatile discard?
            c.diags.error(loc, "conversion discards const qualifier");
            return false;
        }
        return true;
    }

    c.lhs = lhs;
    c.rhs = rhs;
    c.expr_ptr = e_ptr;
    c.loc = loc;

    return c.checkTypes(lcanon, rcanon);
}

fn bool Checker.checkTypes(Checker* c, const Type* lcanon, const Type* rcanon) {

    u8 res = Conversions[rcanon.getKind()][lcanon.getKind()];

    switch (res) {
    case 0: // cannot happen
        c.diags.error(c.loc, "SHOULD NOT HAPPEN (%d - %d)\n", lcanon.getKind(), rcanon.getKind());
        c.lhs.dump_full();
        c.rhs.dump_full();
        assert(0);
        return false;
    case 1: // not allowed
        c.diags.error(c.loc, "invalid type conversion from '%s' to '%s'", c.rhs.diagName(), c.lhs.diagName());
        return false;
    case 2: //  2 = Builtin -> Builtin
        return c.checkBuiltins(lcanon, rcanon);
    case 3: //  3 = Builtin -> Pointer (only if usize/u64/u32)
        return c.checkBuiltin2Pointer(lcanon, rcanon);
    case 4: //  4 = Pointer -> Builtin (only if usize/u64/u32)
        return c.checkPointer2Builtin(lcanon, rcanon);
    case 5: //  5 = Pointer -> Pointer
        return c.checkPointers(lcanon, rcanon);
    case 6: //  6 = Pointer -> Func (void* or Func*)
        return c.checkPointer2Func(lcanon, rcanon);
    case 7: //  7 = Array -> Pointer
        c.diags.note(c.loc, "SHOULD NOT HAPPEN (Array -> Ptr)");
        c.lhs.dump_full();
        c.rhs.dump_full();
        assert(0);
        return false;
    case 8: //  8 = Array -> Array
        c.diags.error(c.loc, "invalid type conversion from '%s' to '%s'", c.rhs.diagName(), c.lhs.diagName());
        return false;
    case 9: //  9 = Struct -> Struct
        c.diags.error(c.loc, "conversion between struct of different types ('%s' to '%s')", c.rhs.diagName(), c.lhs.diagName());
        return false;
    case 10: // 10 = Enum -> Builtin (check range)
        return c.checkEnum2Int(lcanon, rcanon);
    case 11: // Func -> Pointer (void* or Func*)
        return c.checkFunc2Pointer(lcanon, rcanon);
    case 12: // Func -> Func
        return c.checkFunc2Func(lcanon, rcanon);
    case 13: // Builtin -> Enum
        c.diags.error(c.loc, "invalid type conversion from '%s' to '%s'", c.rhs.diagName(), c.lhs.diagName());
        return false;
    case 14: // Enum -> Enum
        // is not allowed, since the ptr check already filters out the allowed ones
        c.diags.error(c.loc, "invalid type conversion from '%s' to '%s'", c.rhs.diagName(), c.lhs.diagName());
        return false;
    case 15: // Builtin -> Func
        c.diags.error(c.loc, "invalid type conversion from '%s' to '%s'", c.rhs.diagName(), c.lhs.diagName());
        return false;
    case 16: // Function -> Builtin
        bool other = false;
        bool ok = c.checkFunc2Builtin(lcanon, rcanon, &other);
        if (!ok && !other) {
            c.diags.error(c.loc, "invalid type conversion from '%s' to '%s'", c.rhs.diagName(), c.lhs.diagName());
        }
        return ok;
    default:
        c.diags.note(c.loc, "TODO CONVERSION  %d)", res);
        return false;
    }

    return true;
}

fn bool Checker.checkBuiltins(Checker* c, const Type* lcanon, const Type* rcanon) {
    // Note: lhs and rhs are not the same, otherwise ptr-check would have succeeded
    const BuiltinType* lbuiltin = cast<BuiltinType*>(lcanon);
    const BuiltinType* rbuiltin = cast<BuiltinType*>(rcanon);

    if ((*c.expr_ptr).isCtv()) {
        // TODO check value instead of type
        return true;
    }

    u8 res = BuiltinConversions[rbuiltin.getKind()][lbuiltin.getKind()];
    switch (res) {
    case 0:     // should not happen
        printf("BUILTIN SHOULD NOT HAPPEN (%d - %d)\n", lcanon.getKind(), rcanon.getKind());
        assert(0);
        return false;
    case 1:     // ok, needs conversion
        //c.diags.note(c.loc, "WIDEN %s -> %s", c.rhs.diagName(), c.lhs.diagName());
        c.builder.insertImplicitCast(ImplicitCastKind.IntegralCast, c.expr_ptr, c.lhs);
        break;
    case 2:     // incompatible
        c.diags.error(c.loc, "invalid type conversion from '%s' to '%s'", c.rhs.diagName(), c.lhs.diagName());
        return false;
    case 3:     // sign-conversion
        if (c.checkIntConversion(lbuiltin)) {
            c.builder.insertImplicitCast(ImplicitCastKind.IntegralCast, c.expr_ptr, c.lhs);
        } else {
            c.diags.error(c.loc, "implicit conversion changes signedness: '%s' to '%s'", c.rhs.diagName(), c.lhs.diagName());
        }
        break;
    case 4:     // loss of integer-precision
        if (c.checkIntConversion(lbuiltin)) {
            c.builder.insertImplicitCast(ImplicitCastKind.IntegralCast, c.expr_ptr, c.lhs);
        } else {
            Expr* e = *c.expr_ptr;
            c.diags.errorRange(c.loc, e.getRange(), "implicit conversion loses integer precision: '%s' to '%s'", c.rhs.diagName(), c.lhs.diagName());
        }
        break;
    case 5:     // float -> integer
        c.diags.error(c.loc, "implicit conversion turns floating-point number into integer: '%s' to '%s'", c.rhs.diagName(), c.lhs.diagName());
        break;
    case 6:     // loss of FP-precision
        c.diags.error(c.loc, "implicit conversion loses floating-point precision: '%s' to '%s'", c.rhs.diagName(), c.lhs.diagName());
        break;
    case 7:     // ok, no conversion needed
        break;
    default:
        assert(0);
        return false;
    }

    return true;
}

fn bool Checker.checkBuiltin2Pointer(Checker* c, const Type* lcanon, const Type* rcanon) {
    // Note: only allow usize/(u32/u64) -> void*
    const PointerType* ptr = cast<PointerType*>(lcanon);
    const BuiltinType* bi = cast<BuiltinType*>(rcanon);

    QualType inner = ptr.getInner();
    bool ok = inner.isVoid();

    BuiltinKind kind = bi.getKind();
    // TODO or u32
    ok &= (kind == BuiltinKind.USize || kind == BuiltinKind.UInt64);

    if (!ok) {
        c.diags.error(c.loc, "incompatible integer to pointer conversion: '%s' to '%s'",
                c.rhs.diagName(), c.lhs.diagName());
        return false;
    }
    return true;
}

fn bool Checker.checkPointer2Builtin(Checker* c, const Type* lcanon, const Type* rcanon) {
    // Note: only allow void* -> usize/(u32/u64) / bool
    const BuiltinType* bi = cast<BuiltinType*>(lcanon);

    BuiltinKind kind = bi.getKind();
    if (kind == BuiltinKind.Bool) {
        c.builder.insertImplicitCast(ImplicitCastKind.PointerToBoolean, c.expr_ptr, builtins[BuiltinKind.Bool]);
        return true;
    }

    const PointerType* ptr = cast<PointerType*>(rcanon);
    QualType inner = ptr.getInner();

    // TODO or u32 (arch)
    bool ok = inner.isVoid();
    ok &= (kind == BuiltinKind.USize || kind == BuiltinKind.UInt64);

    if (!ok) {
        if (c.try_to_fix_type()) {
            c.diags.error(c.loc, "invalid type conversion from '%s' to '%s'", c.rhs.diagName(), c.lhs.diagName());
        } else {
            c.diags.error(c.loc, "incompatible pointer to integer conversion: '%s' to '%s'",
                    c.rhs.diagName(), c.lhs.diagName());
        }
        return false;
    }

    c.builder.insertImplicitCast(ImplicitCastKind.PointerToInteger, c.expr_ptr, builtins[BuiltinKind.USize]);
    return true;
}

fn bool Checker.checkPointer2Func(Checker* c, const Type* lcanon, const Type* rcanon) {
    // only allow if pointer is void*
    const PointerType* ptr = cast<PointerType*>(rcanon);
    QualType inner = ptr.getInner();
    if (!inner.isVoid()) {
        c.diags.error(c.loc, "incompatible pointer to function conversion '%s' to '%s'",
                c.rhs.diagName(), c.lhs.diagName());
        return false;
    }
    c.builder.insertImplicitCast(ImplicitCastKind.BitCast, c.expr_ptr, c.lhs);
    return true;
}

fn bool Checker.checkIntConversion(Checker* c, const BuiltinType* bi) {
    Expr* e = *c.expr_ptr;
    const u8 wl = cast<u8>(bi.getWidth());
    ExprWidth w = getExprWidth(e);
    //stdio.printf("INT CONVERSION signed|width: %d %d -> %d %d\n", w.is_signed, w.width, bi.isSigned(), w.width);

    // dont allowd signed -> unsigned
    // allow unsigned X -> signed X for same widths
    if (w.is_signed == bi.isSigned()) {
        return (w.width <= wl);
    } else {
        // allow unsigned -> signed only if it gets bigger (eg. u16 fits in i32)
        if (w.is_signed) return false;
        return w.width <= wl;
    }
    return false;
}

// Note: try to fix array type that has been decayed to a pointer
fn bool Checker.try_to_fix_type(Checker* c) {
    Expr* e = *c.expr_ptr;

    if (e.isImplicitCast()) {
        const ImplicitCastExpr* ic = cast<ImplicitCastExpr*>(e);
        if (ic.isArrayToPointerDecay()) {
            e = ic.getInner();
            c.rhs = e.getType();
            return true;
        }
    }
    return false;
}

fn bool pointer_conversion_allowed(QualType linner, QualType rinner) {
    // Note: no need to fully compare, since otherwise the pointers above would have been the same
    const Type* in1 = linner.getTypeOrNil();
    const Type* in2 = rinner.getTypeOrNil();
    if (in1 == in2) return true;

    // TODO dont allow ptr** -> void* or reverse
    if (in1.isVoidType()) return true; // ptr -> void* is allowed
    if (in2.isVoidType()) return true; // void* -> ptr is allowed


    // allow i8* -> char* and reverse
    if (linner.isInt8() && rinner.isChar()) return true;
    if (linner.isChar() && rinner.isInt8()) return true;

    // TODO check ptr-ptr, use ptr-inner-table

    return false;
}

fn bool Checker.checkPointers(Checker* c, const Type* lcanon, const Type* rcanon) {

    const PointerType* ltype = cast<PointerType*>(lcanon);
    const PointerType* rtype = cast<PointerType*>(rcanon);
/*
    if (ltype == rtype) { // this will only happen with AliasTypes
        printf("  SAME, diff quals\n");
        // TODO check quals
        return true;
    }
*/

    QualType linner = ltype.getInner();
    QualType rinner = rtype.getInner();


    if (!pointer_conversion_allowed(linner, rinner)) {
        if (c.try_to_fix_type()) {
            c.diags.error(c.loc, "invalid type conversion from '%s' to '%s'", c.rhs.diagName(), c.lhs.diagName());
        } else {
            c.diags.error(c.loc, "invalid pointer conversion from '%s' to '%s'", c.rhs.diagName(), c.lhs.diagName());
        }
        return false;
    }

    // Note: no need to fully compare, since otherwise the pointers above would have been the same
    u32 rquals = rinner.getQuals();
    if (rquals == 0) return true;

    u32 lquals = linner.getQuals();
    if (((~lquals) & rquals) & 0x3) {
        c.diags.error(c.loc, "pointer conversion discards const qualifier");
        return false;
    }
    return true;
}

fn bool Checker.checkFunc2Pointer(Checker* c, const Type* lcanon, const Type* rcanon) {
    PointerType* pt = cast<PointerType*>(lcanon);
    QualType inner = pt.getInner();
    if (inner.isVoid()) return true; // always allow conversion to 'void*'

    c.diags.error(c.loc, "invalid pointer conversion from '%s' to '%s'", c.rhs.diagName(), c.lhs.diagName());
    return false;
}

fn bool Checker.checkEnum2Int(Checker* c, const Type* lcanon, const Type* rcanon) {
    // Note: enum constant values can never be negative
    const BuiltinType* bi = cast<BuiltinType*>(lcanon);
    u32 width = bi.getWidth();
    if (width == 64) return true;  // 64-bit

    // NOTE: EnumConstDecls are CTV, but variables of the type are not!
    if ((*c.expr_ptr).isCtv()) {
        return ctv_analyser.check(c.diags, c.lhs, *c.expr_ptr);
    } else {
        // compare impl type
        const EnumType* et = cast<EnumType*>(rcanon);
        const EnumTypeDecl* etd = et.getDecl();
        QualType impl = etd.getImplType();

        return c.check(c.lhs, impl, c.expr_ptr, c.loc);
    }

    return true;
}

fn bool Checker.checkFunc2Func(Checker* c, const Type* lcanon, const Type* rcanon) {
    FunctionType* ftl = cast<FunctionType*>(lcanon);
    FunctionDecl* fdl = ftl.getDecl();
    FunctionType* ftr = cast<FunctionType*>(rcanon);
    FunctionDecl* fdr = ftr.getDecl();

    if (fdr.getNumAutoArgs()) {
        c.diags.error(c.loc, "functions used as function pointers cannot have auto-arguments");
        return false;
    }

    if (!checkFunc2Func(fdl, fdr)) {
        // TODO report exact location
        c.diags.error(c.loc, "invalid function conversion from '%s' to '%s'", c.rhs.diagName(), c.lhs.diagName());
        return false;
    }
    return true;
}

fn bool checkFunc2Func(const FunctionDecl* fdl, const FunctionDecl* fdr) {
    // compare rtype
    QualType ql = fdl.getRType();
    QualType qr = fdr.getRType();
    if (ql.ptr != qr.ptr) return false;

    u32 num1 = fdl.getNumParams();
    u32 num2 = fdr.getNumParams();
    if (num1 != num2) return false;

    Decl** args1 = cast<Decl**>(fdl.getParams());
    Decl** args2 = cast<Decl**>(fdr.getParams());
    for (u32 i=0; i<num1; i++) {
        Decl* a1 = args1[i];
        Decl* a2 = args2[i];
        ql = a1.getType();
        qr = a2.getType();
        if (ql.ptr != qr.ptr) return false;
    }

    if (fdl.isVariadic() != fdr.isVariadic()) return false;

    return true;
}

fn bool Checker.checkFunc2Builtin(Checker* c, const Type* lcanon, const Type* rcanon, bool* other_error) {
    u32 wordsize = ast.getWordSize();
    const BuiltinType* bi = cast<BuiltinType*>(lcanon);

    BuiltinKind kind = bi.getKind();
    if (kind == BuiltinKind.USize) return true;
    if (kind == BuiltinKind.Bool) {
        // only allow Callback types or weak-functions
        FunctionType* ft = cast<FunctionType*>(rcanon);
        FunctionDecl* fd = ft.getDecl();
        if (fd.isType() || fd.hasAttrWeak()) return true; // Variable with Function type (eg callback)

        // TODO not always comparision (bool b = test1);
        c.diags.error(c.loc, "comparison of function '%s' will always be true", fd.asDecl().getFullName());
        *other_error = true;
        return false;
    }

    if (wordsize == 4 && kind == BuiltinKind.UInt32) return true;
    if (wordsize == 8 && kind == BuiltinKind.UInt64) return true;

    return false;
}



public fn bool Checker.checkCast(Checker* c, QualType lhs, QualType rhs, SrcLoc lhsLoc, SrcLoc rhsLoc) {
    c.lhs = lhs;
    c.rhs = rhs;
    c.loc = lhsLoc;
    c.expr_ptr = nil;
    // NOTE: expr_ptr used in some calls below!!
    // TODO sometimes use rhsLoc
    if (lhsLoc == 0) c.loc = rhsLoc; // TEMP HACK

    QualType t1 = lhs.getCanonicalType();
    QualType t2 = rhs.getCanonicalType();
    const Type* lcanon = t1.getTypeOrNil();
    const Type* rcanon = t2.getTypeOrNil();

    u8 res = Conversions[rcanon.getKind()][lcanon.getKind()];
    switch (res) {
    case 0: // cannot happen
        c.diags.error(lhsLoc, "SHOULD NOT HAPPEN (%d - %d)\n", lcanon.getKind(), rcanon.getKind());
        c.lhs.dump_full();
        c.rhs.dump_full();
        assert(0);
        return false;
    case 1: // not allowed
        c.diags.error(c.loc, "invalid cast from '%s' to '%s'", c.rhs.diagName(), c.lhs.diagName());
        return false;
    case 2: //  2 = Builtin -> Builtin
        // Allow all, except to/from void
        return true;
    case 3: //  3 = Builtin -> Pointer (only if usize/u64/u32)
        return c.checkBuiltin2PointerCast(lcanon, rcanon);
    case 4: //  4 = Pointer -> Builtin (only if usize/u64/u32)
        return c.checkPointer2BuiltinCast(lcanon, rcanon);
    case 5: //  5 = Pointer -> Pointer
        return true;    // always allow
    case 6: //  6 = Pointer -> Func (void* or Func*)
        return true;    // always allow
    case 7: //  7 = Array -> Pointer
        c.diags.note(c.loc, "SHOULD NOT HAPPEN (Array -> Ptr)");
        assert(0);
        return false;
    case 8: //  8 = Array -> Array
        c.diags.error(lhsLoc, "SHOULD NOT HAPPEN (%d - %d)\n", lcanon.getKind(), rcanon.getKind());
        assert(0);
        return false;
    case 9: //  9 = Struct -> Struct
        c.diags.error(lhsLoc, "SHOULD NOT HAPPEN (%d - %d)\n", lcanon.getKind(), rcanon.getKind());
        assert(0);
        return false;
    case 10: // 10 = Enum -> Builtin
        return true;    // always allow
    case 11: // 11 = Func -> Pointer (void* or Func*)
        return true;    // always allow
    case 12: // Func -> Func
        return true;    // always allow
    case 13: // Builtin -> Enum
        return true;    // always allow
    case 14: // Enum -> Enum
        return true;    // always allow
    case 15: // Builtin -> Func
        return c.checkBuiltin2PointerCast(lcanon, rcanon);
    case 16: // Func -> Builtin
        bool other = false;
        bool ok = c.checkFunc2Builtin(lcanon, rcanon, &other);
        if (!ok && !other) {
            QualType valid = ast.getNativeType();
            c.diags.error(c.loc, "pointers may only be cast to integer type '%s'", valid.diagName());
        }
        return ok;
    default:
        c.diags.note(c.loc, "TODO CONVERSION  %d)", res);
        return false;
    }

    return true;
}

fn bool Checker.checkBuiltin2PointerCast(Checker* c, const Type* lcanon, const Type* rcanon) {
    // only allow cast from pointer-size int (u32/u64 depending on arch) to pointer
    u32 wordsize = ast.getWordSize();
    const BuiltinType* bi = cast<BuiltinType*>(rcanon);

    BuiltinKind kind = bi.getKind();
    if (kind == BuiltinKind.USize) return true;
    // Note: we dont allow cast from pointer to bool! (implicit conversion is ok)
    if (wordsize == 4 && kind == BuiltinKind.UInt32) return true;
    if (wordsize == 8 && kind == BuiltinKind.UInt64) return true;

    QualType valid = ast.getNativeType();
    c.diags.error(c.loc, "only integers of type '%s' may be cast to a pointer", valid.diagName());

    return false;
}

fn bool Checker.checkPointer2BuiltinCast(Checker* c, const Type* lcanon, const Type* rcanon) {
    // only allow cast from pointer to pointer-size int (u32/u64 depending on arch)
    u32 wordsize = ast.getWordSize();
    const BuiltinType* bi = cast<BuiltinType*>(lcanon);

    BuiltinKind kind = bi.getKind();
    if (kind == BuiltinKind.USize) return true;
    // Note: we dont allow cast from pointer to bool! (implicit conversion is ok)
    if (wordsize == 4 && kind == BuiltinKind.UInt32) return true;
    if (wordsize == 8 && kind == BuiltinKind.UInt64) return true;

    QualType valid = getNativeType();
    c.diags.error(c.loc, "pointers may only be cast to integer type '%s'", valid.diagName());

    return false;
}

// Just takes smallest type, dont promote both sides to i32
const u8[elemsof(BuiltinKind)][elemsof(BuiltinKind)] ConditionalOperatorResult = {
    //  Char   Int8   Int16  Int32  Int64  UInt8  UInt16 UInt32 UInt64 Flt32 Flt64  ISize  USize  Bool  Void
    //  0      1      2      3      4      5      6      7      8      9     10     11     12     13     14
    // Char ->
    {   0,     2,     2,     3,     4,     5,     6,     7,     8,     9,    10,    11,    12,     0,    14  },
    // Int8 ->
    {   2,     1,     2,     3,     4,     5,     6,     7,     8,     9,    10,    11,    12,     1,    14  },
    // Int16 ->
    {   2,     2,     2,     3,     4,     2,     6,     7,     8,     9,    10,    11,    12,     2,    14  },
    // Int32 ->
    {   3,     3,     3,     3,     4,     3,     3,     7,     8,     9,    10,    11,    12,     3,    14  },
    // Int64 ->
    {   4,     4,     4,     4,     4,     4,     4,     4,     8,     9,    10,    11,    12,     4,    14  },
    // UInt8 ->
    {   5,     5,     2,     3,     4,     5,     6,     7,     8,     9,    10,    11,    12,     5,    14  },
    // UInt16 ->
    {   6,     6,     6,     3,     4,     6,     6,     7,     8,     9,    10,    11,    12,     6,    14  },
    // UInt32 ->
    {   7,     7,     7,     7,     7,     7,     7,     7,     8,     9,    10,    11,    12,     7,    14  },
    // UInt64 ->
    {   8,     8,     8,     8,     8,     8,     8,     8,     8,     9,    10,    11,    12,     8,    14  },
    // Flt32 ->
    {   9,     9,     9,     9,     9,     9,     9,     9,     9,     9,    10,     9,     9,     9,    14  },
    // Flt64 ->
    {  10,    10,    10,    10,    10,    10,    10,    10,    10,    10,    10,    10,    10,    10,    14  },
    // ISize ->
    {  11,    11,    11,    11,    11,    11,    11,    11,     8,     9,    10,    11,    12,    11,    14  },
    // USize ->
    {  12,    12,    12,    12,    12,    12,    12,    12,     8,     9,    10,    12,    12,    12,    14  },
    // Bool ->
    {   0,     1,     2,     3,     4,     5,     6,     7,     8,     9,    10,    11,    12,    13,    14  },
    // Void ->
    {  14,    14,    14,    14,    14,    14,    14,    14,    14,    14,    14,    14,    14,    14,    14  },
}
public fn QualType get_common_arithmetic_type(QualType t1, QualType t2) {
    assert(t1.isBuiltin());
    assert(t2.isBuiltin());

    BuiltinType* bi1 = t1.getBuiltin();
    BuiltinType* bi2 = t2.getBuiltin();
    BuiltinKind kind = cast<BuiltinKind>(ConditionalOperatorResult[bi2.getKind()][bi1.getKind()]);
    return ast.builtins[kind];
}

/*
    Results:
     0 Int32
     1 UInt32,
     2 Int64,
     3 UInt64,
     4 Float32,
     5 Float64,
     6 error,
*/
// See ISO/IEC 9899:201x 6.3.1
const u8[elemsof(BuiltinKind)][elemsof(BuiltinKind)] UsualArithmeticConversions = {
    //  Char   Int8   Int16  Int32  Int64  UInt8  UInt16 UInt32 UInt64 Flt32 Flt64  ISize  USize  Bool  Void
    //  0      1      2      3      4      5      6      7      8      9     10     11     12     13     14
    // Char ->
    {   0,     0,     0,     0,     2,     0,     0,     1,     3,     4,     5,     6,     6,     0,     6  },
    // Int8 ->
    {   0,     0,     0,     0,     2,     0,     0,     1,     3,     4,     5,     6,     6,     0,     6  },
    // Int16 ->
    {   0,     0,     0,     0,     2,     0,     0,     1,     3,     4,     5,     6,     6,     0,     6  },
    // Int32 ->
    {   0,     0,     0,     0,     2,     0,     0,     1,     3,     4,     5,     6,     6,     0,     6  },
    // Int64 ->
    {   2,     2,     2,     3,     2,     2,     2,     2,     3,     4,     5,     6,     6,     2,     6  },
    // UInt8 ->
    {   0,     0,     0,     0,     2,     0,     0,     1,     3,     4,     5,     6,     6,     0,     6  },
    // UInt16 ->
    {   0,     0,     0,     0,     2,     0,     0,     1,     3,     4,     5,     6,     6,     0,     6  },
    // UInt32 ->
    {   1,     1,     1,     1,     3,     1,     1,     1,     3,     4,     5,     6,     6,     1,     6  },
    // UInt64 ->
    {   3,     3,     3,     3,     3,     3,     3,     3,     3,     4,     5,     6,     6,     3,     6  },
    // Flt32 ->
    {   4,     4,     4,     4,     4,     4,     4,     4,     4,     4,     5,     4,     4,     4,     6  },
    // Flt64 ->
    {   5,     5,     5,     5,     5,     5,     5,     5,     5,     5,     5,     5,     5,     5,     6  },
    // ISize ->
    {   6,     6,     6,     6,     6,     6,     6,     6,     3,     4,     5,     6,     6,     6,     6  },
    // USize ->
    {   6,     6,     6,     6,     6,     6,     6,     6,     6,     4,     5,     6,     6,     6,     6  },
    // Bool ->
    {   0,     0,     0,     0,     2,     0,     0,     1,     3,     4,     5,     6,     6,     0,     6  },
    // Void ->
    {   6,     6,     6,     6,     6,     6,     6,     6,     6,     6,     6,     6,     6,     6,     6  },
}

public fn QualType usual_arithmetic_conversion(const BuiltinType* b1, const BuiltinType* b2) {
    BuiltinKind k1 = b1.getBaseKind();
    BuiltinKind k2 = b2.getBaseKind();

    switch(UsualArithmeticConversions[k2][k1]) {
    case 0:
        return ast.builtins[BuiltinKind.Int32];
    case 1:
        return ast.builtins[BuiltinKind.UInt32];
    case 2:
        return ast.builtins[BuiltinKind.Int64];
    case 3:
        return ast.builtins[BuiltinKind.UInt64];
    case 4:
        return ast.builtins[BuiltinKind.Float32];
    case 5:
        return ast.builtins[BuiltinKind.Float64];
    case 6:
        break;
    }
    return QualType_Invalid;
}

