module regex;

public type size_t int32;

public type regex_t struct
{
	int32 re_magic;
	int32 re_nsub;
	const char* re_endp;
}

public type regoff_t int32;

public type regmatch_t struct
{
	regoff_t rm_so;
	regoff_t rm_eo;
}

/* regcomp() flags */
public int32 REG_BASIC = 0000;
public int32 REG_EXTENDED = 0001;
public int32 REG_ICASE = 0002;
public int32 REG_NOSUB = 0004;
public int32 REG_NEWLINE = 0010;
public int32 REG_NOSPEC = 0020;
public int32 REG_PEND = 0040;
public int32 REG_DUMP = 0200;

/* regerror() flags */
public int32 REG_ENOSYS = -1;
public int32 REG_NOERROR =  0;
public int32 REG_NOMATCH =  1;
public int32 REG_BADPAT =  2;
public int32 REG_ECOLLATE =  3;
public int32 REG_ECTYPE =  4;
public int32 REG_EESCAPE =  5;
public int32 REG_ESUBREG =  6;
public int32 REG_EBRACK =  7;
public int32 REG_EPAREN =  8;
public int32 REG_EBRACE =  9;
public int32 REG_BADBR = 10;
public int32 REG_ERANGE = 11;
public int32 REG_ESPACE = 12;
public int32 REG_BADRPT = 13;
public int32 REG_EMPTY = 14;
public int32 REG_ASSERT = 15;
public int32 REG_INVARG = 16;
public int32 REG_ILLSEQ = 17;
public int32 REG_ATOI = 255;
public int32 REG_ITOA = 0400;

/* regexec() flags */
public int32 REG_NOTBOL = 00001;
public int32 REG_NOTEOL = 00002;
public int32 REG_STARTEND = 00004;
public int32 REG_TRACE = 00400;
public int32 REG_LARGE = 01000;
public int32 REG_BACKR = 02000;

public func int32 regcomp(regex_t* preg, const char* pattern, int32 cflags);
public func int32 regexec(const regex_t* preg, const char* string, int32 nmatch, regmatch_t[] pmatch, int32 eflags);
public func int32 regerror(int32 errcode, const regex_t* preg, char* errbuf, int32 errbuf_size);
public func void regfree(regex_t* preg);