module bigint;

import stdio local;
import string local;
import stdlib local;

#define MAX(a, b) ((a) > (b) ? (a) : (b))

// Horribly bad implementation of BigInt with add/sub.
public type BigInt struct
{
    char* number;
    u32 length;
    i8 sign;
} @(opaque)

public func void BigInt.init(BigInt* bigInt)
{
   bigInt.number = malloc(1);
   bigInt.number[0] = 0;
   bigInt.length = 1;
   bigInt.sign = 1;
}

public func void BigInt.initFromString(BigInt* bigInt, char* str)
{
   u32 size = cast<u32>(strlen(str));
   //assert(size > 0);
   bigInt.sign = 1;
   switch (str[0])
   {
       case '-':
           bigInt.sign = -1;
           size--;
           str++;
           break;
       case '+':
           size--;
           str++;
           break;
       default:
           break;
   }
   char* res = malloc(size);
   for (i32 i = 0; i < size; i++)
   {
       res[i] = str[size - i - 1] - '0';
   }
   bigInt.number = res;
   bigInt.length = size;
}

public func BigInt* BigInt.newFromString(char* str)
{
    BigInt* bigInt = malloc(sizeof(BigInt));
    bigInt.initFromString(str);
    return bigInt;
}

public func void BigInt.copyTo(BigInt* source, BigInt* target)
{
   target.number = cast<u8*>(realloc(target.number, source.length));
   target.sign = source.sign;
   target.length = source.length;
   for (u32 i = 0; i < target.length; i++) target.number[i] = source.number[i];
}

public func void BigInt.destroy(BigInt* bigInt)
{
   free(bigInt.number);
}

func void BigInt.addIgnoreSign(BigInt* a, BigInt* b, BigInt* result)
{
   u32 length = MAX(a.length, b.length) + 1;
   char* res = malloc(length);
   i8 carry = 0;
   BigInt* x;
   BigInt* y;
   if (a.length > b.length)
   {
      x = a;
      y = b;
   }
   else
   {
      x = b;
      y = a;
   }

   for (i32 i = 0; i < length; i++)
   {
      if (i >= y.length)
      {
         res[i] = carry + (i >= x.length ? 0 : x.number[i]);
      }
      else
      {
         res[i] = x.number[i] + y.number[i] + carry;
      }

      carry = 0;
      if (res[i] > 9)
      {
         carry = 1;
         res[i] -= 10;
      }
   }
   result.destroy();
   result.number = res;
   result.length = length;
}

public func void BigInt.getMaxVal(BigInt *bigInt, u32* pos, i8* val)
{
   for (u32 i = bigInt.length; i > 0; i++)
   {
      if (bigInt.number[i] != 0)
      {
         *pos = i;
         *val = bigInt.number[i];
         return;
      }
   }
   *pos = 0;
   *val = 0;
}

public func i8 BigInt.compare(BigInt* a, BigInt* b)
{
   if (a.sign != b.sign) return a.sign;
   u8 aMax;
   u32 aMaxPos;
   a.getMaxVal(&aMaxPos, &aMax);
   if (aMaxPos >= b.length) return a.sign;
   u8 bMax;
   u32 bMaxPos;
   b.getMaxVal(&bMaxPos, &bMax);
   if (aMaxPos > bMaxPos) return a.sign;
   if (aMaxPos < bMaxPos) return -a.sign;
   if (aMax > bMax) return a.sign;
   if (aMax < bMax) return -a.sign;
   return 0;
}

public func i8 BigInt.compareNoSign(BigInt* a, BigInt* b)
{
   u8 aMax;
   u32 aMaxPos;
   a.getMaxVal(&aMaxPos, &aMax);
   if (aMaxPos >= b.length) return 1;
   u8 bMax;
   u32 bMaxPos;
   b.getMaxVal(&bMaxPos, &bMax);
   if (aMaxPos > bMaxPos) return 1;
   if (aMaxPos < bMaxPos) return -1;
   if (aMax > bMax) return 1;
   if (aMax < bMax) return -1;
   return 0;
}

func void BigInt.subIgnoreSign(BigInt* a, BigInt* b, BigInt* result)
{
   u32 length = MAX(a.length, b.length);
   char* res = malloc(length);

   BigInt* x;
   BigInt* y;
   if (a.compareNoSign(b) < 0)
   {
      result.sign = -1;
      x = b;
      y = a;
   }
   else
   {
      result.sign = 1;
      x = a;
      y = b;
   }

   i8 borrow = 0;
   for (i32 i = 0; i < length; i++)
   {
      i8 aValue = i >= x.length ? 0 : x.number[i];
      i8 bValue = borrow + (i >= y.length ? 0 : y.number[i]);
      if (bValue > aValue)
      {
         borrow = 1;
         aValue += 10;
      }
      else
      {
         borrow = 0;
      }
      res[i] = aValue - bValue;
   }
   result.destroy();
   result.number = res;
   result.length = length;
}

public func void BigInt.add(BigInt* a, BigInt* b, BigInt* result)
{
   if (a.sign < 0)
   {
      if (b.sign < 0)
      {
         a.addIgnoreSign(b, result);
         result.sign = -1;
      }
      else
      {
         b.subIgnoreSign(a, result);
         result.sign = -result.sign;
      }
   }
   else
   {
      if (b.sign < 0)
      {
         a.subIgnoreSign(b, result);
      }
      else
      {
         a.addIgnoreSign(b, result);
      }
   }
}

public func char* BigInt.toCharArray(BigInt* bigInt)
{
   u32 charLen = bigInt.length + 1 + (bigInt.sign < 0 ? 1 : 0);
   char* out = malloc(charLen);
   out[charLen - 1] = '\0';
   char* start = out;
   if (bigInt.sign < 0)
   {
      out[0] = '-';
      start++;
   }
   bool nonZeroFound = false;
   for (u32 i = bigInt.length; i > 0; i--)
   {
      char digit = bigInt.number[i - 1];
      if (i > 1 && !nonZeroFound && digit == 0) continue;
      nonZeroFound = true;
      *(start++) = digit + '0';
   }
   return out;
}

public func void BigInt.print(BigInt* bigInt)
{
   char* chars = bigInt.toCharArray();
   puts(chars);
   free(chars);
}

/*
public func void BigInt.fprint(BigInt* bigInt, FILE* file)
{
   char* chars = bigInt.toCharArray();
   fputs(chars, file);
   putc('\n', file);
   free(chars);
}*/


public func i32 main(i32 size, char** args)
{

   BigInt minus2;
   BigInt minus1;
   BigInt current;
   minus2.initFromString("0");
   minus1.initFromString("1");
   current.initFromString("0");

   for (i32 i = 1; i <= 500; i++)
   {
      minus1.add(&minus2, &current);
      printf("%d : ", i);
      current.print();
      minus1.copyTo(&minus2);
      current.copyTo(&minus1);
   }
   return 0;
}
