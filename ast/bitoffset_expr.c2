/* Copyright 2022-2025 Bas van den Berg
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

module ast;

import ast_context;
import string_buffer;
import src_loc local;

type BitOffsetExprBits struct {
    u32 : NumExprBits;
    u32 width : 8;  // in bits
}

public type BitOffsetExpr struct @(opaque) {
    Expr base;
    Expr* lhs;
    Expr* rhs;
}

public fn BitOffsetExpr* BitOffsetExpr.create(ast_context.Context* c, SrcLoc loc, Expr* lhs, Expr* rhs) {
    BitOffsetExpr* e = c.alloc(sizeof(BitOffsetExpr));
    e.base.init(ExprKind.BitOffset, loc, 0, 0, 0, ValType.RValue);
    e.lhs = lhs;
    e.rhs = rhs;
#if AstStatistics
    Stats.addExpr(ExprKind.BitOffset, sizeof(BitOffsetExpr));
#endif
    return e;
}

fn Expr* BitOffsetExpr.instantiate(BitOffsetExpr* e, Instantiator* inst) {
    return (Expr*)BitOffsetExpr.create(inst.c,
                                       e.base.base.loc,
                                       e.lhs.instantiate(inst),
                                       e.rhs.instantiate(inst));
}

public fn Expr* BitOffsetExpr.getLHS(const BitOffsetExpr* e) { return e.lhs; }
public fn Expr** BitOffsetExpr.getLHS2(BitOffsetExpr* e) { return &e.lhs; }

public fn Expr* BitOffsetExpr.getRHS(const BitOffsetExpr* e) { return e.rhs; }
public fn Expr** BitOffsetExpr.getRHS2(BitOffsetExpr* e) { return &e.rhs; }

public fn void BitOffsetExpr.setWidth(BitOffsetExpr* e, u8 width) {
    e.base.base.bitOffsetBits.width = width;
}

public fn u32 BitOffsetExpr.getWidth(const BitOffsetExpr* e) {
    return e.base.base.bitOffsetBits.width;
}

fn SrcLoc BitOffsetExpr.getStartLoc(const BitOffsetExpr* e) {
    return e.lhs.getStartLoc();
}

fn SrcLoc BitOffsetExpr.getEndLoc(const BitOffsetExpr* e) {
    return e.rhs.getEndLoc();
}

fn void BitOffsetExpr.printLiteral(const BitOffsetExpr* e, string_buffer.Buf* out) {
    e.lhs.printLiteral(out);
    out.add1(':');
    e.rhs.printLiteral(out);
}

fn void BitOffsetExpr.print(const BitOffsetExpr* e, string_buffer.Buf* out, u32 indent) {
    e.base.printKind(out, indent);
    e.base.printTypeBits(out);
    out.space();
    out.color(col_Calc);
    out.print("%d", e.base.base.bitOffsetBits.width);
    out.newline();
    e.lhs.print(out, indent + 1);
    e.rhs.print(out, indent + 1);
}

