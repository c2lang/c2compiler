/* Copyright 2022-2025 Bas van den Berg
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

module ast;

import c2 local;
import stdio;
import stdlib;

public type ValueKind enum u8 {
    Integer,
    Float,
    Error,
}

public type Value struct {
    ValueKind kind;
    u8 width;       // 0: unspecified, otherwise bitwidth
    bool negative;  // true if kind is Integer and value strictly negative
    bool overflow;  // true if kind is Integer and absolute value exceeds range of u64
    union {
        u64 uvalue; // absolute value
        f64 fvalue;
        const char* error_msg;
    }
}
static_assert(16, sizeof(Value));

fn Value Value.createUnsigned(u64 uvalue) {
    Value result = { .kind = ValueKind.Integer, .uvalue = uvalue };
    return result;
}

fn Value Value.createSigned(i64 svalue) {
    if (svalue < 0) {
        Value result = { .kind = ValueKind.Integer, .negative = true, .uvalue = ~svalue + 1 };
        return result;
    } else {
        Value result = { .kind = ValueKind.Integer, .uvalue = cast<u64>(svalue) };
        return result;
    }
}

fn Value Value.createBool(bool value) {
    Value result = { .kind = ValueKind.Integer, .uvalue = value };
    return result;
}

fn Value Value.createFloat(f64 fvalue) {
    Value result = { .kind = ValueKind.Float, .fvalue = fvalue };
    return result;
}

fn Value Value.error(const char* msg) {
    Value result = { .kind = ValueKind.Error, .error_msg = msg };
    return result;
}

fn void Value.setUnsigned(Value* v, u64 uvalue) {
    v.kind = ValueKind.Integer;
    v.overflow = false;
    v.negative = false;
    v.uvalue = uvalue;
}

fn void Value.setSigned(Value* v, i64 svalue) {
    v.kind = ValueKind.Integer;
    v.overflow = false;
    if (svalue < 0) {
        v.negative = true;
        v.uvalue = ~svalue + 1;
    } else {
        v.negative = false;
        v.uvalue = (u64)svalue;
    }
}

fn void Value.setFloat(Value* v, f64 fvalue) {
    v.kind = ValueKind.Float;
    v.overflow = false;
    v.negative = false;
    v.fvalue = fvalue;
}

public fn bool Value.isNegative(const Value* v) {
    switch (v.kind) {
    case Integer:
        return v.negative;
    case Float:
        return v.fvalue < 0;
    default:
        break;
    }
    return false;
}

public fn bool Value.isFloat(const Value* v) {
    return v.kind == ValueKind.Float;
}

public fn bool Value.isDecimal(const Value* v) {
    return v.kind == ValueKind.Integer;
}

fn bool Value.isError(const Value* v) {
    return v.kind == ValueKind.Error;
}

public fn bool Value.isZero(const Value* v) {
    switch (v.kind) {
    case Integer:
        return !v.negative && v.uvalue == 0;
    case Float:
        return v.fvalue == 0;
    default:
        break;
    }
    return false;
}

fn f64 Value.toFloat(const Value* v) {
    if (v.kind == ValueKind.Integer) {
        // TODO: warn about loss of precision
        f64 f = (f64)v.uvalue;
        return (v.negative) ? -f : f;
    } else {
        return v.fvalue;
    }
}

public fn u8 Value.as_u8(Value* v) {
    assert (v.kind == ValueKind.Integer);
    u64 res = v.uvalue;
    if (v.negative) res = ~res + 1;
    return (u8)res;
}

public fn u16 Value.as_u16(Value* v) {
    assert (v.kind == ValueKind.Integer);
    u64 res = v.uvalue;
    if (v.negative) res = ~res + 1;
    return (u16)res;
}

public fn i32 Value.as_i32(Value* v) {
    u64 res = 0;
    if (v.kind == ValueKind.Integer) {
        res = v.uvalue;
        if (v.negative) res = ~res + 1;
    }
    return (i32)res;
}

public fn u32 Value.as_u32(Value* v) {
    u64 res = 0;
    if (v.kind == ValueKind.Integer) {
        res = v.uvalue;
        if (v.negative) res = ~res + 1;
    }
    return (u32)res;
}

public fn u64 Value.as_u64(Value* v) {
    u64 res = 0;
    if (v.kind == ValueKind.Integer) {
        res = v.uvalue;
        if (v.negative) res = ~res + 1;
    }
    return res;
}

public fn u8 Value.getWidth(const Value* v) {
    if (v.kind != ValueKind.Integer)
        return 64;
    //TODO find faster way
    u64 value = v.negative ? v.uvalue - 1 : v.uvalue;
    if (value <= 65535) {
        if (value <= 255) {
            if (value <= 127) return 7;
            else return 8;
        }
        if (value <= 32767) return 15;
        else return 16;
    }
    if (value <= 4294967295) {
        if (value <= 2147483647) return 31;
        else return 32;
    }
    if (value <= 9223372036854775807) return 63;
    return 64;
}

public fn bool Value.checkRange(const Value* v, i64 min, u64 max) {
    switch (v.kind) {
    case Integer:
        if (v.negative)
            return (v.uvalue <= (u64)~min + 1);
        else
            return (v.uvalue <= max);
        break;
    case Float:
        return (v.fvalue >= (f64)min && v.fvalue < (f64)max + 1);
    default:
        break;
    }
    return false;
}

fn Value Value.negate(const Value* v) {
    Value result = *v;
    switch (result.kind) {
    case Integer:
        if (result.uvalue) {
            result.negative = !result.negative;
        }
        break;
    case Float:
        result.fvalue = -result.fvalue;
        break;
    default:
        break;
    }
    return result;
}

fn Value Value.bitnot(const Value* v) {
    Value result = *v;
    switch (result.kind) {
    case Integer:
        if (result.negative) {
            result.uvalue = ~result.uvalue + 1;
            result.uvalue = ~result.uvalue;
            result.negative = false;
        } else {
            result.uvalue = ~result.uvalue;
            result.uvalue = ~result.uvalue + 1;
            result.negative = true;
        }
        break;
    case Float:
        result = Value.error("invalid operand for '~'");
        break;
    default:
        break;
    }
    return result;
}

fn Value Value.lnot(const Value* v) {
    Value result = Value.createBool(v.isZero());
    result.overflow = v.overflow;
    return result;
}

public fn Value Value.minus(const Value* v1, const Value* v2) {
    Value tmp = Value.negate(v2);
    return v1.add(&tmp);
}

fn Value Value.add(const Value* v1, const Value* v2) {
    Value result = *v1;
    result.overflow |= v2.overflow;
    switch (result.kind) {
    case Integer:
        switch (v2.kind) {
        case Integer:
            if (result.negative != v2.negative) {
                if (result.uvalue > v2.uvalue) {
                    result.uvalue -= v2.uvalue;
                } else {
                    result.uvalue = v2.uvalue - result.uvalue;
                    result.negative = v2.negative && result.uvalue;
                }
            } else {
                if (result.uvalue > max_u64 - v2.uvalue) {
                    result.overflow = true;
                }
                result.uvalue += v2.uvalue;
            }
            break;
        case Float:
            result.fvalue = result.toFloat() + v2.fvalue;
            result.kind = ValueKind.Float;
            break;
        default:
            result = *v2;
            break;
        }
        break;
    case Float:
        result.fvalue += v2.toFloat();
        break;
    default:
        break;
    }
    return result;
}

fn Value Value.multiply(const Value* v1, const Value* v2) {
    Value result = *v1;
    result.overflow |= v2.overflow;
    switch (result.kind) {
    case Integer:
        switch (v2.kind) {
        case Integer:
            if (result.uvalue) {
                if (!v2.uvalue)
                    result.negative = false;
                else
                    result.negative ^= v2.negative;
                if (max_u64 / result.uvalue > v2.uvalue)
                    result.overflow = true;
                result.uvalue *= v2.uvalue;
            }
            break;
        case Float:
            result.fvalue = result.toFloat() * v2.fvalue;
            result.kind = ValueKind.Float;
            break;
        default:
            result = *v2;
            break;
        }
        break;
    case Float:
        result.fvalue *= v2.toFloat();
        break;
    default:
        break;
    }
    return result;
}

fn Value Value.divide(const Value* v1, const Value* v2) {
    Value result = *v1;
    result.overflow |= v2.overflow;
    switch (result.kind) {
    case Integer:
        switch (v2.kind) {
        case Integer:
            if (v2.uvalue == 0) {
                result.overflow = true;
                result.uvalue = max_u64;
            } else {
                result.uvalue /= v2.uvalue;
                result.negative = result.uvalue && result.negative != v2.negative;
            }
            break;
        case Float:
            result.fvalue = result.toFloat() / v2.fvalue;
            result.kind = ValueKind.Float;
            break;
        default:
            result = *v2;
            break;
        }
        break;
    case Float:
        result.fvalue /= v2.toFloat();
        break;
    default:
        break;
    }
    return result;
}

fn Value Value.remainder(const Value* v1, const Value* v2) {
    assert(v1.isDecimal());
    assert(v2.isDecimal());

    // remainder has same sign as numerator
    // -10 %  20  -> -10
    //  10 % -20  ->  10
    // -10 % -20  -> -10
    Value result = *v1;
    result.overflow |= v2.overflow;

    if (v2.uvalue == 0) {
        result.overflow = true;
        result.uvalue = 0;
    } else {
        result.uvalue %= v2.uvalue;
        if (result.uvalue == 0)
            result.negative = false;
    }
    return result;
}

fn Value Value.left_shift(const Value* v1, const Value* v2) {
    Value result = *v1;
    result.overflow |= v2.overflow;
    switch (result.kind) {
    case Integer:
        switch (v2.kind) {
        case Integer:
            if (!v2.negative) {
                u8 shift = v2.uvalue & 63;
                // TODO: check for overflow
                if (result.negative) {
                    result.uvalue = ~result.uvalue + 1;
                    result.uvalue <<= shift;
                    result.uvalue = ~result.uvalue + 1;
                    if (result.uvalue == 0)
                        result.negative = false;
                } else {
                    result.uvalue <<= shift;
                }
            }
            break;
        case Float:
            result = Value.error("invalid argument type");
            break;
        default:
            result = *v2;
            break;
        }
        break;
    case Float:
        result = Value.error("invalid argument type");
        break;
    default:
        break;
    }
    return result;
}

fn Value Value.right_shift(const Value* v1, const Value* v2) {
    Value result = *v1;
    result.overflow |= v2.overflow;
    switch (result.kind) {
    case Integer:
        switch (v2.kind) {
        case Integer:
            if (!v2.negative) {
                u8 shift = v2.uvalue & 63;
                // TODO: check for overflow
                if (result.negative) {
                    u64 mask = 0;
                    result.uvalue = ~result.uvalue + 1;
                    result.uvalue >>= shift;
                    result.uvalue |= ~(~mask >> shift);
                    result.uvalue = ~result.uvalue + 1;
                } else {
                    result.uvalue >>= shift;
                }
            }
            break;
        case Float:
            result = Value.error("invalid argument type");
            break;
        default:
            result = *v2;
            break;
        }
        break;
    case Float:
        result = Value.error("invalid argument type");
        break;
    default:
        break;
    }
    return result;
}

fn Value Value.and(const Value* v1, const Value* v2) {
    assert(v1.isDecimal());
    assert(v2.isDecimal());

    Value result = *v1;
    Value r2 = *v2;
    if (result.negative) result.uvalue = ~result.uvalue + 1;
    if (r2.negative) r2.uvalue = ~r2.uvalue + 1;
    result.overflow |= v2.overflow;
    result.negative &= r2.negative;
    result.uvalue &= r2.uvalue;
    if (result.negative) result.uvalue = ~result.uvalue + 1;
    return result;
}

fn Value Value.or(const Value* v1, const Value* v2) {
    assert(v1.isDecimal());
    assert(v2.isDecimal());

    Value result = *v1;
    Value r2 = *v2;
    if (result.negative) result.uvalue = ~result.uvalue + 1;
    if (r2.negative) r2.uvalue = ~r2.uvalue + 1;
    result.overflow |= v2.overflow;
    result.negative |= r2.negative;
    result.uvalue |= r2.uvalue;
    if (result.negative) result.uvalue = ~result.uvalue + 1;
    return result;
}

fn Value Value.xor(const Value* v1, const Value* v2) {
    assert(v1.isDecimal());
    assert(v2.isDecimal());

    Value result = *v1;
    Value r2 = *v2;
    if (result.negative) result.uvalue = ~result.uvalue + 1;
    if (r2.negative) r2.uvalue = ~r2.uvalue + 1;
    result.overflow |= v2.overflow;
    result.negative ^= r2.negative;
    result.uvalue ^= r2.uvalue;
    if (result.negative) result.uvalue = ~result.uvalue + 1;
    return result;
}

fn Value Value.toBool(const Value* v) {
    switch (v.kind) {
    case Integer:
        return Value.createBool(v.negative || v.uvalue != 0);
    case Float:
        return Value.createBool(v.fvalue != 0);
    default:
        break;
    }
    return *v;
}

public fn bool Value.is_equal(const Value* v1, const Value* v2) {
    switch (v1.kind) {
    case Integer:
        switch (v2.kind) {
        case Integer:
            return v1.negative == v2.negative && v1.uvalue == v2.uvalue;
        case Float:
            return v1.toFloat() == v2.fvalue;
        default:
            break;
        }
        break;
    case Float:
        return v1.fvalue == v2.toFloat();
    default:
        break;
    }
    return false;
}

public fn bool Value.is_less(const Value* v1, const Value* v2) {
    switch (v1.kind) {
    case Integer:
        switch (v2.kind) {
        case Integer:
            if (v1.negative)
                return !v2.negative || v1.uvalue > v2.uvalue;
            else
                return !v2.negative && v1.uvalue < v2.uvalue;
            break;  // TODO: fix bogus error in Analyser.analyseCase
        case Float:
            return v1.toFloat() < v2.fvalue;
        default:
            break;
        }
        break;
    case Float:
        return v1.fvalue < v2.toFloat();
    default:
        break;
    }
    return false;
}

fn bool Value.is_less_equal(const Value* v1, const Value* v2) {
    switch (v1.kind) {
    case Integer:
        switch (v2.kind) {
        case Integer:
            if (v1.negative)
                return !v2.negative || v1.uvalue >= v2.uvalue;
            else
                return !v2.negative && v1.uvalue <= v2.uvalue;
            break;  // TODO: fix bogus error in Analyser.analyseCase
        case Float:
            return v1.toFloat() <= v2.fvalue;
        default:
            break;
        }
        break;
    case Float:
        return v1.fvalue <= v2.toFloat();
    default:
        break;
    }
    return false;
}

fn bool Value.is_greater(const Value* v1, const Value* v2) {
    switch (v1.kind) {
    case Integer:
        switch (v2.kind) {
        case Integer:
            if (v1.negative)
                return v2.negative && v1.uvalue < v2.uvalue;
            else
                return v2.negative || v1.uvalue > v2.uvalue;
            break;  // TODO: fix bogus error in Analyser.analyseCase
        case Float:
            return v1.toFloat() > v2.fvalue;
        default:
            break;
        }
        break;
    case Float:
        return v1.fvalue > v2.toFloat();
    default:
        break;
    }
    return false;
}

fn bool Value.is_greater_equal(const Value* v1, const Value* v2) {
    switch (v1.kind) {
    case Integer:
        switch (v2.kind) {
        case Integer:
            if (v1.negative)
                return v2.negative && v1.uvalue <= v2.uvalue;
            else
                return v2.negative || v1.uvalue >= v2.uvalue;
            break;  // TODO: fix bogus error in Analyser.analyseCase
        case Float:
            return v1.toFloat() >= v2.fvalue;
        default:
            break;
        }
        break;
    case Float:
        return v1.fvalue >= v2.toFloat();
    default:
        break;
    }
    return false;
}

fn void Value.mask(Value* v, u32 width) {
    if (v.negative) {
        v.uvalue = ~v.uvalue + 1;
        v.negative = false;
    }
    if (width < 64) {
        u64 one = 1;
        // TODO: cannot write v.uvalue &= (1ULL << width) - 1;
        v.uvalue &= (one << width) - 1;
    }
}

fn void Value.truncate(Value *orig, bool is_signed, u32 width) {
    assert(orig.isDecimal());
    // TODO signed, for now only take uvalue
    u64 uvalue = orig.as_u64();
    u64 mask = 1;
    u64 sbit = 0;
    switch (width) {
    case 1:
        uvalue = (uvalue != 0) ? 1 : 0;
        break;
    case 7:
        sbit = 0x80;
        fallthrough;
    case 8:
        mask = 0xFF;
        break;
    case 15:
        sbit = 0x8000;
        fallthrough;
    case 16:
        mask = 0xFFFF;
        break;
    case 31:
        sbit = 0x80000000;
        fallthrough;
    case 32:
        mask = 0xFFFFFFFF;
        break;
    case 63:
        sbit = 0x8000000000000000;
        fallthrough;
    case 64:
        mask = 0xFFFFFFFFFFFFFFFF;
        break;
    }
    if (uvalue & sbit)
        orig.setSigned((i64)((uvalue & (sbit - 1)) - sbit));
    else
        orig.setUnsigned(uvalue & mask);
}

public fn void Value.incr(Value* v) {
    switch (v.kind) {
    case Integer:
        if (v.negative) {
            if (v.uvalue == 1)
                v.negative = false;
            v.uvalue--;
        } else {
            if (v.uvalue == max_u64)
                v.overflow = true;
            v.uvalue++;
        }
        break;
    case Float:
        v.fvalue += 1;
        break;
    default:
        break;
    }
}

public fn void Value.decr(Value* v) {
    switch (v.kind) {
    case Integer:
        if (v.negative) {
            if (v.uvalue == max_u64)
                v.overflow = true;
            v.uvalue++;
        } else {
            if (v.uvalue == 0) {
                v.negative = true;
                v.uvalue = 1;
            } else {
                v.uvalue--;
            }
        }
        break;
    case Float:
        v.fvalue -= 1;
        break;
    default:
        break;
    }
}

fn Value Value.castAs(const Value* v, QualType qt) {
    Value result = *v;

    qt = qt.getCanonicalType();
    if (qt.isEnum())
        qt = qt.getEnum().getImplType();
    if (qt.isPointer())
        return result;
    assert(qt.isBuiltin());
    BuiltinType* bi = qt.getBuiltin();
    switch (result.kind) {  // @@@
    case Integer:
        if (qt.isFloat()) {
            result.setFloat(result.toFloat());
            if (bi.getWidth() == 32) {
                result.setFloat(cast<f32>(result.toFloat()));
            }
        } else
        if (qt.isBool()) {
            result.setUnsigned(!result.isZero());
        } else {
            result.truncate(bi.isSigned(), bi.getWidth());
        }
        break;
    case Float:
        if (qt.isFloat()) {
            if (bi.getWidth() == 32) {
                result.setFloat(cast<f32>(result.fvalue));
            }
        } else
        if (qt.isBool()) {
            result.setUnsigned(!result.isZero());
        } else {
            // TODO: check for overflow
            if (bi.isSigned()) {
                result.setSigned(cast<i64>(result.fvalue));
            } else {
                result.setUnsigned(cast<u64>(result.fvalue));
            }
            result.truncate(bi.isSigned(), bi.getWidth());
        }
        break;
    default:
        break;
    }
    return result;
}

// use local binary versions of math functions to avoid
// linking the math library.
type FP64 union { f64 d; u64 bits; }

fn bool isfinite(f64 d) {
    FP64 u = { .d = d };
    return ((u.bits >> 52) & 0x7ff) != 0x7ff;
}

//fn bool isnan(f64 d) { return d != d; }

fn i32 signbit(f64 d) {
    FP64 u = { .d = d };
    return (u.bits >> 63) & 1;
}

fn f64 fabs(f64 d) {
    FP64 u = { .d = d };
    u.bits = u.bits << 1 >> 1;
    return u.d;
}

// Convert a floating point number to its closest minimal representation as a
// string and trying to avoid using exponential notation
// TODO: should be in the C2 library as a type function f64.str()
public fn char *ftoa(char *dest, usize size, f64 d) {
    char[32] buf;
    usize pos = 0;

    if (size < 2) {
        if (size)
            *dest = '\0';
        return dest;
    }
    if (!isfinite(d)) {
        // TODO: use normalized strings
        stdio.snprintf(dest, size, "%f", d);
        return dest;
    }
    if (signbit(d)) {
        // This produces -0.0 for negative zero
        dest[pos++] = '-';
        d = fabs(d);
    }
    if (!d) {
        stdio.snprintf(dest + pos, size - pos, "0.0");
        return dest;
    }
    if (d < 0.0001 || d > 1000000) {
        for (i32 prec = 14; prec < 17; prec++) {
            stdio.snprintf(buf, sizeof(buf), "%.*e", prec, d);
            if (stdlib.atof(buf) == d)
                break;
        }
    } else {
        for (i32 prec = 17 - 4; prec < 17 + 4; prec++) {
            stdio.snprintf(buf, sizeof(buf), "%.*f", prec, d);
            if (stdlib.atof(buf) == d)
                break;
        }
    }
    // remove trailing zeroes, keep at least one decimal
    char *dot = buf + 1;
    while (*dot && *dot != '.')
        dot++;
    char *exp = dot;
    while (*exp && *exp != 'e')
        exp++;
    char* decimals = exp;
    while (decimals > dot + 2 && decimals[-1] == '0')
        decimals--;
    usize len = size - 1;
    for (char *p = buf; p < decimals && pos < len; p++) {
        dest[pos++] = *p;
    }
    for (char *p = exp; *p && pos < len; p++) {
        dest[pos++] = *p;
    }
    dest[pos] = '\0';
    return dest;
}

public fn const char* Value.str(const Value* v) {
    // TODO: not thread safe
    local char[4][64] text;
    local u8 index = 0;
    char* out = text[index];
    index = (index+1) % 4;

    switch (v.kind) {
    case Integer:
        *out = '-';
        stdio.snprintf(out + v.negative, 64 - 1, "%d", v.uvalue);
        break;
    case Float:
        ftoa(out, 64, v.fvalue);
        break;
    default:
        return "<<invalid>>";
    }
    return out;
}

