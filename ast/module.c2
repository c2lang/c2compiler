/* Copyright 2022-2025 Bas van den Berg
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

module ast;

import ast_context;
import string_buffer;
import string_pool;
import color;

import std;

public type Module struct @(opaque) {
    u32 name_idx;
    bool is_used;
    bool is_external;
    bool is_internal; // currently only for c2 module
    bool is_direct; // otherwise indirectly loaded via library.
    bool is_foreign; // module identifiers are not mangled
    bool is_exported;
    bool is_loaded; // the file(s) parsed. For external libs
    ModuleType* mt;

    ast.AST** files;
    u32 num_files;
    u32 max_files;

    SymbolTable symbols;
    InstanceTable instances;
}
static_assert(88, sizeof(Module));

// Note: name must be allocated in target StringPool
public fn Module* Module.create(ast_context.Context* c, u32 name_idx, bool is_external, bool is_direct) {
    Module* m = std.calloc(1, sizeof(Module));
    m.mt = ModuleType.create(c, m);
    m.name_idx = name_idx;
    m.is_external = is_external;
    m.is_foreign = is_external;    // default for external modules
    m.is_internal = false;
    m.is_direct = is_direct;
    m.is_loaded = false;
    m.resizeFiles(1);
    m.symbols.init(16);
    m.instances.init();
    return m;
}

public fn void Module.free(Module* m) {
    for (u32 i=0; i<m.num_files; i++) {
        m.files[i].free();
    }
    std.free(m.files);
    m.symbols.free();
    m.instances.free();
    std.free(m);
}

public fn void Module.setUsed(Module* m) { m.is_used = true; }
public fn bool Module.isUsed(const Module* m) { return m.is_used; }

// TODO use use a keyword or an attribute for this
public fn void Module.setInternal(Module* m) @(unused) { m.is_internal = true; }
public fn bool Module.isInternal(const Module* m) { return m.is_internal; }

public fn bool Module.isExternal(const Module* m) { return m.is_external; }

public fn void Module.setForeign(Module* m, bool is_foreign) { m.is_foreign = is_foreign; }
public fn bool Module.isForeign(const Module* m) { return m.is_foreign; }

public fn void Module.setLoaded(Module* m) { m.is_loaded = true; }
public fn bool Module.isLoaded(const Module* m) { return m.is_loaded; }

public fn void Module.setExported(Module* m) {
    m.is_exported = true;
    for (u32 i=0; i<m.num_files; i++) {
        m.files[i].setExported();
    }
}

public fn bool Module.isExported(const Module* m) { return m.is_exported; }

public fn bool Module.isDirect(const Module* m) { return m.is_direct; }

public fn const SymbolTable* Module.getSymbols(const Module* m) { return &m.symbols; }

public fn ModuleType* Module.getType(const Module* m) { return m.mt; }

public type ASTVisitor fn void (void* arg, AST* d);

// only used by plugins
public fn const char* Module.getFirstFilename(const Module* m) @(unused) {
    if (m.num_files) return m.files[0].getFilename();
    return nil;
}

public fn void Module.visitASTs(const Module* m, ASTVisitor visitor, void* arg) {
    for (u32 i=0; i<m.num_files; i++) {
        visitor(arg, m.files[i]);
    }
}

public fn void Module.visitImports(const Module* m, ImportVisitor visitor, void* arg) {
    for (u32 i=0; i<m.num_files; i++) {
        m.files[i].visitImports(visitor, arg);
    }
}

public fn void Module.visitArrayValues(const Module* m, ArrayValueVisitor visitor, void* arg) {
    for (u32 i=0; i<m.num_files; i++) {
        m.files[i].visitArrayValues(visitor, arg);
    }
}

public fn void Module.visitTypeFunctions(const Module* m, FunctionVisitor visitor, void* arg) {
    for (u32 i=0; i<m.num_files; i++) {
        m.files[i].visitTypeFunctions(visitor, arg);
    }
}

public fn void Module.visitFunctions(const Module* m, FunctionVisitor visitor, void* arg) {
    for (u32 i=0; i<m.num_files; i++) {
        m.files[i].visitFunctions(visitor, arg);
    }
}

public fn void Module.visitTypeDecls(const Module* m, TypeDeclVisitor visitor, void* arg) {
    for (u32 i=0; i<m.num_files; i++) {
        m.files[i].visitTypeDecls(visitor, arg);
    }
}

public fn void Module.visitVarDecls(const Module* m, VarDeclVisitor visitor, void* arg) {
    for (u32 i=0; i<m.num_files; i++) {
        m.files[i].visitVarDecls(visitor, arg);
    }
}

public fn void Module.visitStaticAsserts(const Module* m, StaticAssertVisitor visitor, void* arg) {
    for (u32 i=0; i<m.num_files; i++) {
        m.files[i].visitStaticAsserts(visitor, arg);
    }
}

public fn void Module.visitDecls(const Module* m, DeclVisitor visitor, void* arg) {
    for (u32 i=0; i<m.num_files; i++) {
        m.files[i].visitDecls(visitor, arg);
    }
}

public fn void Module.visitDeclsWithoutImports(const Module* m, DeclVisitor visitor, void* arg) {
    for (u32 i=0; i<m.num_files; i++) {
        m.files[i].visitDeclsWithoutImports(visitor, arg);
    }
}

public fn Decl* Module.findType(const Module* m, u32 name_idx) {
    Decl* result = nil;
    for (u32 i=0; i<m.num_files; i++) {
        result = m.files[i].findType(name_idx);
        if (result) break;
    }
    return result;
}

public fn const char* Module.getName(const Module* m) { return idx2name(m.name_idx); }

public fn u32 Module.getNameIdx(const Module* m) { return m.name_idx; }

fn void Module.resizeFiles(Module* m, u32 cap) {
    m.max_files = cap;
    void* buf = std.malloc(m.max_files * sizeof(ast.AST*));
    if (m.files) {
        void* old = m.files;
        std.memcpy(buf, old, m.num_files * sizeof(ast.AST*));
        std.free(old);
    }
    m.files = buf;
}

public fn ast.AST* Module.add(Module* m, string_pool.Pool* auxPool, u32 filename, bool is_interface, bool is_generated) {
    ast.AST* a = ast.AST.create(auxPool, filename, m, is_interface, is_generated);

    if (m.num_files == m.max_files) m.resizeFiles(m.max_files * 2);

    m.files[m.num_files] = a;
    m.num_files++;
    return a;
}

public fn void Module.addSymbol(Module* m, u32 name_idx, ast.Decl* d) {
    m.symbols.add(name_idx, d);
}

public fn ast.Decl* Module.findSymbol(const Module* m, u32 name_idx) {
    return m.symbols.find(name_idx);
}

public fn ast.Decl* Module.findPublicSymbol(const Module* m, u32 name_idx) {
    return m.symbols.findPublic(name_idx);
}

public fn ast.Decl* Module.findPrivateSymbol(const Module* m, u32 name_idx) {
    return m.symbols.findPrivate(name_idx);
}

public fn ast.FunctionDecl* Module.findInstance(const Module* m, ast.FunctionDecl* fd, QualType qt) {
    return m.instances.find(fd, qt);
}

public fn u16 Module.addInstance(Module* m, ast.FunctionDecl* fd, QualType qt, ast.FunctionDecl* instance) {
    return m.instances.add(fd, qt, instance);
}

public fn ast.FunctionDecl* Module.getInstance(const Module* m, ast.FunctionDecl* fd, u32 idx) {
    return m.instances.get(fd, idx);
}

/*
public type TemplateVisitor fn void (void* arg, FunctionDecl* fd, u32 idx);

public fn void Module.visitInstances(const Module* m, ast.FunctionDecl* fd, TemplateVisitor visitor, void* arg) {
    m.instances.visit(fd, visitor, arg);
}
*/

/*
public fn void Module.info(const Module* m, string_buffer.Buf* out) {
    out.print("  module %s\n", idx2name(m.name_idx));
    for (u32 i=0; i<m.num_files; i++) {
        m.files[i].info(out);
    }
#if 0
    out.print("    Symbol: (%u)\n", m.num_symbols);
    for (u32 i=0; i<m.num_symbols; i++) {
        out.print("      %s\n", idx2name(m.symbols[i]));
    }
#endif
}
*/

public fn void Module.print(const Module* m, string_buffer.Buf* out, bool show_funcs) {
    out.color(color.Normal);
    out.print("------ module %s (used %d, exported %d) ------\n", idx2name(m.name_idx), m.is_used, m.is_exported);
    for (u32 i=0; i<m.num_files; i++) {
        m.files[i].print(out, show_funcs);
    }
}

