/* Copyright 2022-2025 Bas van den Berg
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

module ast;

import ast_context;
import string_buffer;
import src_loc local;
import number_radix local;

type IntegerLiteralBits struct {
    u32 : NumExprBits;
    u32 radix : 2;      // number_radix.Radix enum
    u32 is_signed : 1;
    u32 src_len : 32 - NumExprBits - 2 - 1;
}

public type IntegerLiteral struct @(opaque) {
    Expr base;
    u64 val;
}

public fn IntegerLiteral* IntegerLiteral.create(ast_context.Context* c, SrcLoc loc, u32 src_len, u64 val, Radix radix) {
    IntegerLiteral* i = c.alloc(sizeof(IntegerLiteral));
    i.base.init(ExprKind.IntegerLiteral, loc, 1, 1, 0, ValType.RValue);
    i.base.base.integerLiteralBits.radix = radix;
    i.base.base.integerLiteralBits.src_len = src_len;
    i.val = val;
#if AstStatistics
    Stats.addExpr(ExprKind.IntegerLiteral, sizeof(IntegerLiteral));
#endif
    //i.base.setType(integerVal2Type(val));
    // just set to i32
    // TODO: fix this for values larger than max_int32?
    i.base.setType(builtins[BuiltinKind.Int32]);

    return i;
}

public fn IntegerLiteral* IntegerLiteral.createUnsignedConstant(ast_context.Context* c, SrcLoc loc, u64 val, QualType qt) {
    IntegerLiteral* i = IntegerLiteral.create(c, loc, 0, val, Radix.Default);
    i.base.setCtv();
    i.base.setCtc();
    i.base.setType(qt);
    return i;
}

public fn IntegerLiteral* IntegerLiteral.createSignedConstant(ast_context.Context* c, SrcLoc loc, i64 val, QualType qt) {
    IntegerLiteral* i = IntegerLiteral.create(c, loc, 0, cast<u64>(val), Radix.Default);
    i.base.base.integerLiteralBits.is_signed = 1;
    i.base.setCtv();
    i.base.setCtc();
    i.base.setType(qt);
    return i;
}

public fn u64 IntegerLiteral.getValue(const IntegerLiteral* e) { return e.val; }

public fn SrcLoc IntegerLiteral.getEndLoc(const IntegerLiteral* e) {
    return e.base.loc + e.base.base.integerLiteralBits.src_len;
}

/*
public fn bool IntegerLiteral.isDecimal(const IntegerLiteral* e) {
    return e.base.base.integerLiteralBits.radix == Radix.Default;
}
*/

public fn bool IntegerLiteral.isSigned(const IntegerLiteral* e) {
    return e.base.base.integerLiteralBits.is_signed;
}

fn void printBinary(string_buffer.Buf* out, u64 value) {
    char[1+(64+2-1)/2+1] tmp;
    char* cp = &tmp[elemsof(tmp) - 1];
    *cp = '\0';
    for (;;) {
        *--cp = '0' + (value & 0x1);
        value /= 2;
        if (value == 0)
            break;
    }
    *--cp = 'b';
    *--cp = '0';
    out.add(cp);
}

fn void printOctal(string_buffer.Buf* out, u64 value) {
    char[1+(64+3-1)/3+1] tmp;
    char* cp = &tmp[elemsof(tmp) - 1];
    *cp = '\0';
    while (value) {
        *--cp = '0' + (value & 0x7);
        value /= 8;
    }
    *--cp = '0';
    out.add(cp);
}

fn void IntegerLiteral.print(const IntegerLiteral* e, string_buffer.Buf* out, u32 indent) {
    e.base.printKind(out, indent);
    e.base.printTypeBits(out);
    out.color(col_Value);
    out.space();
    e.printLiteral(out);
    out.newline();
}

public fn void IntegerLiteral.printLiteral(const IntegerLiteral* e, string_buffer.Buf* out) {
    switch (e.base.base.integerLiteralBits.radix) {
    case Radix.Default:
        if (e.base.base.integerLiteralBits.is_signed) {
            i64 sval = cast<i64>(e.val);
            if (sval >= -2147483647 && sval <= 2147483647)
                out.print("%d", sval);
            else
            if (sval == -2147483647-1)
                out.print("(-2147483647-1)");
            else
            if (e.val == 0x8000000000000000)
                out.print("(-9223372036854775807l-1)");
            else
                out.print("%dl", sval);
        } else {
            if (e.val > 4294967295)
                out.print("%dlu", e.val);
            else
                out.print("%d", e.val);
        }
        break;
    case Radix.Hex:
        out.print("0x%x", e.val);
        break;
    case Radix.Octal:
        // FIXME: incorrect for negative values
        printOctal(out, e.val);
        break;
    case Radix.Binary:
        printBinary(out, e.val);
        break;
    }
}

