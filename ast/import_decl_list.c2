/* Copyright 2022-2025 Bas van den Berg
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

module ast;

import std local;

public type ImportDeclList struct {
    u32 count;
    u32 capacity;
    ImportDecl** decls;
}

fn void ImportDeclList.init(ImportDeclList* l) {
    memset(l, 0, sizeof(ImportDeclList));
}

fn void ImportDeclList.free(ImportDeclList* l) {
    if (l.decls) free(l.decls);
}

fn void ImportDeclList.add(ImportDeclList* l, ImportDecl* d) {
    if (l.count >= l.capacity) {
        l.capacity += 4;
        void* decls2 = malloc(l.capacity * sizeof(ImportDecl*));
        void* old = l.decls;
        if (old) {
            memcpy(decls2, old, l.count * sizeof(ImportDecl*));
            free(old);
        }
        l.decls = decls2;
    }

    l.decls[l.count] = d;
    l.count++;
}

public fn u32 ImportDeclList.size(const ImportDeclList* l) {
    return l.count;
}

public fn ImportDecl** ImportDeclList.getDecls(const ImportDeclList* l) {
    return l.decls;
}

public fn ImportDecl* ImportDeclList.find(const ImportDeclList* l, u32 name_idx) {
    for (u32 i=0; i<l.count; i++) {
        ImportDecl* d = l.decls[i];
        if (d.getImportNameIdx() == name_idx) return d;
    }
    return nil;
}

public fn ImportDecl* ImportDeclList.findAny(const ImportDeclList* l, u32 name_idx) {
    for (u32 i=0; i<l.count; i++) {
        ImportDecl* d = l.decls[i];
        if (d.asDecl().getNameIdx() == name_idx) return d;
    }
    return nil;
}

