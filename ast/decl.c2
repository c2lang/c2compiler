/* Copyright 2022-2025 Bas van den Berg
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

module ast;

import src_loc local;
import attr;
import string_buffer;
import stdio;

// TODO better order
public type DeclKind enum u8 {
    Function,
    Import,
    StructType,
    EnumType,
    EnumConstant,
    FunctionType,
    AliasType,
    Variable,
}

public type DeclCheckState enum u8 {
    Unchecked,
    InProgress,
    Checked,
}

const char*[] declCheckState_names = {
    "unchecked",
    "in-progress",
    "checked",
}

static_assert(elemsof(DeclCheckState), elemsof(declCheckState_names));

const char*[] declKind_names = {
    "FunctionDecl",
    "ImportDecl",
    "StructTypeDecl",
    "EnumTypeDecl",
    "EnumConstantDecl",
    "FunctionType",
    "AliasTypeDecl",
    "VarDecl",
}

static_assert(elemsof(DeclKind), elemsof(declKind_names));

type DeclBits struct {
    u32 kind : 4;
    u32 check_state : 2;
    u32 is_public : 1;
    u32 is_used : 1;
    u32 is_used_public : 1;
    u32 has_attr : 1;   // external attributes, not those saved in Decls itself (like attr_packed)
    u32 attr_export : 1;    // dont generate as static
    u32 attr_unused : 1;
    u32 is_external : 1;    // in external lib
    u32 is_generated : 1;   // for globals, can be used by generators
    u32 has_gen_idx : 1;
}

const u32 NumDeclBits = 15;  // should match bitfields above

public type Decl struct @(opaque) {
    union {
        DeclBits declBits;
        ImportDeclBits importDeclBits;
        FunctionDeclBits functionDeclBits;
        StructTypeDeclBits structTypeDeclBits;
        EnumTypeDeclBits enumTypeDeclBits;
        EnumConstantDeclBits enumConstantDeclBits;
        VarDeclBits varDeclBits;
        u32 bits;
    }
    union {
        SrcLoc loc;
        u32 gen_idx;    // can be used during generation for VarDecls, since SrcLoc is not used anymore then
    }
    u32 name_idx;
    u16 ast_idx;    // into globals.ast_list, 0 means nil
    u16 offset; // for struct members? TODO move to VarDecl tail info
    QualType qt;
}

fn void Decl.init(Decl* d, DeclKind k, u32 name_idx, SrcLoc loc, bool is_public, QualType qt, u32 ast_idx) {
    d.bits = 0;
    d.declBits.kind = k;
    d.declBits.is_public = is_public;

    d.loc = loc;
    d.name_idx = name_idx;
    d.ast_idx = (u16)ast_idx;
    d.offset = 0;
    d.qt = qt;
}

public fn bool Decl.hasGenIdx(const Decl* d) {
    return d.declBits.has_gen_idx;
}

// Note: this overwrites SrcLoc!
public fn void Decl.setGenIdx(Decl* d, u32 idx) {
    d.declBits.has_gen_idx = 1;
    d.gen_idx = idx;
}

public fn u32 Decl.getGenIdx(const Decl* d) {
    if (d.declBits.has_gen_idx) return d.gen_idx;
    return 0;
}

// TEMP cast needed until Analyser fixed
public fn DeclKind Decl.getKind(const Decl* d) { return (DeclKind)d.declBits.kind; }

public fn DeclCheckState Decl.getCheckState(const Decl* d) { return (DeclCheckState)d.declBits.check_state; }
/*
public fn const char* Decl.getCheckStateName(const Decl* d) {
    return declCheckState_names[(DeclCheckState)d.declBits.check_state)];
}
*/

public fn bool Decl.isChecked(const Decl* d) { return d.declBits.check_state == DeclCheckState.Checked; }
public fn bool Decl.isCheckInProgress(const Decl* d) { return d.declBits.check_state == DeclCheckState.InProgress; }
public fn void Decl.setChecked(Decl* d) { d.declBits.check_state = DeclCheckState.Checked; }
public fn void Decl.setCheckInProgress(Decl* d) { d.declBits.check_state = DeclCheckState.InProgress; }

public fn void Decl.setHasAttr(Decl* d) { d.declBits.has_attr = 1; }
public fn bool Decl.hasAttr(const Decl* d) { return d.declBits.has_attr; }

public fn void Decl.setAttrExport(Decl* d) { d.declBits.attr_export = 1; }

fn void Decl.setExportedIfPublic(Decl* d) {
    if (d.declBits.is_public) d.declBits.attr_export = 1;
}
public fn bool Decl.isExported(const Decl* d) { return d.declBits.attr_export; }

// Only local VarDecls are non global
public fn bool Decl.isGlobal(const Decl* d) {
    if (!d.isVarDecl()) return true;
    const VarDecl* vd = (VarDecl*)d;
    return vd.isGlobal() || vd.isStructMember();
}

public fn bool Decl.isBitfield(const Decl* d) {
    if (!d.isVarDecl()) return false;
    const VarDecl* vd = (VarDecl*)d;
    return vd.isBitField();
}

public fn void Decl.setAttrUnused(Decl* d) { d.declBits.attr_unused = 1; }

public fn bool Decl.hasAttrUnused(const Decl* d) { return d.declBits.attr_unused; }


public fn bool Decl.isStructType(const Decl* d) {
    return d.getKind() == DeclKind.StructType;
}

public fn bool Decl.isImport(const Decl* d) {
    return d.getKind() == DeclKind.Import;
}

public fn bool Decl.isEnum(const Decl* d) {
    return d.getKind() == DeclKind.EnumType;
}

public fn bool Decl.isEnumConstant(const Decl* d) {
    return d.getKind() == DeclKind.EnumConstant;
}

public fn bool Decl.isFunction(const Decl* d) {
    return d.getKind() == DeclKind.Function;
}

/*
public fn bool Decl.isFunctionType(const Decl* d) {
    return d.getKind() == DeclKind.FunctionType;
}
*/

public fn bool Decl.isVariable(const Decl* d) {
    return  d.getKind() == DeclKind.Variable;
}

public fn const char* Decl.getName(const Decl* d) {
    return idx2name(d.name_idx);
}

public fn u32 Decl.getNameIdx(const Decl* d) {
    return d.name_idx;
}

// convenience function
public fn const char* Decl.getModuleName(const Decl* d) {
    const AST* a = d.getAST();
    if (!a) return nil;
    const Module* mod = a.getMod();
    return mod.getName();
}

public fn SrcLoc Decl.getLoc(const Decl* d) { return d.loc; }

public fn QualType Decl.getType(const Decl* d) { return d.qt; }
public fn void Decl.setType(Decl* d, QualType qt) { d.qt = qt; }

public fn AST* Decl.getAST(const Decl* d) { return idx2ast(d.ast_idx); }

fn u32 Decl.getASTIdx(const Decl* d) { return d.ast_idx; }

public fn Module* Decl.getModule(const Decl* d) {
    const AST* a = d.getAST();
    if (!a) return nil;
    return a.getMod();
}

public fn bool Decl.isPublic(const Decl* d) { return d.declBits.is_public; }

public fn bool Decl.isUsed(const Decl* d) { return d.declBits.is_used; }

public fn bool Decl.isUsedPublic(const Decl* d) { return d.declBits.is_used_public; }

public fn void Decl.setUsed(Decl* d) { d.declBits.is_used = true; }

public fn void Decl.clearUsed(Decl* d) { d.declBits.is_used = false; }

public fn void Decl.setUsedPublic(Decl* d) { d.declBits.is_used_public = true; }

public fn bool Decl.isExternal(const Decl* d) { return d.declBits.is_external; }

public fn void Decl.setExternal(Decl* d) { d.declBits.is_external = 1; }

public fn bool Decl.isGenerated(const Decl* d) { return d.declBits.is_generated; }

public fn void Decl.setGenerated(Decl* d) { d.declBits.is_generated = 1; }

public fn void Decl.clearGenerated(Decl* d) { d.declBits.is_generated = 0; }

public fn void Decl.dump(const Decl* d) {
    string_buffer.Buf* out = ast.getDumpBuf();
    d.print(out, 0);
    ast.flushDumpBuf(out);
}

public fn bool Decl.isTypeDecl(const Decl* d) {
    switch (d.getKind()) {
    case Function:     break;
    case Import:       break;
    case StructType:   return true;
    case EnumType:     return true;
    case EnumConstant: break;
    case FunctionType: return true;
    case AliasType:    return true;
    case Variable:     break;
    }
    return false;
}

public fn bool Decl.isVarDecl(const Decl* d) {
    return d.getKind() == DeclKind.Variable;
}

public fn const char* Decl.getKindName(const Decl* d) {
    switch (d.getKind()) {
    case Function:     return "function";
    case Import:       return "import";
    case StructType:   return "type";
    case EnumType:     return "type";
    case EnumConstant: return "enum constant";
    case FunctionType: return "type";
    case AliasType:    return "type";
    case Variable:     return "variable";
    }
    return "";
}

public fn const char* Decl.getCName(const Decl* d) {
    if (!d.hasAttr()) return nil;

    const AST* a = d.getAST();
    const attr.Value* cname = a.getAttr(d, attr.AttrKind.CName);
    if (cname) return idx2name(cname.text);
    return nil;
}

public fn bool Decl.hasCName(const Decl* d) {
    if (!d.hasAttr()) return false;

    const AST* a = d.getAST();
    const attr.Value* cname = a.getAttr(d, attr.AttrKind.CName);
    return cname;
}

public fn const char* Decl.getCDef(const Decl* d) {
    if (!d.hasAttr()) return nil;

    const AST* a = d.getAST();
    const attr.Value* cdef = a.getAttr(d, attr.AttrKind.CDef);
    if (cdef) return idx2name(cdef.text);
    return nil;
}

public fn const char* Decl.getSection(const Decl* d) {
    if (!d.hasAttr()) return nil;

    const AST* a = d.getAST();
    const attr.Value* section = a.getAttr(d, attr.AttrKind.Section);
    if (section) return idx2name(section.text);
    return nil;
}

public fn const char* Decl.getFullName(const Decl* d) {
    local char[4][128] tmp_buf; // allow up to 4 consecutive calls with different output
    local u32 tmp_id = 0;
    u32 tmp_size = elemsof(tmp_buf[0]);
    char* tmp = tmp_buf[tmp_id++ & 3];

    const char* modname = d.getModuleName();

    switch (d.getKind()) {
    case Function:
        const FunctionDecl* fd = (FunctionDecl*)d;
        if (fd.hasPrefix()) {
            stdio.snprintf(tmp, tmp_size, "%s.%s.%s", modname, fd.getPrefixName(), d.getName());
        } else {
            stdio.snprintf(tmp, tmp_size, "%s.%s", modname, d.getName());
        }
        break;
    case Import:
        stdio.snprintf(tmp, tmp_size, "%s", d.getName());
        break;
    case EnumConstant:
        QualType qt = d.getType();
        EnumType* et = qt.getEnumType();
        EnumTypeDecl* etd = et.getDecl();
        Decl* ed = (Decl*)etd;
        stdio.snprintf(tmp, tmp_size, "%s.%s.%s", modname, ed.getName(), d.getName());
        break;
    default:
        stdio.snprintf(tmp, tmp_size, "%s.%s", modname, d.getName());
        break;
    }

    return tmp;
}

fn void Decl.print(const Decl* d, string_buffer.Buf* out, u32 indent) {
    switch (d.getKind()) {
    case Function:
        FunctionDecl.print((FunctionDecl*)d, out, indent);
        break;
    case Import:
        ImportDecl.print((ImportDecl*)d, out, indent);
        break;
    case StructType:
        StructTypeDecl.print((StructTypeDecl*)d, out, indent);
        break;
    case EnumType:
        EnumTypeDecl.print((EnumTypeDecl*)d, out, indent);
        break;
    case EnumConstant:
        EnumConstantDecl.print((EnumConstantDecl*)d, out, indent);
        break;
    case FunctionType:
        FunctionTypeDecl.print((FunctionTypeDecl*)d, out, indent);
        break;
    case AliasType:
        AliasTypeDecl.print((AliasTypeDecl*)d, out, indent);
        break;
    case Variable:
        VarDecl.print((VarDecl*)d, out, indent);
        break;
    }
}

fn void Decl.printKind(const Decl* d, string_buffer.Buf* out, u32 indent, bool print_type) {
    out.indent(indent);
    out.color(col_Decl);
    out.add(declKind_names[d.getKind()]);
    if (print_type) {
        out.space();
        d.qt.printQuoted(out);
    }
}

fn void Decl.printName(const Decl* d, string_buffer.Buf* out) {
    out.space();
    out.color(col_Value);
    if (d.name_idx) {
        out.add(d.getName());
    } else {
        out.add("(nil)");
    }
}

fn void Decl.printBits(const Decl* d, string_buffer.Buf* out) {
    out.color(col_Attr);
    if (d.isPublic()) out.add(" public");
    DeclCheckState cs = d.getCheckState();
    if (cs != DeclCheckState.Checked) {
        out.space();
        out.add(declCheckState_names[cs]);
    }
    if (d.declBits.attr_unused) {
        out.add(" unused");
    }

    if (d.declBits.has_attr) out.add(" attr");
    if (d.declBits.attr_export) out.add(" export");

    if (!d.isUsed()) {
        out.color(col_Expr);
        out.add(" unused");
    }
}

fn void Decl.printAttrs(const Decl* d, string_buffer.Buf* out) {
    if (!d.hasAttr()) return;

    const AST* a = d.getAST();
    // Note: just request 4 here, ideally we should iterate over all
    const attr.Value* cname = a.getAttr(d, attr.AttrKind.CName);
    if (cname) {
        out.color(col_Attr);
        out.print(" cname='%s'", idx2name(cname.text));
    }
    const attr.Value* cdef = a.getAttr(d, attr.AttrKind.CDef);
    if (cdef) {
        out.color(col_Attr);
        out.print(" cdef='%s'", idx2name(cdef.text));
    }
    const attr.Value* section = a.getAttr(d, attr.AttrKind.Section);
    if (section) {
        out.color(col_Attr);
        out.print(" section='%s'", idx2name(section.text));
    }
    const attr.Value* embed = a.getAttr(d, attr.AttrKind.Embed);
    if (embed) {
        out.color(col_Attr);
        out.print(" embed='%s'", idx2name(embed.text));
    }
}

fn void Decl.printUsed(const Decl* d, string_buffer.Buf* out) {
    out.color(col_Attr);
    out.print(" used=%d/%d", d.isUsed(), d.isUsedPublic());
}

