/* Copyright 2022-2025 Bas van den Berg
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

module ast;

import ast_context;
import string_buffer;
import src_loc local;
import string;

type InitListExprBits struct {
    u32 : NumExprBits;
    //u32 num_values : 32 - NumExprBits;
}

public type InitListExpr struct @(opaque) {
    Expr base;
    SrcLoc right;
    u32 num_values;
    Expr*[0] values; // tail-allocated
}

public fn InitListExpr* InitListExpr.create(ast_context.Context* c, SrcLoc left, SrcLoc right, Expr** values, u32 num_values) {
    u32 size = sizeof(InitListExpr) + num_values * sizeof(Expr*);
    InitListExpr* e = c.alloc(size);
    e.base.init(ExprKind.InitList, left, 0, 0, 0, ValType.RValue);
    e.num_values = num_values;
    e.right = right;
    if (num_values) {
        string.memcpy(cast<void*>(e.values), cast<void*>(values), num_values * sizeof(Expr*));
    }
#if AstStatistics
    Stats.addExpr(ExprKind.InitList, size);
#endif
    return e;
}

fn Expr* InitListExpr.instantiate(InitListExpr* e, Instantiator* inst) {
    u32 num_values = e.getNumValues();
    u32 size = sizeof(InitListExpr) + num_values * sizeof(Expr*);
    InitListExpr* e2 = inst.c.alloc(size);
    e2.base = e.base;
    e2.right = e.right;
    for (u32 i=0; i<num_values; i++) {
        e2.values[i] = e.values[i].instantiate(inst);
    }
#if AstStatistics
    Stats.addExpr(ExprKind.InitList, size);
#endif
    return cast<Expr*>(e2);
}

public fn u32 InitListExpr.getNumValues(const InitListExpr* e) {
    return e.num_values;
}

public fn Expr** InitListExpr.getValues(InitListExpr* e) {
    return e.values;
}

fn void InitListExpr.print(const InitListExpr* e, string_buffer.Buf* out, u32 indent) {
    e.base.printKind(out, indent);
    e.base.printTypeBits(out);
    out.newline();

    for (u32 i=0; i<e.getNumValues(); i++) {
        e.values[i].print(out, indent + 1);
    }
}

