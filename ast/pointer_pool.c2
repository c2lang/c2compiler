/* Copyright 2022-2025 Bas van den Berg
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

module ast;

import ast_context;

import std local;

/*
    This pool is used to lookup pointers to a certain type. It keeps 4 variants:
        *
        const*
        volatile*
        const volatile*
*/

type PointerPoolSlot struct {
    Type*[4] ptrs;  // Note: quals is index
}

type PointerPool struct {
    ast_context.Context* context;

    u32 count;
    u32 capacity;
    PointerPoolSlot* slots;
}

fn void PointerPool.init(PointerPool* p, ast_context.Context* c) {
    p.count = 1;    // skip first slot
    p.capacity = 0;
    p.slots = nil;
    p.context = c;
    p.resize(64);
}

fn void PointerPool.clear(PointerPool* p) {
    free(p.slots);
    p.count = 1;    // skip first slot
    p.capacity = 0;
    p.slots = nil;
}

fn void PointerPool.resize(PointerPool* p, u32 cap) {
    p.capacity = cap;
    PointerPoolSlot* slots2 = malloc(p.capacity * sizeof(PointerPoolSlot));
    if (p.count > 1) {  // first slot is empty
        memcpy(slots2, p.slots, p.count * sizeof(PointerPoolSlot));
        free(p.slots);
    }
    p.slots = slots2;
}

fn Type* PointerPool.getPointer(PointerPool* p, QualType qt) {
    Type* t = qt.getTypeOrNil();
    assert(t);

    const u32 ptr_pool_idx = t.ptr_pool_idx;
    PointerPoolSlot* slot = &p.slots[ptr_pool_idx];
    if (ptr_pool_idx == 0) {
        u32 slot_idx = p.count;
        if (slot_idx == p.capacity) p.resize(p.capacity * 2);

        slot = &p.slots[slot_idx];
        memset(slot, 0, sizeof(PointerPoolSlot));
        t.ptr_pool_idx = slot_idx;
        p.count++;
    }

    u32 quals = qt.getQuals();
    Type* ptr = slot.ptrs[quals];
    if (ptr) return ptr;

    ptr = (Type*)PointerType.create(p.context, qt);
    slot.ptrs[quals] = ptr;
    return ptr;
}

