/* Copyright 2022-2025 Bas van den Berg
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

module ast;

import ast_context;
import string_buffer;
import src_loc local;
import number_radix local;

type FloatLiteralBits struct {
    u32 : NumExprBits;
    u32 radix : 2;      // number_radix.Radix enum
    u32 src_len : 32 - NumExprBits - 2;
}

public type FloatLiteral struct @(opaque) {
    Expr base;
    f64 val;
}

public fn FloatLiteral* FloatLiteral.create(ast_context.Context* c, SrcLoc loc, u32 src_len, f64 val, Radix radix) {
    FloatLiteral* i = c.alloc(sizeof(FloatLiteral));
    i.base.init(ExprKind.FloatLiteral, loc, 1, 1, 0, ValType.RValue);
    i.base.base.floatLiteralBits.radix = radix;
    i.base.base.floatLiteralBits.src_len = src_len;
    i.val = val;
#if AstStatistics
    Stats.addExpr(ExprKind.FloatLiteral, sizeof(FloatLiteral));
#endif
    i.base.setType(ast.builtins[BuiltinKind.Float32]);    // TODO or f64

    return i;
}

public fn f64 FloatLiteral.getValue(const FloatLiteral* e) { return e.val; }

public fn SrcLoc FloatLiteral.getEndLoc(const FloatLiteral* e) {
    return e.base.loc + e.base.base.floatLiteralBits.src_len;
}

fn void FloatLiteral.print(const FloatLiteral* e, string_buffer.Buf* out, u32 indent) {
    e.base.printKind(out, indent);
    e.base.printTypeBits(out);
    out.color(col_Value);
    out.space();
    e.printLiteral(out);
    out.newline();
}

public fn void FloatLiteral.printLiteral(const FloatLiteral* e, string_buffer.Buf* out) {
    switch (e.base.base.floatLiteralBits.radix) {
    case Radix.Hex:
        out.print("%a", e.val);
        break;
    default:
        char[32] buf;
        out.add(ftoa(buf, elemsof(buf), e.val));
        break;
    }
}

