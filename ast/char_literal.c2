/* Copyright 2022-2024 Bas van den Berg
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

module ast;

import ast_context;
import string_buffer;
import src_loc local;

type CharLiteralBits struct {
    u32 : NumExprBits;
    u32 value : 8;
    u32 radix : 5;
}

public type CharLiteral struct @(opaque) {
    Expr parent;
}

public fn CharLiteral* CharLiteral.create(ast_context.Context* c, SrcLoc loc, u8 val, u8 radix) {
    CharLiteral* e = c.alloc(sizeof(CharLiteral));
    e.parent.init(ExprKind.CharLiteral, loc, 1, 1, 0, ValType.RValue);
    e.parent.parent.charLiteralBits.value = val;
    e.parent.parent.charLiteralBits.radix = radix;
#if AstStatistics
    Stats.addExpr(ExprKind.CharLiteral, sizeof(CharLiteral));
#endif
    e.parent.setType(builtins[BuiltinKind.Char]);
    return e;
}

public fn char CharLiteral.getValue(const CharLiteral* e) {
    return cast<char>(e.parent.parent.charLiteralBits.value);
}

fn void CharLiteral.print(const CharLiteral* e, string_buffer.Buf* out, u32 indent) {
    e.parent.printKind(out, indent);
    e.parent.printTypeBits(out);
    out.space();
    out.color(col_Value);
    e.printLiteral(out);
    out.newline();
}

public fn void CharLiteral.printLiteral(const CharLiteral* e, string_buffer.Buf* out) {
    u8 c = cast<u8>(e.parent.parent.charLiteralBits.value);

    switch (e.parent.parent.charLiteralBits.radix) {
    case 8:
        out.print("'\\%o'", c);
        return;
    case 16:
        out.print("'\\x%02x'", c);
        return;
    default:
        break;
    }

    switch (c) {
    case '\a':
        out.add("'\\a'");
        break;
    case '\b':
        out.add("'\\b'");
        break;
    case '\f':
        out.add("'\\f'");
        break;
    case '\n':
        out.add("'\\n'");
        break;
    case '\r':
        out.add("'\\r'");
        break;
    case '\t':
        out.add("'\\t'");
        break;
    case '\v':
        out.add("'\\v'");
        break;
    case '\'':
        out.add("'\\''");
        break;
    case '\\':
        out.add("'\\\\'");
        break;
    default:
        out.print("'%c'", c);
        break;
    }
}

