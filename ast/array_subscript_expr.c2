/* Copyright 2022-2025 Bas van den Berg
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

module ast;

import ast_context;
import string_buffer;
import src_loc local;

type ArraySubscriptExprBits struct {
    u32 : NumExprBits;
    u32 src_len : 32 - NumExprBits;
}

public type ArraySubscriptExpr struct @(opaque) {
    // Note: loc is that of left bracket
    Expr base;
    Expr* lhs;
    Expr* idx;
}

public fn ArraySubscriptExpr* ArraySubscriptExpr.create(ast_context.Context* c,
                                                          SrcLoc loc, u32 src_len,
                                                          Expr* lhs,
                                                          Expr* idx)
{
    ArraySubscriptExpr* e = c.alloc(sizeof(ArraySubscriptExpr));
    e.base.init(ExprKind.ArraySubscript, loc, 0, 0, 0, ValType.LValue);
    e.base.base.arraySubscriptExprBits.src_len = src_len;
    e.lhs = lhs;
    e.idx = idx;
#if AstStatistics
    Stats.addExpr(ExprKind.ArraySubscript, sizeof(ArraySubscriptExpr));
#endif
    return e;
}

fn Expr* ArraySubscriptExpr.instantiate(ArraySubscriptExpr* e, Instantiator* inst) {
    return (Expr*)ArraySubscriptExpr.create(inst.c,
                                            e.base.base.loc,
                                            e.base.base.arraySubscriptExprBits.src_len,
                                            e.lhs.instantiate(inst),
                                            e.idx.instantiate(inst));
}

public fn Expr* ArraySubscriptExpr.getBase(const ArraySubscriptExpr* e) { return e.lhs; }
public fn Expr** ArraySubscriptExpr.getBase2(ArraySubscriptExpr* e) { return &e.lhs; }

public fn Expr* ArraySubscriptExpr.getIndex(const ArraySubscriptExpr* e) { return e.idx; }
public fn Expr** ArraySubscriptExpr.getIndex2(ArraySubscriptExpr* e) { return &e.idx; }

fn SrcLoc ArraySubscriptExpr.getStartLoc(const ArraySubscriptExpr* e) {
    return e.getBase().getStartLoc();
}

fn SrcLoc ArraySubscriptExpr.getEndLoc(const ArraySubscriptExpr* e) {
    return e.base.base.loc + e.base.base.arraySubscriptExprBits.src_len;
}

fn void ArraySubscriptExpr.printLiteral(const ArraySubscriptExpr* e, string_buffer.Buf* out) {
    e.lhs.printLiteral(out);
    out.add1('[');
    e.idx.printLiteral(out);
    out.add1(']');
}

fn void ArraySubscriptExpr.print(const ArraySubscriptExpr* e, string_buffer.Buf* out, u32 indent) {
    e.base.printKind(out, indent);
    e.base.printTypeBits(out);
    out.newline();
    e.lhs.print(out, indent + 1);
    e.idx.print(out, indent + 1);
}

