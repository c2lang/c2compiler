/* Copyright 2022-2025 Bas van den Berg
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

module ast;

import ast_context;
import src_loc local;
import string_buffer;

import string;

type CompoundStmtBits struct {
    u32 : NumStmtBits;
    u32 count : 32 - NumStmtBits;
}

public type CompoundStmt struct @(opaque) {
    Stmt base;
    Stmt*[0] stmts; // tail-allocated
}

public fn CompoundStmt* CompoundStmt.create(ast_context.Context* c, SrcLoc endLoc, Stmt** stmts, u32 count) {
    assert(count < 65556);
    u32 size = sizeof(CompoundStmt) + count * sizeof(Stmt*);

    CompoundStmt* s = c.alloc(size);
    s.base.init(StmtKind.Compound, endLoc);
    s.base.compoundStmtBits.count = count;

    if (count) {
        string.memcpy(s.stmts, stmts, count * sizeof(Stmt*));
    }
#if AstStatistics
    Stats.addStmt(StmtKind.Compound, size);
#endif
    return s;
}

fn CompoundStmt* CompoundStmt.instantiate(CompoundStmt* s, Instantiator* inst) {
    const u32 count = s.base.compoundStmtBits.count;
    u32 size = sizeof(CompoundStmt) + count * sizeof(Stmt*);

    CompoundStmt* s2 = inst.c.alloc(size);
    s2.base = s.base;

    for (u32 i=0; i<count; i++) {
        s2.stmts[i] = s.stmts[i].instantiate(inst);
    }
#if AstStatistics
    Stats.addStmt(StmtKind.Compound, size);
#endif
    return s2;
}

public fn u32 CompoundStmt.getCount(const CompoundStmt* s) {
    return s.base.compoundStmtBits.count;
}

public fn Stmt** CompoundStmt.getStmts(CompoundStmt* s) {
    if (s.getCount()) return s.stmts;
    return nil;
}

public fn SrcLoc CompoundStmt.getEndLoc(const CompoundStmt* e) {
    // e.base.loc is the location of the closing brace '}'
    return e.base.loc + 1;
}

fn void CompoundStmt.print(const CompoundStmt* s, string_buffer.Buf* out, u32 indent) {
    s.base.printKind(out, indent);
    out.newline();
    const u32 count = s.base.compoundStmtBits.count;
    for (u32 i=0; i<count; i++) {
        s.stmts[i].print(out, indent + 1);
    }
}


