/* Copyright 2022-2025 Bas van den Berg
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

module manifest;

import component;
import console;
import source_mgr;
import string_list;
import string_pool;
import yaml;

import stdlib;
import stdio local;

fn const yaml.Node* get_checked(yaml.Parser* parser, const char* path) {
    const yaml.Node* node = parser.findNode(path);
    if (!node) {
        // TODO print manifest filename
        fprintf(stderr, "error: missing node %s\n", path);
        stdlib.exit(-1);
    }
    return node;
}

fn bool getYamlInfo(yaml.Parser* parser,
                    string_pool.Pool* astPool,
                    component.Component* comp,
                    string_list.List* mods)
{
    /* const yaml.Node* lib_lang = */ get_checked(parser, "info.language");
    /* const yaml.Node* lib_type = */ get_checked(parser, "info.type");
    const yaml.Node* lib_kinds = get_checked(parser, "info.kinds");
    const yaml.Node* modulesNode = get_checked(parser, "modules");

    yaml.Iter iter = parser.getNodeChildIter(lib_kinds);
    bool kind_dynamic = false;
    bool kind_static = false;
    while (!iter.done()) {
        const char* kind = iter.getValue();
        switch (kind) {
        case "dynamic":
            kind_dynamic = true;
            break;
        case "static":
            kind_static = true;
            break;
        default:
            fprintf(stderr, "error in manifest: invalid library kind '%s'\n", kind);
            stdlib.exit(-1);
        }
        iter.next();
    }
    if (!kind_dynamic && !kind_static) {
        fprintf(stderr, "error in manifest: a library must be dynamic and/or static\n");
        stdlib.exit(-1);
    }

    comp.setKind(kind_static, kind_dynamic);

    iter = parser.getNodeChildIter(modulesNode);
    while (!iter.done()) {
        // Note: module names need to be put in normal pool, NOT auxPool!
        const char* value = iter.getValue();
        assert(value);
        u32 modname = astPool.addStr(value, true);
        mods.add(modname);
        iter.next();
    }

    const char* linkname = parser.getScalarValue("info.linkname");
    if (linkname) comp.setLinkName(linkname);

    const yaml.Node* deps = parser.findNode("dependencies");
    if (deps) {
        iter = parser.getNodeChildIter(deps);
        while (!iter.done()) {
            // Note: for now only handle dynamic (can there be any other?)
            comp.addDep(iter.getName());
            iter.next();
        }
    }

    return true;
}

public fn bool parse(source_mgr.SourceMgr* sm,
                     i32 file_id,
                     string_pool.Pool* astPool,
                     component.Component* comp,
                     string_list.List* mods)
{
    const char* data = sm.get_content(file_id);
    //u32 loc_start = sm.get_offset(file_id);

    yaml.Parser* parser = yaml.Parser.create();

    bool ok = parser.parse(data);
    if (ok) {
        getYamlInfo(parser, astPool, comp, mods);
    } else {
        console.error("%s: %s", sm.getFileName(file_id), parser.getMessage());
    }

    parser.destroy();
    return ok;
}

