/* Copyright 2022-2025 Bas van den Berg
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

module c2recipe;

import string_pool;
import source_mgr;
import src_loc local;
import build_target;

import stdlib;
import string;
#if RecipeDebug
import stdio;
#endif

public type Recipe struct @(opaque) {
    string_pool.Pool* pool;
    source_mgr.SourceMgr* sm;

    build_target.Target** targets;
    u32 num_targets;
    u32 max_targets;

    build_target.PluginList plugins;
}

public fn Recipe* create(source_mgr.SourceMgr* sm, string_pool.Pool* pool) {
    Recipe* r = stdlib.calloc(1, sizeof(Recipe));
    r.sm = sm;
    r.pool = pool;
    r.max_targets = 4;
    r.targets = stdlib.calloc(r.max_targets, sizeof(build_target.Target*));
    r.plugins.init();
    return r;
}

public fn void Recipe.free(Recipe* r) {
    for (u32 i=0; i<r.num_targets; i++) {
        r.targets[i].free();
    }
    stdlib.free(r.targets);
    r.plugins.free();
    stdlib.free(r);
}

// always global
fn void Recipe.addPlugin(Recipe* r, u32 name, u32 options, SrcLoc loc) {
    r.plugins.add(name, options, loc);
}

public fn build_target.Target* Recipe.addTarget(Recipe* r, u32 name, SrcLoc loc, build_target.Kind kind) {
    if (r.num_targets == r.max_targets) {
        r.max_targets *= 2;
        build_target.Target** targets2 = stdlib.malloc(r.max_targets * sizeof(build_target.Target*));
        string.memcpy(targets2, r.targets, r.num_targets * sizeof(build_target.Target*));
        stdlib.free(r.targets);
        r.targets = targets2;
    }
    build_target.Target* t = build_target.create(name, loc, kind, r.pool);
    r.targets[r.num_targets] = t;
    r.num_targets++;
    return t;
}

public fn bool Recipe.parse(Recipe* r, i32 file_id) {
    return Parser.parse(r, r.pool, r.sm, file_id);
}

public fn u32 Recipe.numTargets(const Recipe* r) { return r.num_targets; }

public fn build_target.Target* Recipe.getTarget(const Recipe* r, u32 idx) {
    return r.targets[idx];
}

public fn const build_target.PluginList* Recipe.getPlugins(const Recipe* r) {
    return &r.plugins;
}

#if RecipeDebug
public fn void Recipe.dump(const Recipe* r) {
    stdio.printf("Recipe:\n");
    for (u32 i=0; i<r.num_targets; i++) {
        const Target* t = r.targets[i];
        stdio.printf("  target %s\n", t.name);
        for (u32 j=0; j<t.num_files; j++) {
            File* f = &t.files[j];
            stdio.printf("    %s\n", f.name);
        }
    }
}
#endif

