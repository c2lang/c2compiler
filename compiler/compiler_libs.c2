/* Copyright 2022-2025 Bas van den Berg
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

module compiler;

import ast;
import color;
import component local;
import component_sorter;
import console;
import constants;
import manifest;
import module_list;
import module_sorter;
//import source_mgr;
import string_buffer;
import string_list;
//import string_pool;

import c_errno local;
import libc_dirent local;
import stdio;
import stdlib;
import string;
import sys_stat local;

fn void Compiler.createComponent(Compiler* c, u32 name, bool is_direct, bool is_static) {
    Kind kind = is_static ? Kind.ExternalStatic : Kind.ExternalDynamic;
    Component* comp = component.create(c.context, c.auxPool, &c.allmodules, name, kind, is_direct);
    c.components.add(comp);
}

fn void Compiler.onLib(void* arg, u32 name, bool is_static) {
    Compiler* c = arg;
    if (!is_static && c.is_image) {
        // TODO srcloc
        console.error("images cannot use dynamic libraries");
        stdlib.exit(-1);
    }
    if (c.target.getNoLibC() && name == c.libc_name)  {
        console.error("cannot use libc and have nolibc");
        stdlib.exit(-1);
    }
    c.createComponent(name, true, is_static);
}

fn void Compiler.load_libs(Compiler* c) {
    // create components
    c.target.visitLibs(Compiler.onLib, c);

    if (!c.target.getNoLibC()) {
        if (!c.target.hasLib(c.libc_name)) {
            c.createComponent(c.libc_name, true, false);
        }
    }

    // parse manifests, create modules, create sub-dependencies
    for (u32 i=0; i<c.components.size(); i++) {
        Component* comp = c.components.get(i);
        if (comp.isExternal()) c.open_lib(comp);
    }

    // sort components
    component_sorter.sort(c.components.get_all(), c.components.size(), c.diags);
}

fn Component* Compiler.find_component(Compiler* c, ast.Module* m) {
    for (u32 i=0; i<c.components.size(); i++) {
        Component* co = c.components.get(i);
        if (co.hasModule(m)) return co;
    }
    return nil;
}

// reads the manifest, creates the Component and (empty) Modules
fn void Compiler.open_lib(Compiler* c, Component* comp) {
    const char* libstr = comp.getName();

    console.debug("opening lib %s", libstr);
    char[512] libdir;
    if (!c.find_lib(libstr, libdir)) {
        console.error("cannot find library '%s'", libstr);
        stdlib.exit(-1);
    }

    char[512] fullname;
    stdio.snprintf(fullname, elemsof(fullname), "%s/%s", libdir, constants.manifest_name);
    u32 filename_idx = c.auxPool.addStr(fullname, false);
    i32 file_id = c.sm.open(filename_idx, 0, false);
    if (file_id == -1) return;

    u32 dirname = c.auxPool.addStr(libdir, false);

    comp.setPath(dirname);
    string_list.List mods;
    mods.init(c.astPool);
    bool ok = manifest.parse(c.sm, file_id, c.astPool, comp, &mods);
    if (!ok) {
        stdlib.exit(-1);
    }

    for (u32 i=0; i<mods.length(); i++) {
        u32 mod_name = mods.get_idx(i);
        ast.Module* m = comp.getOrAddModule(mod_name);
        if (!m) {
            m = c.allmodules.find(mod_name);
            Component* other = c.find_component(m);
            assert(other);
            console.error("module '%s' exists in components %s and %s", mods.get(i), other.getName(), comp.getName());
            stdlib.exit(-1);
        }
    }

    mods.free();

    const string_list.List* deps = comp.getDeps();
    for (u32 i=0; i<deps.length(); i++) {
        u32 depname = deps.get_idx(i);
        if (c.has_component(depname)) continue;

        if (c.target.getNoLibC() && depname == c.libc_name)  {
            console.error("cannot use %s since it depends on unused libc", comp.getName());
            stdlib.exit(-1);
        }
        // Note: for now only support dynamic lib dependencies here
        c.createComponent(depname, false, false);
    }

    c.sm.close(file_id);
}

fn bool Compiler.has_component(Compiler* c, u32 name) {
    for (u32 i=0; i<c.components.size(); i++) {
        Component* comp = c.components.get(i);
        if (comp.getNameIdx() == name) return true;
    }
    return false;
}

fn bool Compiler.find_lib(const Compiler* c, const char* libname, char* fullpath) {
    for (u32 i=0; i<c.libdirs.length(); i++) {
        const char* dirname = c.libdirs.get(i);
        stdio.sprintf(fullpath, "%s/%s/%s", dirname, libname, constants.manifest_name);

        Stat statbuf;
        i32 err = stat(fullpath, &statbuf);
        if (!err) {
            stdio.sprintf(fullpath, "%s/%s", dirname, libname);
            return true;
        }
    }
    return false;
}

fn void Compiler.parseExternalModule(void* arg, ast.Module* m) {
    Compiler* c = arg;
    if (!m.isUsed()) return;

    char[512] filename;
    i32 len = stdio.sprintf(filename, "%s/%s.c2i", c.current.getPath(), m.getName());
    u32 name = c.auxPool.add(filename, cast<usize>(len), false);

    i32 file_id = c.sm.open(name, 0, false);
    if (file_id == -1) return;   // note: error already printed

    m.setLoaded();
    console.debug("parsing %s", c.sm.getFileName(file_id));
    c.parser.parse(file_id, true, false);

    c.sm.close(file_id);
}

// parse all used <modules>.c2i
fn void Compiler.parse_lib(Compiler* c, Component* comp) {
    console.debug("parsing component %s", comp.getName());

    c.current = comp;
    c.builder.setComponent(comp);

    c.parse_queue.clear();

    module_list.List* mods = comp.getModules();
    for (u32 i=0; i<mods.length(); i++) {
        ast.Module* m = mods.at(i);
        if (m.isUsed()) c.parse_queue.add(m);
    }

    for (u32 i=0; i<c.parse_queue.length(); i++) {
        ast.Module* m = c.parse_queue.at(i);
        Compiler.parseExternalModule(c, m);
        m.visitImports(Compiler.handleImport, c);
    }
}

// analyze all used <modules>.c2i
fn void Compiler.analyse_lib(Compiler* c, Component* comp) {
    // sort modules
    module_sorter.sort(comp, c.diags);

    // analyse modules
    comp.visitModules(Compiler.analyseUsedModule, c);

    if (c.opts.print_lib_ast) comp.print(true);
}

fn void Compiler.showAllLibs(Compiler* c) {
    string_buffer.Buf* out = string_buffer.create(1024, color.useColor(), 2);
    out.add("libraries:\n");

    bool show_modules = false;
    for (u32 i=0; i<c.libdirs.length(); i++) {
        c.showLibs(out, c.libdirs.get(i), show_modules);
    }

    stdio.puts(out.data());
    out.free();
}

fn void Compiler.showLibs(Compiler* c, string_buffer.Buf* out, const char* dirname, bool show_modules) {
    out.indent(1);
    out.color(color.Blue);
    out.add(dirname);
    out.color(color.Normal);
    out.newline();

    DIR* dir = opendir(dirname);
    if (dir == nil) {
        console.error("cannot open library dir '%s': %s", dirname, string.strerror(errno));
        return;
    }

    char[512] fullname;
    while (Dirent* entry = readdir(dir)) {
        const char* name = entry.d_name;
        if (name[0] != '.' && entry.d_type == DT_DIR) {
            i32 len = stdio.snprintf(fullname, elemsof(fullname), "%s/%s/%s", dirname, name, constants.manifest_name);
            if (len >= elemsof(fullname)) continue;

            Stat statbuf;
            i32 err = stat(fullname, &statbuf);
            if (err) continue;

            u32 filename_idx = c.auxPool.add(fullname, cast<usize>(len), false);

            out.indent(2);
            out.print("%-12s", name);
            {
                i32 file_id = c.sm.open(filename_idx, 0, false);
                if (file_id == -1) return;

                u32 name_idx = c.auxPool.addStr(name, true);
                Component* comp = component.create(c.context,
                                                   c.auxPool,
                                                   &c.allmodules,
                                                   name_idx,
                                                   Kind.ExternalStatic, // doesn't matter
                                                   true);
                string_list.List mods;
                mods.init(c.auxPool);   // need to be astPool, but here it doesn't matter
                manifest.parse(c.sm, file_id, c.astPool, comp, &mods);
                c.components.add(comp);
                mods.free();

                out.add("  ");
                out.color(color.Yellow);
                if (comp.isAvailableStatic()) {
                    out.add("static ");
                } else {
                    out.add("       ");
                }
                if (comp.isAvailableDynamic()) {
                    out.add("dynamic");
                } else {
                    out.add("       ");
                }

                const string_list.List* deps = comp.getDeps();
                u32 num_deps = deps.length();
                if (num_deps) {
                    out.add("  ");
                    out.color(color.Magenta);
                    out.add("requires: ");
                    for (u32 i=0; i<num_deps; i++) {
                        if (i != 0) out.add(", ");
                        out.add(deps.get(i));
                    }
                }

                c.sm.close(file_id);
                out.color(color.Normal);
                out.newline();
            }
        }
    }
    closedir(dir);
}

