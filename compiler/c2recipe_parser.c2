/* Copyright 2022-2025 Bas van den Berg
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

module c2recipe;

import build_target;
import color;
import source_mgr;
import src_loc local;
import string_list;
import string_pool;
import warning_flags;

import std;

type Kind enum u8 {
    // global
    Plugin,
    PluginOptions,
    Text,           // can also be a text number (eg '10')
    Executable,
    Lib,
    Image,
    File,
    End,
    Warnings,
    Backend,
    DisableAsserts,
    NoLibc,
    Config,
    Export,
    Use,
    AsmFile,
    Set,
    SetUse,
    Eof,
}

const char*[] kind_names = {
    "plugin",
    "[plugin_options]",
    "text",
    "executable",
    "lib",
    "image",
    "file",
    "end",
    "$warnings",
    "$backend",
    "$disable-asserts",
    "$nolibc",
    "$config",
    "$export",
    "$use",
    "$asm",
    "set",
    "(set)",
    "eof",
}

static_assert(elemsof(Kind), elemsof(kind_names));

type Token struct {
    SrcLoc loc;
    Kind kind;
    u32 value;  // allocated in StringPool
}

fn void Token.init(Token* t) {
    std.memset(t, 0, sizeof(Token));
}


type Set struct {
    u32 name_idx;       // into aux pool
    SrcLoc loc;

    build_target.File* files;
    u32 num_files;
    u32 max_files;

    Set* next;
}

fn Set* Set.create(u32 name, SrcLoc loc, Set* next) {
    Set* s = std.calloc(1, sizeof(Set));
    s.name_idx = name;
    s.loc = loc;
    s.next = next;

    s.max_files = 8;
    s.files = std.malloc(8*sizeof(build_target.File));
    return s;
}

fn void Set.free(Set* s) {
    std.free(s.files);
    std.free(s);
}

fn bool Set.addFile(Set* s, u32 filename, SrcLoc loc) {
    for (u32 i=0; i<s.num_files; i++) {
        if (s.files[i].name == filename) return false;
    }

    if (s.num_files == s.max_files) {
        s.max_files *= 2;
        build_target.File* files2 = std.malloc(s.max_files * sizeof(build_target.File));
        std.memcpy(files2, s.files, s.num_files * sizeof(build_target.File));
        std.free(s.files);
        s.files = files2;
    }

    s.files[s.num_files].name = filename;
    s.files[s.num_files].loc = loc;
    s.num_files++;
    return true;
}

type Parser struct {
    Recipe* recipe;
    string_pool.Pool* pool;
    source_mgr.SourceMgr* sm;
    string_list.List global_configs;

    const char* input_start;
    const char* cur;
    SrcLoc loc_start;
    std.JmpBufTag jmpbuf;
    Token token;
    bool new_line;
    bool targets_started;
    build_target.Target* target;
    Set* sets;      // Note: will point to current set
}

fn void Parser.free(Parser* p) {
    p.global_configs.free();
    Set* s = p.sets;
    while (s) {
        Set* next = s.next;
        s.free();
        s = next;
    }
}

fn bool Parser.parse(Recipe* recipe, string_pool.Pool* pool, source_mgr.SourceMgr* sm, i32 file_id) {
    const char* data = sm.get_content(file_id);
    Parser p = { }
    p.recipe = recipe;
    p.pool = pool;
    p.sm = sm;
    p.global_configs.init(pool);
    p.input_start = data;
    p.cur = data;
    p.loc_start = sm.get_offset(file_id);
    p.new_line = true;

    p.token.init();

    i32 res = std.setjmp(&p.jmpbuf);
    if (res == 0) {
        p.consumeToken();
        p.parseTop();
    }
    p.free();
    return res == 0;
}

fn bool Parser.addGlobalFeature(Parser* p, u32 feature) {
    if (p.global_configs.contains_idx(feature)) return false;

    p.global_configs.add(feature);
    return true;
}

fn void Parser.error(Parser* p, const char* format @(printf_format), ...) @(noreturn) {
    char[128] msg;
    va_list args;
    va_start(args, format);
    std.vsnprintf(msg, sizeof(msg), format, args);
    va_end(args);

    char[256] locstr;
    p.sm.loc2str(p.token.loc, locstr, elemsof(locstr));

    if (color.useColor()) {
        std.fprintf(std.stderr, "%s: %serror:%s %s\n", locstr, color.Red, color.Normal, msg);
    } else {
        std.fprintf(std.stderr, "%s: error: %s\n", locstr, msg);
    }
    std.longjmp(&p.jmpbuf, 1);
}

fn void Parser.consumeToken(Parser* p) {
    p.lex(&p.token);
#if 0
    char[256] locstr;
    p.sm.loc2str(p.token.loc, locstr, elemsof(locstr));
    printf("  %s   %s", locstr, kind_names[p.token.kind]);
    switch (p.token.kind) {
    case PluginOptions:
    case Text:
    case File:
        printf("  %s", p.pool.idx2str(p.token.value));
        break;
    default:
        break;
    }
    printf("\n");
#endif
}

fn void Parser.expect(Parser* p, Kind kind, const char* msg) {
    if (p.token.kind != kind) p.error("%s", msg);
}

fn bool Parser.is(const Parser* p, Kind kind) {
    return p.token.kind == kind;
}

fn void Parser.lex(Parser* p, Token* result) {
    while (1) {
        //printf("%c\n", *p.cur);
        switch (*p.cur) {
        case 0:
            p.cur--;
            result.loc = p.loc_start + cast<SrcLoc>(p.cur - p.input_start);
            result.kind = Kind.Eof;
            return;
        case ' ':
        case '\t':
        case '\r':
            p.cur++;
            break;
        case '\n':
            p.cur++;
            p.new_line = true;
            break;
        case '#':
            p.skip_comments();
            break;
        case '[':
            p.lex_plugin_options(result);
            p.new_line = false;
            return;
        case '$':
            p.lex_option(result);
            p.new_line = false;
            return;
        case '(':
            p.lex_set_use(result);
            p.new_line = false;
            return;
        case '/':
            // filename
            // lex until whitespace
            const char* start = p.cur;
            while (*p.cur && !std.isspace(*p.cur)) p.cur++;
            result.kind = p.new_line ? Kind.File : Kind.Text;
            if (*p.cur == 0) result.kind = Kind.Eof;
            p.new_line = false;
            u32 len = cast<u32>(p.cur - start);
            result.value = p.pool.add(start, len, true);
            return;
        default:
            if (std.isalnum(*p.cur)) {
                result.loc = p.loc_start + cast<SrcLoc>(p.cur - p.input_start);
                if (equals(p.cur, "plugin ", 7)) {
                    result.kind = Kind.Plugin;
                    p.cur += 7;
                    p.new_line = false;
                    return;
                }
                if (equals(p.cur, "executable ", 11)) {
                    result.kind = Kind.Executable;
                    p.cur += 11;
                    p.new_line = false;
                    return;
                }
                if (equals(p.cur, "lib ", 4)) {
                    result.kind = Kind.Lib;
                    p.cur += 4;
                    p.new_line = false;
                    return;
                }
                if (equals(p.cur, "end", 3)) {
                    result.kind = Kind.End;
                    p.cur += 3;
                    p.new_line = false;
                    return;
                }
                if (equals(p.cur, "image ", 6)) {
                    result.kind = Kind.Image;
                    p.cur += 6;
                    p.new_line = false;
                    return;
                }
                if (equals(p.cur, "config ", 7)) {
                    result.kind = Kind.Config;
                    p.cur += 7;
                    p.new_line = false;
                    return;
                }
                if (equals(p.cur, "set ", 4)) {
                    result.kind = Kind.Set;
                    p.cur += 4;
                    p.new_line = false;
                    return;
                }

                // lex until whitespace
                const char* start = p.cur;
                while (*p.cur && !std.isspace(*p.cur)) p.cur++;
                // TODO check EOF
                result.kind = p.new_line ? Kind.File : Kind.Text;
                p.new_line = false;
                u32 len = cast<u32>(p.cur - start);
                result.value = p.pool.add(start, len, true);
                return;
            }
            result.loc = p.loc_start + cast<SrcLoc>(p.cur - p.input_start);
            p.error("unexpected input '%c'", *p.cur);
            return;
        }
    }
}


fn void Parser.lex_plugin_options(Parser* p, Token* result) {
    p.cur++;
    const char* start = p.cur;
    while (1) {
        if (*p.cur == 0) {
            // TODO give error
            return;
        }
        if (*p.cur == ']') {
            u32 len = cast<u32>(p.cur - start);
            result.loc = p.loc_start + cast<SrcLoc>(start - p.input_start);
            result.kind = Kind.PluginOptions;
            result.value = p.pool.add(start, len, true);
            p.cur++;
            return;
        }
        p.cur++;
    }
}

fn bool is_name(char c) {
    if (c >= 'a' && c <= 'z') return true;
    if (c >= 'A' && c <= 'Z') return true;
    if (c >= '0' && c <= '9') return true;
    if (c == '_') return true;
    return false;
}

fn void Parser.lex_set_use(Parser* p, Token* result) {
    p.cur++;    // skip (

    result.loc = p.loc_start + cast<SrcLoc>(p.cur - p.input_start);

    const char* start = p.cur;
    while (is_name(*p.cur)) p.cur++;

    result.kind = Kind.SetUse;
    u32 len = cast<u32>(p.cur - start);
    if (len == 0) p.error("expected set name");

    result.value = p.pool.add(start, len, true);

    if (*p.cur != ')') {
        result.loc = p.loc_start + cast<SrcLoc>(p.cur - p.input_start);
        p.error("expected ')'");
    }
    p.cur++;
}


fn void Parser.lex_option(Parser* p, Token* result) {
    p.cur++;    // skip $

    result.loc = p.loc_start + cast<SrcLoc>(p.cur - p.input_start);

    const char* end = p.cur;
    while (*end && !std.isspace(*end)) end++;

    u32 len = cast<u32>(end - p.cur);
    if (len >= 20) p.error("unknown option");

    char[24] option;
    std.memcpy(option, p.cur, len);
    option[len] = 0;

    switch (option) {
    case "warnings":
        result.kind = Kind.Warnings;
        break;
    case  "backend":
        result.kind = Kind.Backend;
        break;
    case "disable-asserts":
        result.kind = Kind.DisableAsserts;
        break;
    case "nolibc":
        result.kind = Kind.NoLibc;
        break;
    case "config":
        result.kind = Kind.Config;
        break;
    case "export":
        result.kind = Kind.Export;
        break;
    case "plugin":
        result.kind = Kind.Plugin;
        break;
    case "use":
        result.kind = Kind.Use;
        break;
    case "asm":
        result.kind = Kind.AsmFile;
        break;
    default:
        p.error("unknown option '%s'", option);
        break;
    }
    p.cur += std.strlen(option);
}

fn void Parser.skip_comments(Parser* p) {
    while (*p.cur) {
        if (*p.cur == '\n') return;
        p.cur++;
    }
}

fn void Parser.parseTop(Parser* p) {
    while (1) {
        switch (p.token.kind) {
        case Plugin:
            p.parsePlugin(true);
            break;
        case PluginOptions:
            break;
        case Text:
            break;
        case Executable:
            p.parseExecutable();
            break;
        case Lib:
            p.parseLibrary();
            break;
        case Image:
            p.parseImage();
            break;
        case File:
            p.error("syntax error");
            break;
        case End:
            break;
        case Warnings:
        case Backend:
        case DisableAsserts:
        case NoLibc:
            p.error("must be inside target");
            break;
        case Config:
            if (p.targets_started) p.error("global configs must come before targets");
            p.consumeToken();
            p.expect(Kind.Text, "expect config");
            if (!p.addGlobalFeature(p.token.value)) {
                p.error("duplicate config '%s'", p.pool.idx2str(p.token.value));
            }
            p.consumeToken();
            break;
        case Export:
        case Use:
        case AsmFile:
            p.error("must be inside target");
            break;
        case Set:
            p.parseSet();
            break;
        case SetUse:
            p.error("syntax error");
            break;
        case Eof:
            return;
        }
    }
}

fn void Parser.parsePlugin(Parser* p, bool is_global) {
    p.consumeToken();
    p.expect(Kind.Text, "expect plugin name");
    u32 name = p.token.value;
    SrcLoc loc = p.token.loc;
    p.consumeToken();

    u32 options = 0;
    if (p.token.kind == Kind.PluginOptions) {
        options = p.token.value;
        p.consumeToken();
    }
    if (is_global) {
        p.recipe.addPlugin(name, options, loc);
    } else {
        p.target.addPlugin(name, options, loc);
    }
}

fn void Parser.parseWarnings(Parser* p) {
    p.consumeToken();
    p.expect(Kind.Text, "expect options");
    warning_flags.Flags* warnings = p.target.getWarnings2();
    // TODO no need to store in string pool
    while (p.is(Kind.Text)) {
        const char* option = p.pool.idx2str(p.token.value);
        switch (option) {
        case "no-unused":
            warnings.no_unused = true;
            warnings.no_unused_variable = true;
            warnings.no_unused_function = true;
            warnings.no_unused_parameter = true;
            warnings.no_unused_type = true;
            warnings.no_unused_module = true;
            warnings.no_unused_import = true;
            warnings.no_unused_public = true;
            warnings.no_unused_label = true;
            warnings.no_unused_enum_constant = true;
            break;
        case "no-unused-variable":
            warnings.no_unused_variable = true;
            break;
        case "no-unused-function":
            warnings.no_unused_function = true;
            break;
        case "no-unused-parameter":
            warnings.no_unused_parameter = true;
            break;
        case "no-unused-type":
            warnings.no_unused_type = true;
            break;
        case "no-unused-module":
            warnings.no_unused_module = true;
            break;
        case "no-unused-import":
            warnings.no_unused_import = true;
            break;
        case "no-unused-public":
            warnings.no_unused_public = true;
            break;
        case "no-unused-label":
            warnings.no_unused_label = true;
            break;
        case "no-unused-enum-constant":
            warnings.no_unused_enum_constant = true;
            break;
        case "promote-to-error":
            warnings.are_errors = true;
            break;
        default:
            p.error("unknown warning '%s'", option);
            break;
        }
        p.consumeToken();
    }
}

fn void Parser.parseExecutable(Parser* p) {
    p.consumeToken();
    p.expect(Kind.Text, "expect target name");
    p.target = p.recipe.addTarget(p.token.value, p.token.loc, build_target.Kind.Executable);
    p.consumeToken();

    p.parseTarget();
}

fn void Parser.parseImage(Parser* p) {
    p.consumeToken();
    p.expect(Kind.Text, "expect image name");
    p.target = p.recipe.addTarget(p.token.value, p.token.loc, build_target.Kind.Image);
    p.consumeToken();

    p.parseTarget();
}

fn void Parser.parseSet(Parser* p) {
    p.consumeToken();
    p.expect(Kind.Text, "expect set name");

    Set* old = p.findSet(p.token.value);
    if (old) {
        p.error("duplicate set '%s'", p.pool.idx2str(p.token.value));
    }
    p.sets = Set.create(p.token.value, p.token.loc, p.sets);
    p.consumeToken();

    while (1) {
        switch (p.token.kind) {
        case File:
            if (!p.sets.addFile(p.token.value, p.token.loc)) {
                p.error("duplicate file '%s' in set '%s'", p.pool.idx2str(p.token.value), p.pool.idx2str(p.sets.name_idx));
            }
            p.consumeToken();
            break;
        case End:
            p.consumeToken();
            return;
        default:
            p.error("syntax error");
            break;
        }
    }
}

fn Set* Parser.findSet(Parser* p, u32 name_idx) {
    Set* s = p.sets;
    while (s) {
        if (s.name_idx == name_idx) return s;
        s = s.next;
    }
    return nil;
}

fn void Parser.parseLibrary(Parser* p) {
    p.consumeToken();
    p.expect(Kind.Text, "expect target name");
    u32 name = p.token.value;
    SrcLoc loc = p.token.loc;
    p.consumeToken();
    p.expect(Kind.Text, "expect lib type");
    u32 kind_name = p.token.value;
    build_target.Kind kind = build_target.Kind.StaticLibrary;
    switch (p.pool.idx2str(kind_name)) {
    case "static":
        kind = build_target.Kind.StaticLibrary;
        break;
    case "dynamic":
        kind = build_target.Kind.DynamicLibrary;
        break;
    default:
        p.error("invalid library type (allowed: dynamic|static)");
        break;
    }

    p.consumeToken();

    p.target = p.recipe.addTarget(name, loc, kind);
    p.parseTarget();
}

fn void Parser.parseTarget(Parser* p) {
    p.targets_started = true;
    bool files_started = false;

    // add global configs
    for (u32 i=0; i<p.global_configs.length(); i++) {
        p.target.addFeature(p.global_configs.get_idx(i));
    }

    while (1) {
        switch (p.token.kind) {
        case Plugin:
            p.parsePlugin(false);
            break;
        case PluginOptions:
        case Text:
        case Executable:
        case Lib:
        case Image:
            p.error("syntax error");
            break;
        case File:
            files_started = true;
            if (!p.target.addFile(p.token.value, p.token.loc)) {
                p.error("duplicate file '%s'", p.pool.idx2str(p.token.value));
            }
            p.consumeToken();
            break;
        case End:
            p.consumeToken();
            p.target = nil;
            return;
        case Warnings:
            if (files_started) p.error("$warnings must come before files");
            p.parseWarnings();
            break;
        case Backend:
            if (files_started) p.error("$backend must come before files");
            p.parseBackend();
            break;
        case DisableAsserts:
            if (files_started) p.error("$disable-asserts must come before files");
            p.consumeToken();
            p.target.disableAsserts();
            break;
        case NoLibc:
            if (files_started) p.error("$nolibc must come before files");
            p.consumeToken();
            p.target.setNoLibC();
            break;
        case Config:
            if (files_started) p.error("$config must come before files");
            p.consumeToken();
            p.expect(Kind.Text, "expect config");
            p.target.addFeature(p.token.value);
            // TODO add value
            p.consumeToken();
            break;
        case Export:
            if (files_started) p.error("$export must come before files");
            p.consumeToken();
            p.expect(Kind.Text, "expect export");

            while (p.token.kind == Kind.Text) {
                p.target.addExport(p.token.value);
                p.consumeToken();
            }
            break;
        case Use:
            if (files_started) p.error("$use must come before files");
            p.consumeToken();

            p.expect(Kind.Text, "expect library name");
            u32 libname = p.token.value;
            if (p.target.hasLib(libname)) {
                p.error("duplicate use of %s", p.pool.idx2str(libname));
            }
            p.consumeToken();

            p.expect(Kind.Text, "expect library type");
            bool is_static = false;
            const char* libtype = p.pool.idx2str(p.token.value);
            switch (libtype) {
            case "static":
                is_static = true;
                break;
            case "dynamic":
                break;
            default:
                p.error("unknown library kind '%s'", libtype);
                break;
            }
            p.target.addLib(libname, is_static);
            p.consumeToken();

            while (p.token.kind == Kind.Text) p.consumeToken();
            break;
        case AsmFile:
            if (files_started) p.error("$asm must come before files");
            p.consumeToken();

            p.expect(Kind.Text, "expect filename");
            if (!p.target.addAsmFile(p.token.value, p.token.loc)) {
                p.error("duplicate asm file '%s'", p.pool.idx2str(p.token.value));
            }
            p.consumeToken();
            break;
        case Set:
            p.error("cannot define a set here");
            break;
        case SetUse:
            Set* s = p.findSet(p.token.value);
            if (!s) p.error("unknown set '%s'", p.pool.idx2str(p.token.value));
            p.consumeToken();
            files_started = true;
            for (u32 i=0; i<s.num_files; i++) {
                const build_target.File* f = &s.files[i];
                if (!p.target.addFile(f.name, f.loc)) {
                    p.error("duplicate file '%s' from set '%s'", p.pool.idx2str(f.name), p.pool.idx2str(s.name_idx));
                }
            }
            break;
        case Eof:
            p.error("un-terminated target");
            return;
        }
    }
}

fn void Parser.parseBackend(Parser* p) {
    // syntax: $backend [c/ir] <options>
    p.consumeToken();
    p.expect(Kind.Text, "expect backend type");
    const char* backend_kind = p.pool.idx2str(p.token.value);
    p.consumeToken();

    if (p.target.hasBackEnd()) p.error("duplicate backend");
    switch (backend_kind) {
    case "c":
        p.target.setBackEnd(build_target.BackEndKind.C);
        break;
    case "ir":
        p.target.setBackEnd(build_target.BackEndKind.IR);
        break;
    default:
        p.error("unknown backend type (supported: c,ir)");
        break;
    }
    p.parseBackEndOptions();
}

fn void Parser.parseBackEndOptions(Parser* p) {
    while (p.token.kind == Kind.Text) {
        const char* option = p.pool.idx2str(p.token.value);
        switch (option) {
        case "no-build":
            p.target.setNoBuild();
            break;
        case "fast":
            p.target.setFastBuild();
            break;
        default:
            p.error("invalid backend option '%s'", option);
            break;
        }
        p.consumeToken();
    }
}


fn bool equals(const char* str, const char* expect, u32 len) {
    for (u32 i=0; i<len; i++) {
        if (str[i] != expect[i]) return false;
    }
    return true;
}

