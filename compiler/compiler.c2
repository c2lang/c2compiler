/* Copyright 2022-2025 Bas van den Berg
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

module compiler;

import ast;
import ast_builder;
import ast_context;
import attr_handler;
import build_file;
import build_target;
import c2_parser;
import c_generator;
import c2i_generator;
import color;
import component;
import console;
import constants;
import diagnostics;
import file_utils;
import generator_utils;
import ir_generator;
import keywords;
import module_analyser;
import module_list;
import module_sorter;
import plugin_info;
import source_mgr;
import string_buffer;
import string_list;
import string_pool;
import string_utils;
import target_info;
import unused_checker;
import utils;
import warning_flags;

import c_errno local;
import ctype;
import string;
import stdlib;
import stdio;


public type BeginTargetFn fn void (void* arg, plugin_info.Info* info);
public type PluginFn fn void (void* arg);

public type PluginHandler struct {
    BeginTargetFn start_target;   // before parsing, after creation of output-dir + main-component
    PluginFn after_parsing;       // after parsing, before analysis
    PluginFn after_analysis;      // after analysis
    PluginFn end_target;          // target done
    void* arg;
}

public type Options struct {
    bool check_only;
    bool print_ast;
    bool print_ast_early;
    bool fast_build;
    bool test_mode;
    bool print_lib_ast;
    bool print_modules;
    bool print_symbols;
    bool print_external_symbols;
    bool print_ast_stats;
    u8 print_reports;
    bool show_libs;
    bool print_ir;
    bool print_all_ir;
    bool trace_calls;
    bool asan;
    bool msan;
    bool ubsan;
    const char* libdir; // no ownership, from environment variable C2_LIBDIR
    char *target_triple;
}

public fn void build(string_pool.Pool* auxPool,
                       source_mgr.SourceMgr* sm,
                       diagnostics.Diags* diags,
                       build_file.Info* build_info, // can be nil
                       build_target.Target* target,
                       const Options* opts,
                       string_list.List* features,
                       PluginHandler* pluginHandler)
{
    Compiler c = {}
    plugin_info.Info info = {}

    c.build(auxPool, sm, diags, build_info, target, opts, features, pluginHandler, &info);

    if (opts.print_reports) {
        c.sm.report(opts.print_reports > 1);
        c.context.report();
        c.astPool.report("astPool");
        c.auxPool.report("auxPool");
    }

    diags.printStatus();

    pluginHandler.end_target(pluginHandler.arg);
    ast.deinit(c.opts.print_ast_stats);
    c.free();
}

fn void Compiler.handleModuleImports(void* arg, ast.Module* m) {
    Compiler* c = arg;
    m.visitImports(Compiler.handleImport, c);
}

fn void Compiler.handleImport(void* arg, ast.ImportDecl* id) {
    Compiler* c = arg;

    if (id.getDest()) return;

    ast.Decl* d = (ast.Decl*)id;
    u32 name_idx = d.getNameIdx();
    ast.Module* m = c.allmodules.find(name_idx);
    if (!m) {
        c.diags.error(d.getLoc(), "unknown module: '%s'", ast.idx2name(name_idx));
        return;
    }

    if (!m.isDirect()) {
        component.Component* co = c.find_component(m);
        c.diags.error(d.getLoc(), "module '%s' is in component '%s' that is not used directly",
            ast.idx2name(name_idx), co.getName());
        // TODO longjmp?
        stdlib.exit(-1);
    }

    if (c.current.isExternal() && !m.isLoaded()) {
        //component.Component* co = c.find_component(m);
        if (c.current.hasModule(m)) {
            if (!m.isUsed()) c.parse_queue.add(m);
        } else {
            // otherwise just set used below
        }
    }

    id.setDest(m);
    m.setUsed();
    d.setChecked();
    d.setType(ast.QualType.create((ast.Type*)m.getType()));
}

type Compiler struct {
    string_pool.Pool* auxPool;   // no ownership
    source_mgr.SourceMgr* sm;    // no ownership
    diagnostics.Diags* diags;    // no ownership
    build_file.Info* build_info;    // no ownership, can be nil
    build_target.Target* target;     // no ownership
    const Options* opts;        // no ownership
    target_info.Info targetInfo;

    ast_context.Context* context;
    string_pool.Pool* astPool;
    ast_builder.Builder* builder;
    attr_handler.Handler* attr_handler;
    module_list.List allmodules;
    component.List components;
    keywords.Info kwinfo;
    c2_parser.Parser* parser;
    module_analyser.Analyser* analyser;
    bool is_image; // require build-file, dont allow dynamic libs, dont allow module exports

    component.Component* mainComp;  // no ownership
    u32 main_idx;  // in astPool
    u32 libc_name; // in auxPool
    ast.Decl* mainFunc;

    // used to parse external components
    module_list.List parse_queue;

    string_list.List libdirs;
    component.Component* current; // only set during load() TODO
}

fn component.Kind target2compKind(build_target.Kind k) {
    switch (k) {
    case Image:
        return component.Kind.Image;
    case Executable:
        return component.Kind.Executable;
    case StaticLibrary:
        return component.Kind.StaticLibrary;
    case DynamicLibrary:
        return component.Kind.DynamicLibrary;
    }

    return component.Kind.Executable;
}

const char[] C2_trace @(embed="generator/c2_trace.c2");

fn void Compiler.build(Compiler* c,
                         string_pool.Pool* auxPool,
                         source_mgr.SourceMgr* sm,
                         diagnostics.Diags* diags,
                         build_file.Info* build_info, // can be nil
                         build_target.Target* target,
                         const Options* opts,
                         string_list.List* features,
                         PluginHandler* pluginHandler,
                         plugin_info.Info* info)
{
    // init phase
    string.memset(c, 0, sizeof(Compiler));
    c.auxPool = auxPool;
    c.sm = sm;
    c.diags = diags;
    c.build_info = build_info;
    c.target = target;
    c.opts = opts;

    diags.setWarningAsError(target.getWarnings().are_errors);
    c.diags.clear();

    c.context = ast_context.create(16*1024);
    c.astPool = string_pool.create(128*1024, 4096);

    // Note: keywords must be added first
    c.kwinfo.init(c.astPool);

    c.main_idx = c.astPool.addStr("main", true);
    u32 c2_idx = c.astPool.addStr("c2", true);
    c.libc_name = c.auxPool.addStr("libc", true);

    c.parse_queue.init(false, 64);

    c.attr_handler = attr_handler.create(diags);
    c.builder = ast_builder.create(c.context,
                                   diags,
                                   c.auxPool,
                                   c2_idx,
                                   c.main_idx,
                                   c.attr_handler);

    c.allmodules.init(false, 64);
    c.components.init();
    c.is_image = target.getKind() == build_target.Kind.Image;
    c.libdirs.init(c.auxPool);

    const char* target_str = opts.target_triple;

    const char* output_base = constants.output_dir;
    if (c.build_info) {
        const char* output_dir2 = c.build_info.getOutputDir();
        if (output_dir2) {
            console.debug("using output dir: %s", output_dir2);
            output_base = output_dir2;
        }
    }

    // add output dir as first libdir, unless --showlibs
    if (!opts.show_libs) c.libdirs.add(c.auxPool.addStr(output_base, true));

    if (c.build_info) {
        const string_list.List* dirs = c.build_info.getLibDirs();
        for (u32 i=0; i<dirs.length(); i++) {
            c.libdirs.add(dirs.get_idx(i));
        }
        target_str = c.build_info.getTarget();
    } else {
        if (c.is_image) {
            // TODO src loc
            console.error("images require a build-file");
            stdlib.exit(-1);
        }
        if (c.opts.libdir) {
            // parse into multiple, add each to string-pool
            string_utils.split_paths(c.opts.libdir, c, Compiler.addLibPath);
        }
        c.targetInfo.getNative();
    }
    if (target_str) {
        if (!c.targetInfo.fromString(target_str)) {
            console.error("invalid target triple: %s", target_str);
            stdlib.exit(-1);
        }
    } else {
        c.targetInfo.getNative();
    }
    console.debug("triple: %s", c.targetInfo.str());

    c.addGlobalDefine("SYSTEM", c.targetInfo.getSystemName());
    c.addGlobalDefine("ARCH", c.targetInfo.getArchName());
    if (c.targetInfo.intWidth == 64) {
        c.addFeature("ARCH_64BIT");
    } else {
        c.addFeature("ARCH_32BIT");
    }
    if (opts.asan) c.addFeature("__ASAN__");
    if (opts.msan) c.addFeature("__MSAN__");
    if (opts.ubsan) c.addFeature("__UBSAN__");

    for (u32 i = 0; i < features.length(); i++) {
        c.addFeature(features.get(i));
    }

    c.addFeature("USE_NATIVE_CTYPES");

    target.addLib(c.auxPool.add("c2", 2, true), false);

    c.parser = c2_parser.create(sm,
                                diags,
                                c.astPool,
                                c.builder,
                                &c.kwinfo,
                                target.getFeatures());

    ast.initialize(c.context, c.astPool, c.targetInfo.intWidth / 8, color.useColor());

    c.analyser = module_analyser.create(c.diags,
                                        c.context,
                                        c.astPool,
                                        c.builder,
                                        &c.allmodules,
                                        c.target.getWarnings());

    if (opts.show_libs) {
        c.showAllLibs();
        // since not all members have been initialized, just exit here, to avoid free() not working
        stdlib.exit(0);
    }
    c.load_libs();

    c.mainComp = component.create(c.context,
                                  c.auxPool,
                                  &c.allmodules,
                                  target.getNameIdx(),
                                  target2compKind(target.getKind()),    // TODO make internal
                                  true);
    if (!target.getNoLibC()) c.mainComp.addDep("libc");
    c.components.add(c.mainComp);
    c.builder.setComponent(c.mainComp);

    // prepare info for plugins
    info.sm = sm;
    info.diags = diags;
    info.target = target;
    info.components = &c.components;
    info.ast_globals = ast.getGlobals();
    info.ast_builtins = ast.builtins;
    info.astPool = c.astPool;
    info.auxPool = c.auxPool;
    info.context = c.context;
    info.builder = c.builder;
    info.addSource = Compiler.add_source;
    info.register_attr = Compiler.register_attr;
    info.fn_arg = c;
    string.strcpy(info.target_name, c.auxPool.idx2str(target.getNameIdx()));

    // create output directory
    if (!file_utils.make_path(info.output_dir, elemsof(info.output_dir), output_base, c.auxPool.idx2str(target.getNameIdx()))
    ||  file_utils.create_path(info.output_dir)) {
        console.error("cannot create directory %s: %s", info.output_dir, string.strerror(errno));
        stdlib.exit(-1);
    }

    pluginHandler.start_target(pluginHandler.arg, info);

    // parse non-library files
    console.debug("parsing %s", c.auxPool.idx2str(target.getNameIdx()));
    u64 t1_start = utils.now();
    for (u32 j=0; j<target.numFiles(); j++) {
        const build_target.File* f = target.getFile(j);
        i32 file_id = sm.loadFile(auxPool.idx2str(f.name), f.loc);
        if (file_id == -1) return;   // note: error already printed
        console.debug("parsing %s", sm.getFileName(file_id));

        // parse error indicator updated in c.parser state
        c.parser.parse(file_id, false, false);
    }
    if (c.opts.trace_calls) {
        i32 file_id = sm.addResource("generator/c2_trace.c2", C2_trace, elemsof(C2_trace) - 1);
        if (file_id == -1) return;   // note: error already printed
        console.debug("parsing %s", sm.getFileName(file_id));
        c.parser.parse(file_id, false, false);
    }

    u64 t1_end = utils.now();
    console.log_time("parsing", t1_end - t1_start);
    if (!c.diags.isOk()) return;
#if DumpTokens
    u32 dump_tokens = 1;
    if (dump_tokens)
        return;
#endif

    if (opts.print_ast_early) {
        c.mainComp.print(true);
        return;
    }

    c.builder.setComponent(c.mainComp);
    pluginHandler.after_parsing(pluginHandler.arg);

    u64 t2_start = utils.now();
    // step 1: resolve imports
    c.current = c.mainComp;
    console.debug("analysing imports");
    c.mainComp.visitModules(Compiler.handleModuleImports, c);
    if (!c.diags.isOk()) return;

    // step 2: sort modules inside main component
    console.debug("sorting modules");
    module_sorter.sort(c.mainComp, c.diags);

    // Mark exported modules (cannot be external/C2-module)
    if (!c.check_exports()) return;

    // parse external components top-down (to also mark used modules in lower libs)
    for (u32 i=c.components.size(); i!=0; i--) {
        component.Component* comp = c.components.get(i-1);
        if (!comp.isExternal()) continue;   // only external components

        c.parse_lib(comp);
    }

    // analyse external components bottom up
    for (u32 i=0; i<c.components.size(); i++) {
        component.Component* comp = c.components.get(i);
        console.debug("analysing component %s", comp.getName());
        if (!comp.isExternal()) continue;   // only external components

        c.analyse_lib(comp);
    }

    // analyse all main modules
    c.mainComp.visitModules(Compiler.analyseModule, c);

    if (c.diags.hasErrors()) {
        if (opts.print_ast) c.mainComp.print(true);
        return;
    }

    // mark main module as used (for libs top level module (at least) should be exported)
    c.checkMain();

    // check unused
    const warning_flags.Flags* warnings = c.target.getWarnings();
    if (!warnings.no_unused) {
        c.mainComp.visitModules(Compiler.checkUnused, c);
    }

    u64 t2_end = utils.now();
    console.log_time("analysis", t2_end - t2_start);

    if (!c.diags.isOk()) return;

    c.builder.setComponent(c.mainComp);
    pluginHandler.after_analysis(pluginHandler.arg);

    if (c.opts.print_modules) {
        for (u32 i=0; i<c.components.size(); i++) {
            c.components.get(i).printModules();
        }
        return;
    }

    if (c.opts.print_symbols | c.opts.print_external_symbols) {
        for (u32 i=0; i<c.components.size(); i++) {
            c.components.get(i).printSymbols(c.opts.print_external_symbols);
        }
        return;
    }

    if (opts.print_ast) c.mainComp.print(true);

    if (c.opts.check_only) return;

    // mark toplevel components
    component.Component* mainComp = c.components.getLast();
    generator_utils.mark_used(mainComp, &c.allmodules, c.opts.test_mode);

    if (c.target.getExports().length()) {
        console.debug("generating C2 interfaces");
        u64 gen3 = utils.now();
        c2i_generator.generate(c.astPool, info.output_dir, &c.components);
        u64 gen4 = utils.now();
        console.log_time("C2i generation", gen4 - gen3);
    }

    // NOTE: only 1 backend can consume the AST, since it might change the AST in backend-specific ways

    switch (target.getBackEnd()) {
    case None:
        break;
    case C:
        console.debug("generating C");
        u64 gen3 = utils.now();

        string_list.List asm_files;
        asm_files.init(auxPool);
        for (u32 i=0; i<target.numAsmFiles(); i++) {
            const build_target.File* file = target.getAsmFile(i);
            asm_files.add(file.name);
        }

        c_generator.generate(c.astPool,
                             c.auxPool,
                             info.target_name,
                             target.getKind(),
                             info.output_dir,
                             c.diags,
                             c.sm,
                             c.build_info,
                             &c.targetInfo,
                             &c.components,
                             &c.allmodules,
                             c.mainFunc,
                             &asm_files,
                             c.target.hasAsserts(),
                             c.target.getFastBuild() | c.opts.fast_build,
                             c.opts.asan, c.opts.msan, c.opts.ubsan,
                             c.opts.test_mode, c.opts.trace_calls);
        asm_files.free();
        u64 gen4 = utils.now();
        console.log_time("C generation", gen4 - gen3);

        if (!target.getNoBuild() && !opts.test_mode) {
            console.debug("building C");
            gen3 = utils.now();
            c_generator.build(info.output_dir);
            gen4 = utils.now();
            console.log_time("C compilation", gen4 - gen3);
        }
        break;
    case IR:
        console.debug("generating IR");
        u64 gen3 = utils.now();

        ir_generator.generate(info.target_name,
                              info.output_dir,
                              &c.components,
                              c.sm,
                              &c.targetInfo,
                              c.target.hasAsserts(),
                              c.opts.print_ir,
                              c.opts.print_all_ir);
        u64 gen4 = utils.now();
        console.log_time("IR generation", gen4 - gen3);
        break;
    }
}

fn void Compiler.free(Compiler* c) {
    c.parse_queue.free();
    c.components.free();
    c.analyser.free();
    c.parser.free();
    c.allmodules.free();
    c.builder.free();
    c.attr_handler.free();
    c.astPool.free();
    c.context.free();
    c.libdirs.free();
}

fn void Compiler.add_source(void* arg, const char* name, string_buffer.Buf* content) {
    Compiler* c = arg;
    u32 size;
    void *data = content.detach(&size);
    i32 file_id = c.sm.addGenerated(name, data, size);
    c.parser.parse(file_id, false, true);
}

fn bool Compiler.register_attr(void* arg, u32 name, ast.AttrHandlerFn handler, void* arg2) {
    Compiler* c = arg;
    return c.attr_handler.register(name, handler, arg2);
}

fn bool Compiler.check_exports(Compiler* c) {
    const string_list.List* exports = c.target.getExports();
    for (u32 i = 0; i< exports.length(); i++) {
        const char* name = exports.get(i);  // NOTE: from auxPool!
        u32 name_idx = c.astPool.addStr(name, true);  // put in astPool so we can compare indexes
        ast.Module* m = c.allmodules.find(name_idx);
        if (m) {
            if (m.isExternal()) {
                console.error("cannot export external module %s", name);
                return false;
            }
            m.setExported();
        } else {
            console.error("cannot export %s, no such module", name);
            return false;
        }
    }
    if (c.is_image) {
        // TODO need export location (in recipe)
        if (exports.length()) {
            console.error("images cannot export modules");
            return false;
        }
    }
    return true;
}

fn void Compiler.analyseModule(void* arg, ast.Module* m) {
    Compiler* c = arg;
    console.debug("analysing module %s", m.getName());
    c.analyser.check(m);
}

fn void Compiler.analyseUsedModule(void* arg, ast.Module* m) {
    Compiler* c = arg;
    if (m.isUsed()) {
        c.analyser.check(m);
    }
}

fn void Compiler.findTopModule(void* arg, ast.Module* m) {
    Compiler* c = arg;
    // Note: for now all unused modules are top-levels
    if (m.isUsed()) return;
    if (c.mainFunc) return;

    c.mainFunc = c.analyser.findMain(m, c.main_idx);
}

fn void Compiler.checkUnused(void* arg, ast.Module* m) {
    Compiler* c = arg;
    unused_checker.check(c.diags, c.target.getWarnings(), m);
}

fn void Compiler.checkMain(Compiler* c) {
    c.mainComp.visitModules(Compiler.findTopModule, c);
    if (c.target.needsMain()) {
        if (!c.mainFunc) {
            if (!c.opts.test_mode) c.diags.error(0, "no 'main' function found");

            return;
        }

        if (!c.mainFunc.isPublic()) {
            c.diags.error(c.mainFunc.getLoc(), "function 'main' should be declared public");
            return;
        }

        ast.FunctionDecl* main = (ast.FunctionDecl*)c.mainFunc;

        if (!main.hasReturn()) {
            c.diags.error(c.mainFunc.getLoc(), "function 'main' should return 'i32'");
            return;
        }

        ast.QualType rtype = main.getRType();
        ast.BuiltinType* bi = rtype.getBuiltin();
        if (!rtype.isBuiltin() || !bi.isInt32()) {
            c.diags.error(c.mainFunc.getLoc(), "function 'main' should return 'i32'");
            return;
        }

    } else {
        if (c.mainFunc) {
            c.diags.error(c.mainFunc.getLoc(), "libraries cannot have a 'main' function");
        }
    }
}

fn void Compiler.addFeature(Compiler* c, const char* str) {
    c.target.addFeature(c.auxPool.addStr(str, true));
}

fn void Compiler.addGlobalDefine(Compiler* c, const char* prefix, const char* tail) {
    char[32] tmp;
    stdio.snprintf(tmp, elemsof(tmp), "%s_%s", prefix, tail);
    for (usize i = 0; tmp[i]; i++) {
        u8 ch = (u8)tmp[i];
        tmp[i] = (ch == '-') ? '_' : (char)ctype.toupper(ch);
    }

    c.addFeature(tmp);
}

// NOTE: paths are not 0-terminated
fn void Compiler.addLibPath(void* arg, const char* path, u32 len) {
    Compiler* c = arg;
    u32 path_idx = c.auxPool.add(path, len, true);
    //stdio.printf("PATH [%s]\n", c.auxPool.idx2str(path_idx));
    c.libdirs.add(path_idx);
}

