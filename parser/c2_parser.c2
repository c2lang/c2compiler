/* Copyright 2022-2025 Bas van den Berg
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

module c2_parser;

import ast_builder local;
import ast local;
import attr;
import c2_tokenizer;
import color;
import constants;
import diagnostics;
import keywords;
import parser_utils;
import source_mgr local;
import src_loc local;
import string_buffer;
import string_list;
import string_pool;
import token local;
#if DumpTokens
import utils;
#endif

import stdarg local;
import stdlib local;
import csetjmp local;
import ctype local;
import stdio local;

public type Parser struct @(opaque) {
    c2_tokenizer.Tokenizer tokenizer;
    Token tok;
    SrcLoc prev_loc;
    i32 file_id;

    SourceMgr* sm;
    diagnostics.Diags* diags;
    string_pool.Pool* pool;
    Builder* builder;
    const string_list.List* features;
    const keywords.Info* kwinfo;
    bool is_interface;

    JmpBufTag jmpbuf;
    char[constants.MaxMultiString] multi_string;
}

public fn Parser* create(SourceMgr* sm,
                           diagnostics.Diags* diags,
                           string_pool.Pool* pool,
                           ast_builder.Builder* builder,
                           const keywords.Info* kwinfo,
                           const string_list.List* features)
{
    Parser* p = calloc(1, sizeof(Parser));
    p.sm = sm;
    p.diags = diags;
    p.pool = pool;
    p.builder = builder;
    p.features = features;
    p.kwinfo = kwinfo;
    return p;
}

public fn void Parser.free(Parser* p) {
    free(p);
}

public fn void Parser.parse(Parser* p, i32 file_id, bool is_interface, bool is_generated) {
    p.file_id = file_id;
    p.is_interface = is_interface;

    string_buffer.Buf* buf = string_buffer.create(1024, 0, false);
#if DumpTokens
    u64 t1 = utils.now();
    p.tokenizer.init(p.pool,
                     buf,
                     p.sm.get_content(p.file_id),
                     p.sm.get_offset(p.file_id),
                     p.kwinfo,
                     p.features,
                     true);
    p.tok.init();
    u32 token_count = 0;
    while (!p.tok.done) {
        p.tokenizer.lex(&p.tok);
        p.dump_token(&p.tok);
        p.tok.has_error = 0;
        token_count++;
    }
    u64 t2 = utils.now();
    printf("--- %d tokens (%d usec) ---\n", token_count, t2 - t1);
#else
    i32 res = setjmp(&p.jmpbuf);
    if (res == 0) {

        p.tokenizer.init(p.pool,
                         buf,
                         p.sm.get_content(p.file_id),
                         p.sm.get_offset(p.file_id),
                         p.kwinfo,
                         p.features,
                         false);
        p.tok.init();

        p.consumeToken();

        p.parseModule(is_generated);
        p.parseImports();

        while (!p.tok.done) {
            p.parseTopLevel();
        }
    }
#endif
    buf.free();
    // TODO: decommission p.tokenizer
}

fn void Parser.consumeToken(Parser* p) {
    p.prev_loc = p.tok.loc;
    p.tokenizer.lex(&p.tok);

    // p.dump_token(&p.tok);

    if (p.tok.has_error) {
        if (p.tok.kind == Kind.Error)
            p.error("%s", p.tok.error_msg);
        p.diags.error(p.tok.loc, "%s", p.tokenizer.error_msg);
        p.tok.has_error = false;
    }
}

fn void Parser.expectAndConsume(Parser* p, Kind kind) {
    if (p.tok.kind == kind) {
        p.consumeToken();
        return;
    }

    // Use previous token to position where we expect something
    if (p.prev_loc) {
        const char* src = p.sm.get_token_source(p.prev_loc);
        SrcLoc loc = parser_utils.getTokenEnd(src, p.prev_loc);
        p.tok.loc = loc;    // get position after current
    }
    if (p.tok.loc == 0) {
        // just point to start of file (happens on empty file)
        p.tok.loc = p.sm.get_offset(p.file_id);
    }
    p.error("expected '%s'", kind.str());
}

fn void Parser.expect(Parser* p, Kind kind) {
    if (p.tok.kind == kind) return;

    // Use previous token to position where we expect something
    if (p.prev_loc) {
        const char* src = p.sm.get_token_source(p.prev_loc);
        SrcLoc loc = parser_utils.getTokenEnd(src, p.prev_loc);
        p.tok.loc = loc;    // get position after current
    }
    if (p.tok.loc == 0) {
        // just point to start of file (happens on empty file)
        p.tok.loc = p.sm.get_offset(p.file_id);
    }
    p.error("expected '%s'", kind.str());
}

fn void Parser.expectIdentifier(Parser* p) {
    if (p.tok.kind == Kind.Identifier) return;

    p.error("expected identifier");
}

fn void Parser.error(Parser* p, const char* format @(printf_format), ...) @(noreturn) {
    char[256] msg;

    Va_list args;
    va_start(args, format);
    vsnprintf(msg, sizeof(msg)-1, format, args);
    va_end(args);
    p.diags.error(p.tok.loc, "%s", msg);

    longjmp(&p.jmpbuf, 1);
}

fn void Parser.parseModule(Parser* p, bool is_generated) {
    p.expectAndConsume(Kind.KW_module);
    p.expectIdentifier();

    const char*modname = p.pool.idx2str(p.tok.name_idx);
    if (ctype.isupper(modname[0])) {
        p.error("a module name must start with a lower case character");
    }
    p.builder.actOnModule(p.tok.name_idx,
                          p.tok.loc,
                          p.sm.getFileNameIdx(p.file_id),
                          is_generated);
    p.consumeToken();
    p.expectAndConsume(Kind.Semicolon);
}

fn void Parser.parseImports(Parser* p) {
    while (p.tok.kind == Kind.KW_import) {
        p.consumeToken();
        p.expectIdentifier();
        u32 mod_name = p.tok.name_idx;
        SrcLoc mod_loc = p.tok.loc;

        u32 alias_name = 0;
        SrcLoc alias_loc = 0;
        p.consumeToken();
        if (p.tok.kind == Kind.KW_as) {
            p.consumeToken();
            p.expectIdentifier();
            alias_name = p.tok.name_idx;
            alias_loc = p.tok.loc;

            if (!checkName(p.pool.idx2str(alias_name), false)) {
                p.error("a module name must start with a lower case character");
            }
            p.consumeToken();
        }
        bool islocal = false;
        if (p.tok.kind == Kind.KW_local) {
            p.consumeToken();
            islocal = true;
        }
        p.expectAndConsume(Kind.Semicolon);

        p.builder.actOnImport(mod_name, mod_loc, alias_name, alias_loc, islocal);
    }
}

fn void Parser.parseTopLevel(Parser* p) {
    p.builder.clearAttributes();

    bool is_public = p.parseOptionalAccessSpecifier();
    switch (p.tok.kind) {
        case KW_assert:
            p.error("assert can only be used inside a function");
            break;
        case KW_fn:
            p.parseFuncDecl(is_public);
            break;
        case KW_import:
            p.error("no imports allowed after declarations");
            break;
        case KW_static_assert:
            if (is_public) p.error("static_assert cannot be public");
            p.parseStaticAssert();
            break;
        case KW_type:
            p.parseTypeDecl(is_public);
            break;
        case Eof:
            break;
        case Identifier:
            Token next = p.tokenizer.lookahead(1);
            if (next.kind == Kind.PlusEqual) {
                if (is_public) p.error("incremental array entries cannot be public");
                p.parseArrayEntry();
                break;
            }
            fallthrough;
        default:
            p.parseVarDecl(is_public);
            break;
    }
}

/* Syntax:
   Attributes ::= @(AttrList)
   AttrList   ::= AttrList, Attr
                  Attr
   Attr       ::= name
                  name="value"
                  name=<number>
*/
fn void Parser.parseOptionalAttributes(Parser* p) {
    if (p.tok.kind != Kind.At) return;
    p.consumeToken();

    p.expectAndConsume(Kind.LParen);

    while (1) {
        p.expectIdentifier();
        attr.Attr a;
        a.name = p.tok.name_idx;
        a.loc = p.tok.loc;
        a.value_kind = attr.ValueKind.None;
        p.consumeToken();

        if (p.tok.kind == Kind.Equal) {
            p.consumeToken();
            a.value.loc = p.tok.loc;
            switch (p.tok.kind) {
            case StringLiteral:
                a.value_kind = attr.ValueKind.String;
                a.value.text = p.tok.text_idx;
                if (p.tok.text_len == 0) {
                    p.error("attribute argument cannot be an empty string");
                }
                p.consumeToken();
                break;
            case IntegerLiteral:
                a.value_kind = attr.ValueKind.Number;
                // TODO: either check overflow or make it 64-bit
                a.value.number = cast<u32>(p.tok.int_value);
                p.consumeToken();
                break;
            default:
                p.error("expected attribute argument");
                return;
            }
        }

        p.builder.actOnAttr(&a);

        if (p.tok.kind != Kind.Comma) break;
        p.consumeToken();
    }

    p.expectAndConsume(Kind.RParen);
}

fn void Parser.parseParamOptionalAttributes(Parser* p, VarDecl* d) {
    if (p.tok.kind != Kind.At) return;
    p.consumeToken();

    p.expectAndConsume(Kind.LParen);

    while (1) {
        p.expectIdentifier();
        u32 attr_id = p.tok.name_idx;
        SrcLoc loc = p.tok.loc;
        p.consumeToken();

        if (p.tok.kind == Kind.Equal) {
            p.error("a parameter attribute cannot have a value");
        }

        p.builder.actOnParamAttr(d, attr_id, loc);

        if (p.tok.kind != Kind.Comma) break;
        p.consumeToken();
    }

    p.expectAndConsume(Kind.RParen);
}

fn void Parser.parseFuncDecl(Parser* p, bool is_public) {
    p.consumeToken();

    TypeRefHolder rtype;
    rtype.init();
    // Note: dont check arrays in this phase, but in Analyser
    p.parseTypeSpecifier(&rtype, true, true);

    p.expectIdentifier();
    u32 func_name = p.tok.name_idx;
    SrcLoc func_loc = p.tok.loc;
    p.consumeToken();

    Ref prefix_ref;
    Ref* prefix = nil;
    if (p.tok.kind == Kind.Dot) {
        p.consumeToken();
        p.expectIdentifier();

        prefix_ref.loc = func_loc;
        prefix_ref.name_idx = func_name;
        prefix_ref.decl = nil;
        prefix = &prefix_ref;
        func_name = p.tok.name_idx;
        func_loc = p.tok.loc;
        p.consumeToken();
    }

    if (!checkName(p.pool.idx2str(func_name), p.is_interface)) {
        p.tok.loc = func_loc;   // reset to correct value for error
        p.error("a function name must start with a lower case character");
    }

    DeclList params;
    params.init(4);

    bool is_variadic = p.parseFunctionParams(&params, is_public);

    FunctionDecl* f;
    if (p.tok.kind == Kind.KW_template) {
        p.consumeToken();
        p.expectIdentifier();

        u32 template_name = p.tok.name_idx;
        SrcLoc template_loc = p.tok.loc;
        p.consumeToken();
        // TODO parse multiple template args

        f = p.builder.actOnTemplateFunctionDecl(func_name,
                                                func_loc,
                                                is_public,
                                                &rtype,
                                                template_name,
                                                template_loc,
                                                cast<VarDecl**>(params.getDecls()),
                                                params.size(),
                                                is_variadic);
    } else {
        f = p.builder.actOnFunctionDecl(func_name,
                                        func_loc,
                                        is_public,
                                        &rtype,
                                        prefix,
                                        cast<VarDecl**>(params.getDecls()),
                                        params.size(),
                                        is_variadic);
    }

    params.free();

    p.parseOptionalAttributes();
    p.builder.applyAttributes(cast<Decl*>(f));

    if (p.is_interface && p.tok.kind == Kind.Semicolon) {
        // function without body (eg. i32 printf(..); ) is allowed
        p.consumeToken();
        return;
    }

    if (p.is_interface) {
        // mark functions with bodies in interface files as 'inline'
        f.setAttrInline();
    }
    CompoundStmt* body = p.parseCompoundStmt();
    p.builder.actOnFunctionBody(f, body);
}

fn bool Parser.parseFunctionParams(Parser* p, DeclList* params, bool is_public) {
    p.expectAndConsume(Kind.LParen);

    // fast path for ()
    if (p.tok.kind == Kind.RParen) {
        p.consumeToken();
        return false;
    }

    bool is_variadic = false;

    // VarDeclList args
    while (1) {
        VarDecl* decl = p.parseParamDecl(is_public);
        params.add(decl.asDecl());

        if (p.tok.kind != Kind.Comma) break;
        p.consumeToken();

        if (p.tok.kind == Kind.Ellipsis) {
            is_variadic = true;
            p.consumeToken();
            break;
        }
    }

    p.expectAndConsume(Kind.RParen);
    return is_variadic;
}

/*
   Syntax:
    param_declaration ::= type_qualifier type_specifier IDENTIFIER param_default.
    param_default ::= EQUALS constant_expression.
*/
fn VarDecl* Parser.parseParamDecl(Parser* p, bool is_public) {
    if (p.tok.kind == Kind.KW_local) p.error("keyword 'local' is not allowed here");

    TypeRefHolder ref;
    ref.init();
    // Note: dont check arrays in this phase, but in Analyser
    p.parseTypeSpecifier(&ref, true, true);

    u32 name = 0;
    SrcLoc loc = p.tok.loc;
    if (p.tok.kind == Kind.Identifier) {
        name = p.tok.name_idx;

        if (!checkName(p.pool.idx2str(name), p.is_interface)) {
            p.error("a parameter name must start with a lower case character");
        }
        p.consumeToken();
    }

    if (p.tok.kind == Kind.Equal) {
        p.error("default parameter values are not allowed");
    }

    VarDecl* param = p.builder.actOnFunctionParam(name, loc, is_public, &ref);

    p.parseParamOptionalAttributes(param);

    return param;
}

fn void Parser.parseTypeSpecifier(Parser* p,
                                  TypeRefHolder* ref,
                                  bool allow_qualifier,
                                  bool allow_array) {
    p.parseSingleTypeSpecifier(ref, allow_qualifier);
    p.parseOptionalArray(ref, QualType_Invalid, allow_array);
}

fn void Parser.parseOptionalArray(Parser* p,
                                  TypeRefHolder* ref,
                                  QualType base,
                                  bool allow_array) {
    if (p.tok.kind != Kind.LSquare) return;

    if (!allow_array) p.error("array types are not allowed here");

    if (ref.getNumArrays() == 3) p.error("arrays cannot have more than 3 dimensions");
    if (ref.isIncrArray()) p.error("incremental arrays cannot have more than 1 dimension");

    p.consumeToken();

    //bool is_incremental = false;

    // NOTE: 'inverse' order, so char[2][4] -> 2 x ( 4 x char )

    Expr* size = nil;
    if (p.tok.kind == Kind.RSquare) {
        // []
        ref.addArray(nil);
        p.consumeToken();
    } else if (p.tok.kind == Kind.Plus) {
        // [+]
        if (ref.getNumArrays()) p.error("incremental arrays cannot have more than 1 dimension");
        p.consumeToken();
        ref.setIncrArray();
        //is_incremental = true;
        p.expectAndConsume(Kind.RSquare);
    } else {
        // [<expr>]
        size = p.parseExpr();
        ref.addArray(size);
        p.expectAndConsume(Kind.RSquare);
    }

    p.parseOptionalArray(ref, base, true);
}

fn void Parser.parseArrayEntry(Parser* p) {
    // Syntax: name += <expr>
    u32 name = p.tok.name_idx;
    SrcLoc loc = p.tok.loc;
    p.consumeToken();
    p.consumeToken();   // +=
    bool need_semi = true;
    Expr* initValue = p.parseInitValue(&need_semi, false);
    if (need_semi) p.expectAndConsume(Kind.Semicolon);

    p.builder.actOnArrayValue(name, loc, initValue);
}

fn void Parser.parseVarDecl(Parser* p, bool is_public) {
    if (p.tok.kind == Kind.KW_local) p.error("keyword 'local' cannot be used at file scope");

    TypeRefHolder ref;
    ref.init();
    p.parseTypeSpecifier(&ref, true, true);
    p.expectIdentifier();

    u32 name = p.tok.name_idx;
    SrcLoc loc = p.tok.loc;
    p.consumeToken();

    bool need_semi = true;
    Expr* initValue = nil;
    SrcLoc assignLoc = 0;

    p.parseOptionalAttributes();

    if (p.tok.kind == Kind.Equal) {
        assignLoc = p.tok.loc;
        p.consumeToken();
        initValue = p.parseInitValue(&need_semi, false);
    }

    if (need_semi) p.expectAndConsume(Kind.Semicolon);

    Decl* d = p.builder.actOnGlobalVarDecl(name, loc, is_public, &ref, assignLoc, initValue);
    p.builder.applyAttributes(d);
}

fn void Parser.parseStaticAssert(Parser* p) {
    SrcLoc loc = p.tok.loc;
    p.consumeToken();

    p.expectAndConsume(Kind.LParen);
    Expr* lhs = p.parseExpr();
    p.expectAndConsume(Kind.Comma);
    Expr* rhs = p.parseExpr();
    p.expectAndConsume(Kind.RParen);
    p.expectAndConsume(Kind.Semicolon);
    p.builder.actOnStaticAssert(loc, lhs, rhs);
}

fn bool Parser.parseOptionalAccessSpecifier(Parser* p) {
    if (p.tok.kind == Kind.KW_public) {
        p.consumeToken();
        return true;
    }
    return false;
}

fn u32 Parser.parseOptionalTypeQualifier(Parser* p) {
    u32 qualifiers = 0;
    if (p.tok.kind == Kind.KW_const) {
        p.consumeToken();
        qualifiers |= QualType_Const;
    }
    if (p.tok.kind == Kind.KW_volatile) {
        p.consumeToken();
        qualifiers |= QualType_Volatile;
    }
    return qualifiers;
}

// Note: first index is KW_bool, last KW_void
const BuiltinKind[] Tok2builtin = {
    BuiltinKind.Bool,       // KW_bool
    BuiltinKind.Char,       // KW_char
    BuiltinKind.Int8,       // KW_i8
    BuiltinKind.Int16,      // KW_i16
    BuiltinKind.Int32,      // KW_i32
    BuiltinKind.Int64,      // KW_i64
    BuiltinKind.UInt8,      // KW_u8
    BuiltinKind.UInt16,     // KW_u16
    BuiltinKind.UInt32,     // KW_u32
    BuiltinKind.UInt64,     // KW_u64
    BuiltinKind.UInt8,      // KW_reg8
    BuiltinKind.UInt16,     // KW_reg16
    BuiltinKind.UInt32,     // KW_reg32
    BuiltinKind.UInt64,     // KW_reg64
    BuiltinKind.ISize,      // KW_isize
    BuiltinKind.USize,      // KW_usize
    BuiltinKind.Float32,    // KW_f32
    BuiltinKind.Float64,    // KW_f64
    BuiltinKind.Void,       // KW_void
}

fn BuiltinKind tokKindToBuiltinKind(token.Kind kind) {
    return Tok2builtin[kind - Kind.KW_bool];
}

fn void Parser.parseSingleTypeSpecifier(Parser* p, TypeRefHolder* ref, bool allow_qualifier) {
    if (allow_qualifier) {
        // TODO give error if we get a qualifier
        u32 type_qualifier = p.parseOptionalTypeQualifier();
        ref.setQualifiers(type_qualifier);
    }

    Kind kind = p.tok.kind;

    if (kind >= Kind.KW_bool && kind <= Kind.KW_void) {
        ref.setBuiltin(tokKindToBuiltinKind(p.tok.kind), p.tok.loc);
        if (kind >= Kind.KW_reg8 && kind <= Kind.KW_reg64) ref.setVolatile();
        p.consumeToken();
    } else if (kind == Kind.Identifier) {
        p.parseFullTypeIdentifier(ref);
    } else {
        p.error("expected type specifier");
    }

    // TODO: handle qualified pointers
    u32 depth = 0;
    while (p.tok.kind == Kind.Star) {
        depth++;
        if (depth > 3) p.error("pointers have a maximum nesting of 3");
        ref.addPointer();
        p.consumeToken();
    }
}

// Syntax:
//   identifier
//   identifier.identifier
fn void Parser.parseFullTypeIdentifier(Parser* p, TypeRefHolder* ref) {
    ref.setUser(p.tok.loc, p.tok.name_idx);
    p.consumeToken();

    if (p.tok.kind == Kind.Dot) {
        p.consumeToken();
        p.expectIdentifier();
        ref.setPrefix(p.tok.loc, p.tok.name_idx);
        p.consumeToken();
    }
}

// TODO: should be a Tokenizer function
fn void Parser.dump_token(Parser* p, const Token* tok) @(unused) {
    if (is_keyword(tok.kind)) {
        printf("%s%12s%s  %6d %s",
            color.Green, tok.kind.str(), color.Normal, tok.loc, p.sm.loc2str(tok.loc));
    } else {
        printf("%12s  %6d %s  ", tok.kind.str(), tok.loc, p.sm.loc2str(tok.loc));
    }

    switch (tok.kind) {
    case Identifier:
        printf("  %s%s%s", color.Cyan, p.pool.idx2str(tok.name_idx), color.Normal);
        break;
    case IntegerLiteral:
        switch (tok.radix) {
        case Default:
            printf("  %s%d%s", color.Cyan, tok.int_value, color.Normal);
            break;
        case Hex:
            printf("  %s0x%x%s", color.Cyan, tok.int_value, color.Normal);
            break;
        case Octal:
            printf("  %s0%o%s", color.Cyan, tok.int_value, color.Normal);
            break;
        case Binary:
            printf("  %s0b%b%s", color.Cyan, tok.int_value, color.Normal);
            break;
        }
        break;
    case FloatLiteral:
        switch (tok.radix) {
        case Hex:
            printf("  %s%a%s", color.Cyan, tok.float_value, color.Normal);
            break;
        default:
            char[32] buf;
            printf("  %s%s%s", color.Cyan, ftoa(buf, elemsof(buf), tok.float_value), color.Normal);
            break;
        }
        break;
    case CharLiteral:
        switch (tok.radix) {
        case Hex:
            printf("  %s'\\x%02x'%s", color.Cyan, tok.char_value, color.Normal);
            break;
        case Octal:
            printf("  %s'\\%o'%s", color.Cyan, tok.char_value, color.Normal);
            break;
        default:
            if (isprint(tok.char_value)) {
                printf("  %s'%c'%s", color.Cyan, tok.char_value, color.Normal);
            } else {
                // TODO print nicely (eg \n etc)
                printf("  %s(%d)%s", color.Cyan, tok.char_value, color.Normal);
            }
            break;
        }
        break;
    case StringLiteral:
        p.tokenizer.buf.clear();
        p.tokenizer.buf.encodeBytes(p.pool.idx2str(tok.text_idx), tok.text_len, '"');
        printf("  %s\"%s\"%s (len %d)",
            color.Cyan, p.tokenizer.buf.data(), color.Normal, tok.text_len);
        break;
    case LineComment:
        printf("  '%s%s%s'", color.Cyan, p.pool.idx2str(tok.text_idx), color.Normal);
        break;
    case BlockComment:
        printf("  '%s%s%s'", color.Cyan, p.pool.idx2str(tok.text_idx), color.Normal);
        break;
    case Warning:
        printf("  %s%s%s", color.Yellow, tok.error_msg, color.Normal);
        break;
    case Error:
        printf("  %s%s%s", color.Red, tok.error_msg, color.Normal);
        break;
    default:
        break;
    }
    if (tok.has_error && tok.kind != Kind.Error) {
        printf("   %s%s%s", color.Red, p.tokenizer.error_msg, color.Normal);
    }
    printf("\n");
}

fn bool checkName(const char* name, bool is_interface) {
    if (is_interface) return true;
    char c = name[0];
    if (islower(c)) return true;
    return false;
}


