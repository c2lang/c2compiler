/* Copyright 2022-2025 Bas van den Berg
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

module c2_parser;

import stmt_list;
import case_list;
import identifier_expr_list;
import ast local;
import token local;
import src_loc local;

fn Stmt* Parser.parseSwitchStmt(Parser* p) {
    SrcLoc loc = p.tok.loc;
    p.consumeToken();

    p.expectAndConsume(Kind.LParen);

    if (p.isDeclaration()) {
        p.error("declarations inside a switch condition are not allowed");
    }
    Expr* cond = p.parseExpr();

    p.expectAndConsume(Kind.RParen);

    p.expectAndConsume(Kind.LBrace);

    // TODO: potential memory leak on error
    case_list.List cases;
    cases.init();

    while (p.tok.kind != Kind.RBrace) {
        SwitchCase* c = nil;
        switch (p.tok.kind) {
        case KW_case:
            c = p.parseCase(false);
            break;
        case KW_default:
            c = p.parseCase(true);
            break;
        default:
            p.error("expected 'case' or 'default' keyword");
            break;
        }
        cases.add(c);
    }

    p.expectAndConsume(Kind.RBrace);

    Stmt* s = p.builder.actOnSwitchStmt(loc, cond, cases.getData(), cases.size());
    cases.free();
    return s;
}

fn Expr* Parser.parseCaseCondition(Parser* p, identifier_expr_list.List* list) {
    // TODO: parse constant expression, not just single token.
    bool multi_case = false;
    if (p.tok.kind == Kind.Identifier) {
        Token t2 = p.tokenizer.lookahead(1);
        if (t2.kind == Kind.Comma || t2.kind == Kind.Range) multi_case = true;
    }

    if (!multi_case) {
        Expr* e;
        switch (p.tok.kind) {
            case Identifier:
                e = p.parseFullIdentifier();
                break;
            case IntegerLiteral:
                e = p.builder.actOnIntegerLiteral(p.tok.loc, p.tok.radix, p.tok.int_value);
                p.consumeToken();
                break;
            case CharLiteral:
                e = p.builder.actOnCharLiteral(p.tok.loc, p.tok.char_value, p.tok.radix);
                p.consumeToken();
                break;
            case StringLiteral:
                e = p.parseStringLiteral();
                break;
            case Plus:
                e = p.parseExpr();
                break;
            case Minus:
                e = p.parseExpr();
                break;
            case KW_nil:
                e = p.builder.actOnNilExpr(p.tok.loc);
                p.consumeToken();
                break;
            default:
                p.error("expected case condition");
                return nil;
        }
        if (p.tok.kind == Kind.Comma || p.tok.kind == Kind.Range) {
            p.error("multi-condition case statements are only allowed with unprefixed enum constants");
        }
        return e;
    }

    while (1) {
        // TODO accept general ranges: expr1 ... expr1 and let analyser check if expr1 <= expr2
        p.expectIdentifier();

        IdentifierExpr* id1 = p.parseIdentifier();
        if (!list.add(id1)) p.error("too many conditions");

        if (p.tok.kind == Kind.Range) { // A .. C
            p.consumeToken();
            p.expectIdentifier();
            IdentifierExpr* id2 = p.parseIdentifier();
            id1.setCaseRange();
            if (!list.add(id2)) p.error("too many conditions");
        }

        if (p.tok.kind == Kind.Colon) break;

        p.expectAndConsume(Kind.Comma);
    }
    return nil;
}

fn SwitchCase* Parser.parseCase(Parser* p, bool is_default) {
    SrcLoc loc = p.tok.loc;
    p.consumeToken();

    Expr* cond = nil;

    identifier_expr_list.List list;
    list.init();
    if (!is_default) {
        cond = p.parseCaseCondition(&list);
    }

    p.expectAndConsume(Kind.Colon);

    stmt_list.List stmts;
    stmts.init();

    bool more = true;
    while (more) {
        switch (p.tok.kind) {
        case RBrace:
        case KW_case:
        case KW_default:
            more = false;
            break;
        default:
            stmts.add(p.parseStmt());
            break;
        }
    }

    SwitchCase* s = p.builder.actOnCase(loc, is_default, cond, &list, stmts.getData(), stmts.size());
    stmts.free();
    return s;
}

