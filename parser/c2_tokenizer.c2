/* Copyright 2022-2025 Bas van den Berg
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

module c2_tokenizer;

import c2_keywords;
import constants;
import src_loc local;
import string_buffer;
import string_list;
import string_pool;
import token local;

import string;
import stdlib;
import c2 local;
import ctype local;
import stdarg local;
import stdio;

public const u32 MaxLookahead = 64;  // must be multiple of 2

type Action enum u8 {
    INVALID = 0,  // ensure the default Action in Char_lookup is INVALID
    TABSPACE,
    IDENT,
    DIGIT,
    LPAREN,
    RPAREN,
    LSQUARE,
    RSQUARE,
    NEWLINE,
    EXCLAIM,
    DQUOTE,
    SQUOTE,
    POUND,
    STAR,
    PLUS,
    MINUS,
    COMMA,
    DOT,
    PERCENT,
    SLASH,
    COLON,
    SEMI_COLON,
    LESS,
    EQUAL,
    GREATER,
    QUESTION,
    AT,
    AMP,
    CARET,
    LBRACE,
    RBRACE,
    PIPE,
    TILDE,
    CR,
    EOF,
}

const Action[256] Char_lookup = {
// 0 - 15
   [  0]  = Action.EOF,
   ['\t'] = Action.TABSPACE,
   ['\n'] = Action.NEWLINE,
   ['\r'] = Action.CR,
// 16 - 31
// 32 - 47
    [' '] = Action.TABSPACE,
    ['!'] = Action.EXCLAIM,
    ['"'] = Action.DQUOTE,
    ['#'] = Action.POUND,
    ['%'] = Action.PERCENT,
    ['&'] = Action.AMP,
   ['\''] = Action.SQUOTE,
    ['('] = Action.LPAREN,
    [')'] = Action.RPAREN,
    ['*'] = Action.STAR,
    ['+'] = Action.PLUS,
    [','] = Action.COMMA,
    ['-'] = Action.MINUS,
    ['.'] = Action.DOT,
    ['/'] = Action.SLASH,
// 48 - 63
    ['0'] = Action.DIGIT,
    ['1'] = Action.DIGIT,
    ['2'] = Action.DIGIT,
    ['3'] = Action.DIGIT,
    ['4'] = Action.DIGIT,
    ['5'] = Action.DIGIT,
    ['6'] = Action.DIGIT,
    ['7'] = Action.DIGIT,
    ['8'] = Action.DIGIT,
    ['9'] = Action.DIGIT,
    [':'] = Action.COLON,
    [';'] = Action.SEMI_COLON,
    ['<'] = Action.LESS,
    ['='] = Action.EQUAL,
    ['>'] = Action.GREATER,
    ['?'] = Action.QUESTION,
// 64 - 79
    ['@'] = Action.AT,
    ['A'] = Action.IDENT,
    ['B'] = Action.IDENT,
    ['C'] = Action.IDENT,
    ['D'] = Action.IDENT,
    ['E'] = Action.IDENT,
    ['F'] = Action.IDENT,
    ['G'] = Action.IDENT,
    ['H'] = Action.IDENT,
    ['I'] = Action.IDENT,
    ['J'] = Action.IDENT,
    ['K'] = Action.IDENT,
    ['L'] = Action.IDENT,
    ['M'] = Action.IDENT,
    ['N'] = Action.IDENT,
    ['O'] = Action.IDENT,
// 80 - 95
    ['P'] = Action.IDENT,
    ['Q'] = Action.IDENT,
    ['R'] = Action.IDENT,
    ['S'] = Action.IDENT,
    ['T'] = Action.IDENT,
    ['U'] = Action.IDENT,
    ['V'] = Action.IDENT,
    ['W'] = Action.IDENT,
    ['X'] = Action.IDENT,
    ['Y'] = Action.IDENT,
    ['Z'] = Action.IDENT,
    ['['] = Action.LSQUARE,
    ['\\'] = Action.TABSPACE, // only in skipped parts, treat as whitespace
    [']'] = Action.RSQUARE,
    ['^'] = Action.CARET,
    ['_'] = Action.IDENT,   // for parsing libs
// 96 - 111
    ['a'] = Action.IDENT,
    ['b'] = Action.IDENT,
    ['c'] = Action.IDENT,
    ['d'] = Action.IDENT,
    ['e'] = Action.IDENT,
    ['f'] = Action.IDENT,
    ['g'] = Action.IDENT,
    ['h'] = Action.IDENT,
    ['i'] = Action.IDENT,
    ['j'] = Action.IDENT,
    ['k'] = Action.IDENT,
    ['l'] = Action.IDENT,
    ['m'] = Action.IDENT,
    ['n'] = Action.IDENT,
    ['o'] = Action.IDENT,
// 112 -] 127
    ['p'] = Action.IDENT,
    ['q'] = Action.IDENT,
    ['r'] = Action.IDENT,
    ['s'] = Action.IDENT,
    ['t'] = Action.IDENT,
    ['u'] = Action.IDENT,
    ['v'] = Action.IDENT,
    ['w'] = Action.IDENT,
    ['x'] = Action.IDENT,
    ['y'] = Action.IDENT,
    ['z'] = Action.IDENT,
    ['{'] = Action.LBRACE,
    ['|'] = Action.PIPE,
    ['}'] = Action.RBRACE,
    ['~'] = Action.TILDE,
}

const u8[256] Identifier_char = {
    ['0'] = 1,
    ['1'] = 1,
    ['2'] = 1,
    ['3'] = 1,
    ['4'] = 1,
    ['5'] = 1,
    ['6'] = 1,
    ['7'] = 1,
    ['8'] = 1,
    ['9'] = 1,
    ['A'] = 1,
    ['B'] = 1,
    ['C'] = 1,
    ['D'] = 1,
    ['E'] = 1,
    ['F'] = 1,
    ['G'] = 1,
    ['H'] = 1,
    ['I'] = 1,
    ['J'] = 1,
    ['K'] = 1,
    ['L'] = 1,
    ['M'] = 1,
    ['N'] = 1,
    ['O'] = 1,
    ['P'] = 1,
    ['Q'] = 1,
    ['R'] = 1,
    ['S'] = 1,
    ['T'] = 1,
    ['U'] = 1,
    ['V'] = 1,
    ['W'] = 1,
    ['X'] = 1,
    ['Y'] = 1,
    ['Z'] = 1,
    ['_'] = 1,
    ['a'] = 1,
    ['b'] = 1,
    ['c'] = 1,
    ['d'] = 1,
    ['e'] = 1,
    ['f'] = 1,
    ['g'] = 1,
    ['h'] = 1,
    ['i'] = 1,
    ['j'] = 1,
    ['k'] = 1,
    ['l'] = 1,
    ['m'] = 1,
    ['n'] = 1,
    ['o'] = 1,
    ['p'] = 1,
    ['q'] = 1,
    ['r'] = 1,
    ['s'] = 1,
    ['t'] = 1,
    ['u'] = 1,
    ['v'] = 1,
    ['w'] = 1,
    ['x'] = 1,
    ['y'] = 1,
    ['z'] = 1,
}

public type Feature struct {
    SrcLoc loc;     // location of the initial #if/#ifdef...
    Kind kind;      // preprocessor token kind
    u8 skipping;  // 0: parse, 1: skip, 2: skip until #endif
    bool is_else;   // inside the #else block
}

public type Tokenizer struct {
    const char* cur;
    SrcLoc loc_start;
    const char* input_start;

    const c2_keywords.Info* kwinfo;
    Token[MaxLookahead] next;
    u32 next_count;
    u32 next_head;  // index of next token (circular index into next)
    const char* line_start;

    string_pool.Pool* pool; // no ownership
    string_buffer.Buf* buf; // no ownership, used for multi-strings: "a" "b" "c"

    // Feature handling
    Feature[constants.MaxFeatureDepth+1] feature_stack;
    u32 feature_count;
    const string_list.List* features;
    bool raw_mode;  // also emit comments

    char[256] error_msg;
}

public fn void Tokenizer.init(Tokenizer* t,
                              string_pool.Pool* pool,
                              string_buffer.Buf* buf,
                              const char* input,
                              SrcLoc loc_start,
                              const c2_keywords.Info* kwinfo,
                              const string_list.List* features,
                              bool raw_mode)
{
    t.cur = input;
    t.loc_start = loc_start;
    t.input_start = input;
    t.kwinfo = kwinfo;

    for (u32 i=0; i<MaxLookahead; i++) {
        t.next[i].init();
    }
    t.next_count = 0;
    t.next_head = 0;
    t.line_start = input;
    t.pool = pool;
    t.buf = buf;

    string.memset(&t.feature_stack, 0, sizeof(t.feature_stack));
    t.feature_count = 0;
    t.features = features;
    t.raw_mode = raw_mode;
    t.error_msg[0] = 0;
}

public fn void Tokenizer.lex(Tokenizer* t, Token* result) {
    if (t.next_count) {
        string.memcpy(result, &t.next[t.next_head], sizeof(Token));

        t.next_head = (t.next_head + 1) % MaxLookahead;
        t.next_count--;
        return;
    }
    t.lex_internal(result);
}

fn void Tokenizer.lex_internal(Tokenizer* t, Token* result) {
    // TODO if end/error stop (dont retry) (t.done = 1)

    while (1) {
        result.loc = t.loc_start + cast<SrcLoc>(t.cur - t.input_start);
        Action act = Char_lookup[cast<u8>(*t.cur)];
        switch (act) {
        case INVALID:
            const char *endp = nil;
            if ((*t.cur & 0x80) && decode_utf8(t.cur, &endp) >= 0) {
                // FIXME: should accept BOM \uFEFF (EF BB BF) at start of file?
                t.error(result, "Unicode (UTF-8) is only allowed inside string literals or comments");
                return;
            }
            if (*t.cur >= ' ' && *t.cur < 0x7F)
                t.error(result, "invalid char '%c'", *t.cur);
            else
                t.error(result, "invalid char 0x%02X", *t.cur & 0xFF);
            return;
        case TABSPACE:
            t.cur++;
            while (*t.cur == ' ')
                t.cur++;
            continue;
        case IDENT:
            t.lex_identifier(result);
            if (result.text_idx <= t.kwinfo.max_index) {
                Kind k = t.kwinfo.indexes[result.text_idx];
                assert(k != Kind.None);
                result.kind = k;    // turn into keyword
            }
            return;
        case DIGIT:
            t.lex_number(result);
            return;
        case LPAREN:
            result.kind = Kind.LParen;
            t.cur++;
            return;
        case RPAREN:
            result.kind = Kind.RParen;
            t.cur++;
            return;
        case LSQUARE:
            result.kind = Kind.LSquare;
            t.cur++;
            return;
        case RSQUARE:
            result.kind = Kind.RSquare;
            t.cur++;
            return;
        case NEWLINE:
            t.cur++;
            t.line_start = t.cur;
            continue;
        case EXCLAIM:
            t.cur++;
            if (*t.cur == '=') {
                result.kind = Kind.ExclaimEqual;
                t.cur++;
            } else {
                result.kind = Kind.Exclaim;
            }
            return;
        case DQUOTE:
            t.lex_string_literal(result);
            return;
        case SQUOTE:
            t.lex_char_literal(result);
            return;
        case POUND:
            if (t.lex_feature_cmd(result)) return;
            if (!t.is_enabled()) {
                if (t.skip_feature(result)) return;
            }
            continue;
        case STAR:
            t.cur++;
            if (*t.cur == '=') {
                result.kind = Kind.StarEqual;
                t.cur++;
            } else {
                result.kind = Kind.Star;
            }
            return;
        case PLUS:
            t.cur++;
            if (*t.cur == '+') {
                t.cur++;
                result.kind = Kind.PlusPlus;
                return;
            }
            if (*t.cur == '=') {
                t.cur++;
                result.kind = Kind.PlusEqual;
                return;
            }
            result.kind = Kind.Plus;
            return;
        case MINUS:
            t.cur++;
            if (*t.cur == '-') {
                t.cur++;
                result.kind = Kind.MinusMinus;
                return;
            }
            if (*t.cur == '=') {
                t.cur++;
                result.kind = Kind.MinusEqual;
                return;
            }
            if (*t.cur == '>') {
                t.cur--;
                t.error(result, "use the dot operators instead of '->'");
                return;
            }
            result.kind = Kind.Minus;
            return;
        case COMMA:
            result.kind = Kind.Comma;
            t.cur++;
            return;
        case DOT:
            t.cur++;
            if (t.cur[0] == '.') {
                if (t.cur[1] == '.') {
                    t.cur += 2;
                    result.kind = Kind.Ellipsis;
                } else {
                    t.cur++;
                    result.kind = Kind.Range;
                }
            } else if (isdigit(t.cur[0])) {
                t.lex_number(result);
            } else {
                result.kind = Kind.Dot;
            }
            return;
        case PERCENT:
            t.cur++;
            if (*t.cur == '=') {
                result.kind = Kind.PercentEqual;
                t.cur++;
            } else {
                result.kind = Kind.Percent;
            }
            return;
        case SLASH:
            t.cur++;
            if (*t.cur == '=') {
                result.kind = Kind.SlashEqual;
                t.cur++;
                return;
            }
            if (*t.cur == '/') {
                if (t.lex_line_comment(result)) return;
                continue;
            }
            if (*t.cur == '*') {
                if (t.lex_block_comment(result)) return;
                continue;
            }
            result.kind = Kind.Slash;
            return;
        case COLON:
            result.kind = Kind.Colon;
            t.cur++;
            return;
        case SEMI_COLON:
            result.kind = Kind.Semicolon;
            t.cur++;
            return;
        case LESS:
            t.cur++;
            if (*t.cur == '=') {
                t.cur++;
                result.kind = Kind.LessEqual;
                return;
            }
            if (*t.cur == '<') {
                t.cur++;
                if (*t.cur == '=') {
                    t.cur++;
                    result.kind = Kind.LessLessEqual;
                } else {
                    result.kind = Kind.LessLess;
                }
                return;
            }
            result.kind = Kind.Less;
            return;
        case EQUAL:
            t.cur++;
            if (*t.cur == '=') {
                result.kind = Kind.EqualEqual;
                t.cur++;
            } else {
                result.kind = Kind.Equal;
            }
            return;
        case GREATER:
            t.cur++;
            if (*t.cur == '=') {
                t.cur++;
                result.kind = Kind.GreaterEqual;
                return;
            }
            if (*t.cur == '>') {
                t.cur++;
                if (*t.cur == '=') {
                    t.cur++;
                    result.kind = Kind.GreaterGreaterEqual;
                } else {
                    result.kind = Kind.GreaterGreater;
                }
                return;
            }
            result.kind = Kind.Greater;
            return;
        case QUESTION:
            result.kind = Kind.Question;
            t.cur++;
            return;
        case AT:
            result.kind = Kind.At;
            t.cur++;
            return;
        case AMP:
            t.cur++;
            if (*t.cur == '&') {
                result.kind = Kind.AmpAmp;
                t.cur++;
                return;
            }
            if (*t.cur == '=') {
                result.kind = Kind.AmpEqual;
                t.cur++;
                return;
            }
            result.kind = Kind.Amp;
            return;
        case CARET:
            t.cur++;
            if (*t.cur == '=') {
                t.cur++;
                result.kind = Kind.CaretEqual;
                return;
            }
            result.kind = Kind.Caret;
            return;
        case LBRACE:
            result.kind = Kind.LBrace;
            t.cur++;
            return;
        case RBRACE:
            result.kind = Kind.RBrace;
            t.cur++;
            return;
        case PIPE:
            t.cur++;
            if (*t.cur == '|') {
                result.kind = Kind.PipePipe;
                t.cur++;
                return;
            }
            if (*t.cur == '=') {
                result.kind = Kind.PipeEqual;
                t.cur++;
                return;
            }
            result.kind = Kind.Pipe;
            return;
        case TILDE:
            result.kind = Kind.Tilde;
            t.cur++;
            return;
        case CR:
            t.cur++;
            if (*t.cur != '\n') {
                t.error(result, "unexpected character 0x%02X after CR", *t.cur & 0xFF);
                return;
            }
            t.cur++;
            return;
        case EOF:
            if (t.feature_count) {
                Feature* top = &t.feature_stack[t.feature_count];
                t.cur = t.input_start + (top.loc - t.loc_start);
                t.error(result, "un-terminated %s", kind2str(top.kind));
                return;
            }
            // point to last byte in file
            result.loc -= 1;
            result.kind = Kind.Eof;
            result.more = false;
            return;
        }
    }
}

public fn Token Tokenizer.lookahead(Tokenizer* t, u32 n) {
    assert(n > 0);
    assert(n <= MaxLookahead);
    while (t.next_count < n) {
        const u32 slot = (t.next_head + t.next_count) % MaxLookahead;
        t.lex_internal(&t.next[slot]);
        t.next_count++;
    }

    u32 slot = (t.next_head + n - 1) % MaxLookahead;
    return t.next[slot];
}

public fn u32 Tokenizer.get_indent(const Tokenizer* t, const Token* tok) {
    if (tok.loc <= t.loc_start) return 0;
    u32 offset = tok.loc - t.loc_start;
    const char* cp = t.input_start + offset;
    u32 indent = 0;
    while (cp > t.input_start) {
        if (*cp == '\n') break;
        cp--;
        indent++;
    }
    return indent -1;
}

fn void Tokenizer.error(Tokenizer* t, Token* result, const char* format @(printf_format), ...) {
    Va_list args;
    va_start(args, format);
    vsnprintf(t.error_msg, sizeof(t.error_msg), format, args);
    va_end(args);

    // XXX: error position should be passed separately from token start
    result.loc = t.loc_start + cast<SrcLoc>(t.cur - t.input_start);
    result.kind = Kind.Error;
    result.error_msg = t.error_msg;
    result.more = false;
    result.has_error = true;
}

// generate an error but keep parsing
fn void Tokenizer.num_error(Tokenizer* t, Token* result, const char* p, const char* format @(printf_format), ...) {
    Va_list args;
    va_start(args, format);
    vsnprintf(t.error_msg, sizeof(t.error_msg), format, args);
    va_end(args);

    // XXX: error position should be passed separately from token start
    result.loc = t.loc_start + cast<SrcLoc>(p - t.input_start);
    result.has_error = true;
    // read the rest of the pp-number token
    for (;;) {
        if ((*p == 'e' || *p == 'E' || *p == 'p' || *p == 'P') && (p[1] == '+' || p[1] == '-')) {
            p += 2;
        } else
        if (*p == '\'' && isalnum(p[1])) {
            p += 2;
        } else
        if (isalnum(*p) || *p == '_' || (*p == '.' && p[1] != '.')) {
            p++;
        } else {
            break;
        }
    }
    t.cur = p;
}

fn void Tokenizer.lex_identifier(Tokenizer* t, Token* result) {
    result.kind = Kind.Identifier;
    const char* start = t.cur;
    const char* end = t.cur + 1;
    while (Identifier_char[cast<u8>(*end)]) end++;

    usize len = cast<usize>(end - start);
    if (len > constants.MaxIdentifierLen) {
        t.error(result, "identifier too long (max %d chars)", constants.MaxIdentifierLen);
        return;
    }
    t.cur += len;
    result.text_idx = t.pool.add(start, len, true);
}

fn u8 hex2val(char c) {
    if (c >= '0' && c <= '9') return cast<u8>(c - '0');
    if (c >= 'a' && c <= 'f') return cast<u8>(c - 'a' + 10);
    return cast<u8>(c - 'A' + 10);
}

fn bool is_octal(char c) {
    return (c >= '0' && c <= '7');
}

fn bool is_binary(char c) {
    return (c >= '0' && c <= '1');
}

fn void Tokenizer.lex_number_error(Tokenizer* t, Token* result, const char *p, const char *qual) {
    if (isdigit(*p)) {
        t.num_error(result, p, "invalid digit '%c' in %s constant", *p, qual);
        return;
    }
    if (*p == '_') {
        t.num_error(result, p, "digit separator '%c' not surrounded by digits", *p);
        return;
    }
    if (isalpha(*p)) {
        t.num_error(result, p, "invalid character '%c' in %s constant", *p, qual);
        return;
    }
    t.num_error(result, p, "missing digits in %s constant", qual);
}

fn void Tokenizer.lex_number(Tokenizer* t, Token* result) {
    result.kind = Kind.IntegerLiteral;
    result.radix = 10;
    result.int_value = 0;
    const char* start = t.cur;
    const char* p = start;
    u64 value = 0;
    bool overflow = false;

    if (p[0] == '0') {
        if (p[1] == 'x' || p[1] == 'X') {  // hexadecimal
            result.radix = 16;
            p += 2;
            if (isxdigit(*p)) {
                while (isxdigit(*p)) {
                    if (value > max_u64 >> 4) {
                        value = max_u64;
                        overflow = true;
                    } else {
                        value = (value << 4) + hex2val(*p);
                    }
                    p++;
                    if (*p == '_' && isxdigit(p[1]))
                        p++;
                }
                if (*p == 'p' || *p == 'P' || (*p == '.' && p[1] != '.')) {
                    t.lex_floating_point_hex(result, start);
                    return;
                }
            } else {
                if (*p == '.' && p[1] != '.' && isxdigit(p[1])) {
                    t.lex_floating_point_hex(result, start);
                    return;
                }
            }
            if (*p == '_' || isalpha(*p) || p == start + 2) {
                t.lex_number_error(result, p, "hexadecimal");
                return;
            }
            goto check_overflow;
        }
        if (p[1] == 'b' || p[1] == 'B') {   // binary
            result.radix = 2;
            p += 2;
            while (is_binary(*p)) {
                if (value > max_u64 >> 1) {
                    value = max_u64;
                    overflow = true;
                } else {
                    value = (value << 1) + (*p - '0');
                }
                p++;
                if (*p == '_' && isdigit(p[1]))
                    p++;
            }
            if (*p == '_' || isalnum(*p) || p == start + 2) {
                t.lex_number_error(result, p, "binary");
                return;
            }
            goto check_overflow;
        }
        // FIXME: should support 0o1234

        while (is_octal(*p)) {
            if (value > max_u64 >> 3) {
                value = max_u64;
                overflow = true;
            } else {
                value = (value << 3) + (*p - '0');
            }
            p++;
            if (*p == '_' && isdigit(p[1]))
                p++;
        }
        const char *p0 = p;
        if (isdigit(*p)) {
            // skip digits to check for floating point constant
            while (isdigit(*p) || (*p == '_' && isdigit(p[1])))
                p++;
        }
        if (*p == 'e' || *p == 'E' || (*p == '.' && p[1] != '.')) {
            t.lex_floating_point(result, start);
            return;
        }
        p = p0;
        if (*p == '_' || isalnum(*p)) {
            t.lex_number_error(result, p, "octal");
            return;
        }
        t.cur = p;
        if (p == start + 1) {
            // value is 0, radix = 10
            return;
        }
        result.radix = 8;
        goto check_overflow;
    }

    while (isdigit(*p)) {
        // ugly cast because u8 digit = *p++ - '0'; generates an error
        u32 digit = cast<u32>(*p++ - '0');
        if (value >= max_u64 / 10 && (value > max_u64 / 10 || digit > max_u64 % 10)) {
            value = max_u64;
            overflow = true;
        } else {
            value = value * 10 + digit;
        }
        if (*p == '_' && isdigit(p[1]))
            p++;
    }
    if (*p == 'e' || *p == 'E' || (*p == '.' && p[1] != '.')) {
        t.lex_floating_point(result, start);
        return;
    }
    if (*p == '_' || isalpha(*p)) {
        t.lex_number_error(result, p, "decimal");
        return;
    }
check_overflow:
    t.cur = p;
    result.int_value = value;
    if (overflow) {
        t.num_error(result, p, "integer literal is too large to be represented in any integer type");
        return;
    }
}

fn void Tokenizer.lex_floating_point(Tokenizer* t, Token* result, const char* start) {
    char[4096] buf;
    const char* p = start;
    usize pos = 0;
    u8 seen_dot = 0;
    result.kind = Kind.FloatLiteral;
    result.float_value = 0;
    for (;;) {
        if (!isdigit(*p)) {
            if (*p == '_' && isdigit(p[1]))
                p++;
            else
            if (*p != '.' || seen_dot++)
                break;
        }
        buf[pos++] = *p++;
        if (pos == elemsof(buf))
            goto too_large;
    }
    if (*p == 'e' || *p == 'E') {
        if (pos >= elemsof(buf) - 2)
            goto too_large;
        buf[pos++] = *p++;
        if (*p == '+' || *p == '-')
            buf[pos++] = *p++;
        if (!isdigit(*p)) {
            t.num_error(result, p, "invalid exponent in floating point constant");
            return;
        }
        while (isdigit(*p)) {
            buf[pos++] = *p++;
            if (pos == elemsof(buf))
                goto too_large;
            if (*p == '_' && isdigit(p[1]))
                p++;
        }
    }
    if (*p == '_' || isalpha(*p)) {
        t.lex_number_error(result, p, "floating point");
        return;
    }
    t.cur = p;
    buf[pos] = '\0';
    result.float_value = stdlib.strtod(buf, nil);
    return;
too_large:
    t.num_error(result, p, "floating point constant too large");
    return;
}

fn void Tokenizer.lex_floating_point_hex(Tokenizer* t, Token* result, const char* start) {
    char[4096] buf;
    const char* p = start;
    usize pos = 0;
    u8 seen_dot = 0;
    result.kind = Kind.FloatLiteral;
    result.float_value = 0;
    if (*p == '0' && (p[1] == 'x' || p[1] == 'X')) {
        buf[pos++] = *p++;
        buf[pos++] = *p++;
    }
    for (;;) {
        if (!isxdigit(*p)) {
            if (*p == '_' && isxdigit(p[1]))
                p++;
            else
            if (*p != '.' || seen_dot++)
                break;
        }
        buf[pos++] = *p++;
        if (pos == elemsof(buf))
            goto too_large;
    }
    if (*p == 'p' || *p == 'P') {
        if (pos >= elemsof(buf) - 2)
            goto too_large;
        buf[pos++] = *p++;
        if (*p == '+' || *p == '-')
            buf[pos++] = *p++;
        if (!isdigit(*p)) {
            t.num_error(result, p, "invalid exponent in floating point constant");
            return;
        }
        while (isdigit(*p)) {
            buf[pos++] = *p++;
            if (pos == elemsof(buf))
                goto too_large;
            if (*p == '_' && isdigit(p[1]))
                p++;
        }
    } else {
        t.num_error(result, p, "hexadecimal floating constant requires an exponent");
        return;
    }
    if (*p == '_' || isalpha(*p)) {
        t.lex_number_error(result, p, "floating point");
        return;
    }
    t.cur = p;
    buf[pos] = '\0';
    // FIXME: do not use strtod() on platforms that do not support the syntax
    result.float_value = stdlib.strtod(buf, nil);
    return;
too_large:
    t.num_error(result, p, "floating point constant too large");
    return;
}

// Returns how much to shift in source code (0 = error)
fn u32 Tokenizer.lex_escaped_char(Tokenizer* t, Token* result) {
    // Note: t.cur is on '\'
    const char* input = t.cur + 1;  // skip backspace
    switch (input[0]) {
    case '"':
        result.char_value = '"';
        break;
    case '\'':
        result.char_value = '\'';
        break;
    case '?':
        result.char_value = '\?';
        break;
    case '\\':
        result.char_value = '\\';
        break;
    case 'a':
        result.char_value = '\a';
        break;
    case 'b':
        result.char_value = '\b';
        break;
    case 'f':
        result.char_value = '\f';
        break;
    case 'n':
        result.char_value = '\n';
        break;
    case 'r':
        result.char_value = '\r';
        break;
    case 't':
        result.char_value = '\t';
        break;
    case 'u':
        t.error(result, "unicode escape sequences not supported yet");
        return 0;
    case 'v':
        result.char_value = '\v';
        break;
    case 'x':
        if (!isxdigit(input[1])) {
            t.cur++;
            t.error(result, "expect hexadecimal number after '\\x'");
            return 0;
        }
        // C consumes all hex digits after \x (at least one)
        // C2 requires 2 hex digits, but rejects extra digits to simplify C generation
        if (!isxdigit(input[2])) {
            t.cur += 2;
            t.error(result, "expect 2 hexadecimal digits after '\\x'");
            return 0;
        }
        if (isxdigit(input[3])) {
            t.cur += 3;
            t.error(result, "too many digits in hexadecimal escape sequence '\\x'");
            return 0;
        }
        result.char_value = hex2val(input[1]) * 16 + hex2val(input[2]);
        result.radix = 16;
        return 3;
    default:
        if (is_octal(input[0])) {
            u32 offset = 0;
            u32 value = 0;
            while (is_octal(input[offset]) && offset < 3) {
                value *= 8;
                value += cast<u32>(input[offset] - '0');
                offset++;
            }

            if (value > 255) {
                t.cur++;
                t.error(result, "octal escape sequence out of range");
                return 0;
            }
            result.char_value = cast<u8>(value);
            result.radix = 8;
            return offset;
        }
        t.cur++;
        t.error(result, "unknown escape sequence '\\%c'", input[0]);
        return 0;
    }
    return 1;
}

fn void Tokenizer.lex_char_literal(Tokenizer* t, Token* result) {
    result.kind = Kind.CharLiteral;
    result.radix = 10;

    if (t.cur[1] == '\\') {
        t.cur++; // skip quote
        u32 len = t.lex_escaped_char(result);
        if (len == 0) return;
        t.cur += (len - 1);
    } else {
        result.char_value = cast<u8>(t.cur[1]);
    }

    if (t.cur[2] != '\'') {
        if (t.cur[2] != 0 && t.cur[3] == '\'') {
            t.error(result, "multi-character character constant");
        } else {
            t.error(result, "missing terminating ' character (GOT %c)", t.cur[2]);
            //t.error(result, "missing terminating ' character");
        }
        return;
    }

    t.cur += 3;
}

fn void Tokenizer.lex_string_literal(Tokenizer* t, Token* result) {
    result.kind = Kind.StringLiteral;
    t.cur++; // skip "
    const char* start = t.cur;
    u32 num_escapes = 0;

    while (1) {
        switch (*t.cur) {
        case 0:
        case '\r':
        case '\n':
            t.cur--;
            t.error(result, "unterminated string");
            return;
        case '\\':
            u32 esc_len = t.lex_escaped_char(result);
            if (esc_len == 0) return;
            num_escapes += esc_len;
            t.cur += (esc_len + 1);
            break;
        case '"':
            u32 len = cast<u32>(t.cur - start);
            t.cur++; // skip string terminator
            // Note: we could put all empty strings at index 1 (not 0, since that means nil)
            result.text_len = len + 1 - num_escapes;   // include 0-terminator
            result.text_idx = t.pool.add(start, len, false);
            return;
        default:
            t.cur++;
            break;
        }
    }
}

fn bool Tokenizer.lex_line_comment(Tokenizer* t, Token* result) {
    t.cur += 1;
    const char* start = t.cur;
    const char* end = start;

    while (*end) {
        if (*end == '\r' || *end == '\n') break;
        end++;
    }

    u32 len = cast<u32>(end - start);
    t.cur += len;

    if (t.raw_mode) {
        result.kind = Kind.LineComment;
        result.text_idx = t.pool.add(start, len, false);
        return true;
    }
    return false;
}

fn bool Tokenizer.lex_block_comment(Tokenizer* t, Token* result) {
    t.cur += 1;
    const char* start = t.cur;
    while (1) {
        switch (*t.cur) {
        case 0:
            t.cur--;
            t.error(result, "un-terminated block comment");
            return true;
        case '/':
            if (t.cur[1] == '*') {
                t.error(result, "'/*' within block comment");
                return true;
            }
            break;
        case '*':
            if (t.cur[1] == '/') {
                t.cur += 2;
                if (t.raw_mode) {
                    usize len = cast<usize>(t.cur - start - 2);
                    result.kind = Kind.BlockComment;
                    result.text_idx = t.pool.add(start, len, false);
                    return true;
                }
                return false;
            }
            break;
        default:
            break;
        }
        t.cur++;
    }
    return false;
}

fn bool compare_word(const char* cur, const char* expect) {
    while (*expect) {
        if (*cur != *expect) return false;
        cur++;
        expect++;
    }
    return !Identifier_char[cast<u8>(*cur)];
}

// return true if we pass result
fn bool Tokenizer.lex_feature_cmd(Tokenizer* t, Token* result) {
    bool at_start = t.at_bol();
    const char *start = t.cur;

    // skip '#' and blanks
    t.cur = skip_blanks(t.cur + 1);

    Kind kind;
    for (kind = Kind.Feat_if; kind < Kind.Feat_invalid; kind++) {
        const char *word = kind2str(kind) + 1;
        if (compare_word(t.cur, word)) {
            t.cur += string.strlen(word);
            break;
        }
    }
    result.kind = kind;
    if (t.raw_mode)
        return true;

    t.cur = skip_blanks(t.cur);
    switch (kind) {
    case Feat_if:
    case Feat_ifdef:
    case Feat_ifndef:
    case Feat_elif:
        if (!at_start) goto not_at_start;
        if (t.handle_if(result, kind)) return true;
        break;
    case Feat_else:
        if (!at_start) goto not_at_start;
        if (t.handle_else(result)) return true;
        break;
    case Feat_endif:
        if (!at_start) goto not_at_start;
        if (t.handle_endif(result)) return true;
        break;
    case Feat_error:
    case Feat_warning:
        if (!t.is_enabled()) return false; // if disabled, dont care if anything else
        if (!at_start) goto not_at_start;
        return t.parse_error_warn(result, kind);
    default:
        if (!t.is_enabled()) return false; // if disabled, dont care if anything else
        t.cur = start;
        t.error(result, "unknown feature-selection command");
        return true;
    }
    return false;
not_at_start:
    t.cur = start;
    t.error(result, "#if/#else/#endif/#error/#warn must be at start of line");
    return true;
}

fn bool Tokenizer.at_bol(Tokenizer* t) {
    const char *p = t.cur;
    while (p > t.line_start) {
        if (!isblank(*--p))
            return false;
    }
    return true;
}

fn bool Tokenizer.parse_error_warn(Tokenizer* t, Token* result, Kind kind) {
    const char* start = t.cur;
    while (*t.cur != '\0' && *t.cur != '\r' && *t.cur != '\n')
        t.cur++;
    usize len = cast<usize>(t.cur - start);
    if (len > constants.MaxErrorMsgLen) {
        t.error(result, "error msg too long (max %d bytes)", constants.MaxErrorMsgLen);
        return true;
    }
    char[constants.MaxErrorMsgLen+1] msg;
    string.memcpy(msg, start, len);
    msg[len] = 0;

    if (kind == Kind.Feat_error) {
        t.cur = t.line_start;
        t.error(result, "%s", msg);
    } else {
        // TODO: output diagnostic synchronously
        string.strcpy(t.error_msg, msg);
        result.kind = Kind.Warning;
        result.error_msg = t.error_msg;
    }
    return true;
}

fn bool Tokenizer.is_enabled(const Tokenizer* t) {
    return !t.feature_stack[t.feature_count].skipping;
}

fn bool Tokenizer.handle_if(Tokenizer* t, Token* result, Kind kind) {
    // Syntax: 0 | 1 | FEATURE | FEATURE=<value>
    // TODO: handle #if <expr>
    Feature* top = &t.feature_stack[t.feature_count];

    if (kind == Kind.Feat_if || kind == Kind.Feat_ifdef || kind == Kind.Feat_ifndef) {
        if (t.feature_count >= constants.MaxFeatureDepth) {
            t.error(result, "feature nesting too much");
            return true;
        }
        t.feature_count++;
        top++;
        top.kind = kind;
        top.loc = result.loc;
        top.is_else = false;
        top.skipping = 0;
        if (top[-1].skipping) { // don't bother parsing the condition
            top.skipping = 2;
            return false;
        }
    } else {
        if (t.feature_count == 0) {
            t.error(result, "%s without #if", kind2str(kind));
            return true;
        }
        if (top.is_else) {
            t.error(result, "%s in #else", kind2str(kind));
            return true;
        }
        top.skipping ^= 1;
        if (top.skipping) {
            top.skipping = 2;  // skip the rest
            return false;
        }
    }

    Action act = Char_lookup[cast<u8>(*t.cur)];
    switch (act) {
    case INVALID:
        t.error(result, "invalid char '%c'", *t.cur);
        return true;
    case IDENT:
        t.lex_identifier(result);
        if (result.kind != Kind.Identifier)
            goto invalid;
        // TODO check feature value
        // XXX: cannot use t.features.contains_idx(result.text_idx)
        //      because t.pool and t.features.pool are different in c2c
        if (!t.features.contains(t.pool.idx2str(result.text_idx)))
            top.skipping = 1;
        if (kind == Kind.Feat_ifndef)
            top.skipping ^= 1;
        break;
    case DIGIT:
        if (kind != Kind.Feat_if && kind != Kind.Feat_elif)
            goto invalid;
        t.lex_number(result);
        if (result.kind != Kind.IntegerLiteral)
            goto invalid;
        if (!result.int_value) top.skipping = 1;
        break;
    case EOF:
        t.cur--;
        t.error(result, "expected feature");
        return true;
    default:
    invalid:
        t.error(result, "invalid feature value");
        return true;
    }
    return false;
}

fn bool Tokenizer.handle_else(Tokenizer* t, Token* result) {
    if (t.feature_count == 0) {
        t.error(result, "#else without #if");
        return true;
    }
    Feature* top = &t.feature_stack[t.feature_count];
    if (top.is_else) {
        t.error(result, "#else in #else");
        return true;
    }
    top.is_else = true;
    top.skipping ^= 1;
    return false;
}

fn bool Tokenizer.handle_endif(Tokenizer* t, Token* result) {
    if (t.feature_count == 0) {
        t.error(result, "#endif without #if");
        return true;
    }
    t.feature_count--;
    return false;
}

fn bool Tokenizer.skip_feature(Tokenizer* t, Token* result) {
    const char *p = t.cur;
    for (;;) {
        switch (*p++) {
        case '\0':
            Feature* top = &t.feature_stack[t.feature_count];
            t.cur = t.input_start + (top.loc - t.loc_start);
            t.error(result, "un-terminated %s", kind2str(top.kind));
            return true;
        case '\n':
            t.line_start = p;
            break;
        case '#':
            t.cur = p - 1;
            if (t.lex_feature_cmd(result)) return true;
            if (t.is_enabled()) return false;
            p = t.cur;
            break;
        case '"':
        case '\'':
            p = skip_string_literal(p - 1);
            break;
        case '/':
            if (*p == '/') {
                p = skip_line_comment(p + 1);
                break;
            }
            if (*p == '*') {
                p = skip_block_comment(p + 1);
                break;
            }
            break;
        }
    }
    return false;
}

fn const char *skip_blanks(const char *p) {
    while (isblank(*p)) p++;
    return p;
}

fn const char *skip_string_literal(const char *p) {
    char sep = *p++;

    for (;;) {
        switch (*p++) {
        case '\0':
        case '\n':
            return p - 1;
        case '\r':
            return p;
        case '"':
        case '\'':
            if (p[-1] == sep)
                return p;
            break;
        case '\\':
            if (*p == sep || *p == '\\')
                p++;
            break;
        }
    }
    return p;   // TODO detect this code as unreachable
}

fn const char *skip_line_comment(const char *p) {
    while (*p != '\0' && *p != '\r' && *p != '\n')
        p++;
    return p;
}

fn const char *skip_block_comment(const char *p) {
    while (*p != '\0') {
        if (*p == '*' && p[1] == '/') {
            p += 2;
            break;
        }
        p++;
    }
    return p;
}

/* decode a UTF-8 sequence:
   return -1 on encoding error.
   otherwise return codepoint value in range 0..0x1FFFFF and update *endp
   note: *endp is not incremented for '\0'.
   note: no test on invalid codepoints such as surrogate halves,
 */
fn i32 decode_utf8(const char *s, const char **endp) {
    const u8 *p = cast<u8 *>(s);
    i32 c = *p++ & 0xFF; // redundant mask to prevent conversion error

    if (c < 0x80) {
        *endp = s + (c != '\0');
        return c;
    } else
    if (c < 0xC2) {
        // invalid prefix byte or naked trailing byte
    } else
    if (c < 0xE0) {
        if (p[0] >= 0x80 && p[0] <= 0xBF) {
            *endp = s + 2;
            return ((c - 0xC0) << 6) + (p[0] - 0x80);
        }
    } else
    if (c < 0xF0) {
        if (p[0] >= 0x80 && p[0] <= 0xBF
        &&  p[1] >= 0x80 && p[1] <= 0xBF) {
            c = ((c - 0xE0) << 12) + ((p[0] - 0x80) << 6) + (p[1] - 0x80);
            if (c >= 0x800) {
                *endp = s + 3;
                return c;
            }
        }
    } else
    if (c <= 0xF4) {
        if (p[0] >= 0x80 && p[0] <= 0xBF
        &&  p[1] >= 0x80 && p[1] <= 0xBF
        &&  p[2] >= 0x80 && p[2] <= 0xBF) {
            c = ((c - 0xF0) << 18) + ((p[0] - 0x80) << 12) +
                ((p[1] - 0x80) << 6) + (p[2] - 0x80);
            if (c >= 0x10000 && c < 0x110000) {
                *endp = s + 4;
                return c;
            }
        }
    }
    return -1;
}
