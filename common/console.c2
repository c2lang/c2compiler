/* Copyright 2022-2025 Bas van den Berg
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

module console;

import std local;

import color local;

bool use_color = false;
bool show_debug = false;
bool show_timing = false;

const u32 BUF_SIZE = 4096;

public fn void init() {
    use_color = color.useColor();
}

public fn void setDebug(bool enable) {
    show_debug = enable;
}

public fn void setTiming(bool enable) {
    show_timing = enable;
}

public fn void debug(const char* format @(printf_format), ...) {
    if (!show_debug) return;

    char[BUF_SIZE] buf;
    va_list args;
    va_start(args, format);
    vsnprintf(buf, sizeof(buf), format, args);
    va_end(args);
    if (use_color) {
        printf("%s%s%s\n", color.Blue, buf, color.Normal);
    } else {
        printf("%s\n", buf);
    }
}

public fn void log(const char* format @(printf_format), ...) {
    char[BUF_SIZE] buf;
    va_list args;
    va_start(args, format);
    vsnprintf(buf, sizeof(buf), format, args);
    va_end(args);
    printf("%s\n", buf);
}

public fn void warn(const char* format @(printf_format), ...) {
    char[BUF_SIZE] buf;
    va_list args;
    va_start(args, format);
    vsnprintf(buf, sizeof(buf), format, args);
    va_end(args);
    if (use_color) {
        fprintf(stderr, "%swarning: %s%s\n", color.Yellow, buf, color.Normal);
    } else {
        fprintf(stderr, "warning: %s\n", buf);
    }
}

public fn void error(const char* format @(printf_format), ...) {
    char[BUF_SIZE] buf;
    va_list args;
    va_start(args, format);
    vsprintf(buf, format, args);
    va_end(args);
    if (use_color) {
        fprintf(stderr, "%serror: %s%s\n", color.Red, buf, color.Normal);
    } else {
        fprintf(stderr, "error: %s\n", buf);
    }
}

public fn void error_diag(const char* loc, const char* format @(printf_format), ...) {
    char[BUF_SIZE] buf;
    va_list args;
    va_start(args, format);
    vsprintf(buf, format, args);
    va_end(args);
    if (use_color) {
        fprintf(stderr, "%s%s: error: %s%s\n", color.Red, loc, buf, color.Normal);
    } else {
        fprintf(stderr, "%s: error: %s\n", loc, buf);
    }
}

public fn void log_time(const char* item, u64 duration) {
    if (!show_timing) return;
    if (use_color) {
        printf("%s%s took %d usec%s\n", color.Blue, item, duration, color.Normal);
    } else {
        printf("%s took %d usec\n", item, duration);
    }
}

