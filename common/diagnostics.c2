/* Copyright 2022-2025 Bas van den Berg
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

module diagnostics;

import color;
import source_mgr;
import string_buffer;
import src_loc local;
import string_utils;
import utils;

import stdarg local;
import stdio local;
import stdlib;

public type GetTokenEndFn fn SrcLoc (const char* input, SrcLoc start);

public type Diags struct @(opaque) {
    source_mgr.SourceMgr* sm;
    string_buffer.Buf* out;
    u32 num_errors;
    u32 num_warnings;
    bool promote_warnings;
    GetTokenEndFn get_token_end;
    const utils.PathInfo* path_info;
}

public fn Diags* create(source_mgr.SourceMgr* sm, bool use_color, GetTokenEndFn get_token_end, const utils.PathInfo* path_info) {
    Diags* diags = stdlib.calloc(1, sizeof(Diags));
    diags.sm = sm;
    diags.out = string_buffer.create(512, use_color, 1);
    diags.get_token_end = get_token_end;
    diags.path_info = path_info;
    return diags;
}

public fn void Diags.free(Diags* diags) {
    diags.out.free();
    stdlib.free(diags);
}

public fn void Diags.clear(Diags* diags) {
    diags.num_errors = 0;
    diags.num_warnings = 0;
}

public fn void Diags.setWarningAsError(Diags* diags, bool are_errors) {
    diags.promote_warnings = are_errors;
}

type Category enum u8 {
    Note,
    Warning,
    Error,
}

const char*[] category_names = {
    "note",
    "warning",
    "error",
}

const char*[] category_colors = {
    color.Grey,
    color.Bmagenta,
    color.Bred,
}

public fn void Diags.error(Diags* diags, SrcLoc loc, const char* format @(printf_format), ...) {
    Category category = Category.Error;

    Va_list args;
    va_start(args, format);
    SrcRange range = { 0, 0 }
    diags.internal(category, loc, range, format, args);
    va_end(args);
}

public fn void Diags.error2(Diags* diags, SrcLoc loc, const char* format, Va_list args) {
    SrcRange range = { 0, 0 }
    diags.internal(Category.Error, loc, range, format, args);
}

public fn void Diags.note(Diags* diags, SrcLoc loc, const char* format @(printf_format), ...) {
    Va_list args;
    va_start(args, format);
    SrcRange range = { 0, 0 }
    diags.internal(Category.Note, loc, range, format, args);
    va_end(args);
}

public fn void Diags.note2(Diags* diags, SrcLoc loc, const char* format, Va_list args) {
    SrcRange range = { 0, 0 }
    diags.internal(Category.Note, loc, range, format, args);
}

public fn void Diags.warn(Diags* diags, SrcLoc loc, const char* format @(printf_format), ...) {
    Va_list args;
    va_start(args, format);
    SrcRange range = { 0, 0 }
    Category category = Category.Warning;
    if (diags.promote_warnings) category = Category.Error;
    diags.internal(category, loc, range, format, args);
    va_end(args);
}

public fn void Diags.warn2(Diags* diags, SrcLoc loc, const char* format, Va_list args) {
    SrcRange range = { 0, 0 }
    Category category = Category.Warning;
    if (diags.promote_warnings) category = Category.Error;
    diags.internal(category, loc, range, format, args);
}

public fn void Diags.errorRange(Diags* diags,
                                SrcLoc loc,
                                SrcRange range,
                                const char* format @(printf_format), ...) {
    Category category = Category.Error;

    Va_list args;
    va_start(args, format);
    diags.internal(category, loc, range, format, args);
    va_end(args);
}

public fn void Diags.errorRange2(Diags* diags,
                                 SrcLoc loc,
                                 SrcRange range,
                                 const char* format,
                                 Va_list args) {
    diags.internal(Category.Error, loc, range, format, args);
}

fn void Diags.internal(Diags* diags,
                       Category category,
                       SrcLoc sloc,
                       SrcRange range,
                       const char* format,
                       Va_list args) {
    if (category == Category.Error) {
        diags.num_errors++;
    } else {
        diags.num_warnings++;
    }

    string_buffer.Buf* out = diags.out;
    out.clear();

    source_mgr.Location startLoc = diags.sm.getLocation(range.start);
    source_mgr.Location loc = diags.sm.getLocation(sloc);
    // get end of last token
    if (range.end) {
        const char* src = diags.sm.get_token_source(range.end);
        range.end = diags.get_token_end(src, range.end);
    }
    source_mgr.Location endLoc = diags.sm.getLocation(range.end);

    if (sloc) {
        if (diags.path_info.hasSubdir() && loc.filename[0] != '/') {
            out.add(diags.path_info.root2orig);
        }
        out.print("%s:%d:%d: ", loc.filename, loc.line, loc.column);
    }

    out.color(category_colors[category]);
    out.add(category_names[category]);
    out.add(": ");
    out.color(color.Normal);

    char[256] tmp;
    vsprintf(tmp, format, args);
    out.add(tmp);
    out.add("\n");

    if (sloc) {
        // TODO if it's too long, just show relevant part
        assert(loc.line_start);
        out.add_line(loc.line_start);
        out.add("\n");

        if (range.start && range.end) {
            // TODO handle case where a Range is spread over multiple lines
            assert(endLoc.column >= startLoc.column);
            // print tabs as tabs
            u32 offset = startLoc.column -1;
            u32 tabs = string_utils.count_tabs(startLoc.line_start, offset);
            assert(offset >= tabs);
            offset -= tabs;
            for (u32 i=0; i<tabs; i++) out.add1('\t');
            out.indent(offset);
            out.color(color.Bgreen);
            u32 end_col = endLoc.column;
            // Note: only handle loc in/after range, NOT before
            if (loc.column > end_col) end_col = loc.column;
            for (u32 i=startLoc.column; i<=end_col; i++) {
                //for (u32 i=startLoc.column; i<=endLoc.column; i++) {
                if (i == loc.column) out.add("^");
                else if (i<=endLoc.column) out.add("~");
                else out.space();
            }
            out.color(color.Normal);
        } else {
            // print tabs as tabs
            u32 offset = loc.column -1;
            u32 tabs = string_utils.count_tabs(loc.line_start, offset);
            assert(offset >= tabs);
            offset -= tabs;
            for (u32 i=0; i<tabs; i++) out.add1('\t');
            out.indent(offset);
            out.color(color.Bgreen);
            out.add("^");
            out.color(color.Normal);
        }
    }

    fprintf(stderr, "%s\n", out.data());
}

public fn bool Diags.isOk(const Diags* diags) { return diags.num_errors == 0; }
public fn bool Diags.hasErrors(const Diags* diags) { return diags.num_errors != 0; }

public fn u32 Diags.getNumErrors(const Diags* diags) { return diags.num_errors; }

//public fn u32 Diags.getNumWarnings(const Diags* diags) { return diags.num_warnings; }

public fn void Diags.printStatus(const Diags* diags) {
    string_buffer.Buf* out = diags.out;
    out.clear();

    if (diags.num_warnings) {
        out.print("%d warning%s", diags.num_warnings, diags.num_warnings > 1 ? "s" : "");
    }
    if (diags.num_errors) {
        if (diags.num_warnings) out.add(" and ");
        out.print("%d error%s", diags.num_errors, diags.num_errors > 1 ? "s" : "");
    }
    if (out.size()) {
        out.add(" generated.\n");
        fputs(out.data(), stderr);
    }
}

