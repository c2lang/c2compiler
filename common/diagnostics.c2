/* Copyright 2022-2025 Bas van den Berg
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

module diagnostics;

import color;
import source_mgr;
import string_buffer;
import src_loc local;
import utf8;
import utils;

import stdarg local;
import stdio local;
import stdlib;

public type Diags struct @(opaque) {
    source_mgr.SourceMgr* sm;   // no ownership
    string_buffer.Buf* out;     // owned
    u32 num_errors;
    u32 num_warnings;
    bool promote_warnings;
    const utils.PathInfo* path_info;  // no ownership
}

public fn Diags* create(source_mgr.SourceMgr* sm, bool use_color, const utils.PathInfo* path_info) {
    Diags* diags = stdlib.calloc(1, sizeof(Diags));
    diags.sm = sm;
    diags.out = string_buffer.create(512, use_color, 1);
    diags.path_info = path_info;
    return diags;
}

public fn void Diags.free(Diags* diags) {
    diags.out.free();
    stdlib.free(diags);
}

public fn void Diags.clear(Diags* diags) {
    diags.num_errors = 0;
    diags.num_warnings = 0;
}

public fn void Diags.setWarningAsError(Diags* diags, bool are_errors) {
    diags.promote_warnings = are_errors;
}

type Category enum u8 {
    Note,
    Warning,
    Error,
}

const char*[] category_names = {
    "note",
    "warning",
    "error",
}

const char*[] category_colors = {
    color.Grey,
    color.Bmagenta,
    color.Bred,
}

public fn void Diags.error(Diags* diags, SrcLoc loc, const char* format @(printf_format), ...) {
    va_list args;
    va_start(args, format);
    SrcRange range = { 0, 0 };
    diags.internal(Category.Error, loc, range, format, args);
    va_end(args);
}

public fn void Diags.error2(Diags* diags, SrcLoc loc, const char* format, va_list args) {
    SrcRange range = { 0, 0 };
    diags.internal(Category.Error, loc, range, format, args);
}

public fn void Diags.note(Diags* diags, SrcLoc loc, const char* format @(printf_format), ...) {
    va_list args;
    va_start(args, format);
    SrcRange range = { 0, 0 };
    diags.internal(Category.Note, loc, range, format, args);
    va_end(args);
}

public fn void Diags.note2(Diags* diags, SrcLoc loc, const char* format, va_list args) {
    SrcRange range = { 0, 0 };
    diags.internal(Category.Note, loc, range, format, args);
}

public fn void Diags.warn(Diags* diags, SrcLoc loc, const char* format @(printf_format), ...) {
    va_list args;
    va_start(args, format);
    SrcRange range = { 0, 0 };
    Category category = Category.Warning;
    if (diags.promote_warnings) category = Category.Error;
    diags.internal(category, loc, range, format, args);
    va_end(args);
}

public fn void Diags.warn2(Diags* diags, SrcLoc loc, const char* format, va_list args) {
    SrcRange range = { 0, 0 };
    Category category = Category.Warning;
    if (diags.promote_warnings) category = Category.Error;
    diags.internal(category, loc, range, format, args);
}

public fn void Diags.errorRange(Diags* diags,
                                SrcLoc loc,
                                SrcRange range,
                                const char* format @(printf_format), ...) {
    va_list args;
    va_start(args, format);
    diags.internal(Category.Error, loc, range, format, args);
    va_end(args);
}

public fn void Diags.errorRange2(Diags* diags,
                                 SrcLoc loc,
                                 SrcRange range,
                                 const char* format,
                                 va_list args) {
    diags.internal(Category.Error, loc, range, format, args);
}

fn void Diags.internal(Diags* diags,
                       Category category,
                       SrcLoc sloc,
                       SrcRange range,
                       const char* format,
                       va_list args) {
    if (category == Category.Error) {
        diags.num_errors++;
    } else {
        diags.num_warnings++;
    }

    string_buffer.Buf* out = diags.out;
    out.clear();

    source_mgr.Location loc = diags.sm.locate(sloc);
    if (sloc && !loc.line_start) {
        out.print("<invalid location %d>: ", sloc);
        sloc = 0;
    }

    if (sloc) {
        if (diags.path_info.hasSubdir() && loc.filename[0] != '/') {
            out.add(diags.path_info.root2orig);
        }
        out.print("%s:%d:%d: ", loc.filename, loc.line, loc.column);
    }

    out.color(category_colors[category]);
    out.add(category_names[category]);
    out.add(": ");
    out.color(color.Normal);

    out.vprintf(format, args);
    out.newline();

    if (sloc) {
        // Show the source line and point to the error/range location.
        // the source line is printed first
        // then a second line with ~~~~~^~~~~ pointing to the error location
        // and the region if any.
        // if the source line is long, an initial part is skipped (`skip` bytes)
        const char *text = loc.line_start;  // pointer to the source code line
        u32 loc_col = loc.column;       // column number for the error
        u32 range_start_col = loc_col;  // column number for start of the ~~~ area
        u32 range_end_col = loc_col + 1; // column number for end of the ~~~ area
        u32 end_col = loc_col + 1;      // column number where to stop the cursor
        if (range.start && range.end) {
            source_mgr.Location startLoc = diags.sm.locate(range.start);
            source_mgr.Location endLoc = diags.sm.locate(range.end);
            // ignore range if spanning more than one line or not on the same line as error
            if (loc.line == startLoc.line && loc.line == endLoc.line && startLoc.column < endLoc.column) {
                range_start_col = startLoc.column;
                range_end_col = endLoc.column;
                if (end_col < range_end_col)    // output until the end of the region
                    end_col = range_end_col;
            }
        }
        // If the line is long, show a fragment up to 128 bytes around the error
        u32 skip = 0;
        if (loc_col > 128) {
            skip = loc_col - 64;
            skip += utf8.sync(&text[skip]);  // Skip UTF-8 continuation bytes
            // `skip` bytea are not displayed, update the boundaries of the region,
            // the error location, the end of output and adjust the test pointer.
            if (range_start_col > skip)
                range_start_col -= skip;
            else
                range_start_col = 1;
            if (range_end_col > skip)
                range_end_col -= skip;
            else
                range_end_col = 1;
            loc_col -= skip;
            end_col -= skip;
            text += skip;
        }
        // compute the length of the source line, potentially truncated if too long
        u32 len = 0;
        while (len < 128 && text[len] && text[len] != '\n' && text[len] != '\r') {
            len++;
        }
        len += utf8.sync(&text[len]);  // Skip UTF-8 continuation bytes
        if (end_col > len + 2)    // no need to output ~ past the end of the visible part
            end_col = len + 2;

        // output the source line or fragment thereof
        if (skip) out.add("...");
        out.add2(text, len);
        out.newline();

        // Output the position indicator: indent with the same mixture of tabs and spaces
        // TODO: handle wide codepoints potentially present in strings and comments
        if (skip) out.add("   ");
        for (u32 col = 1; col < end_col; col++) {
            char c = ' ';
            if (text[col - 1] == '\t')  // if a TAB was output in the soure
                c = '\t';               // output a TAB at the same position
            if (col == range_start_col) out.color(color.Bgreen);
            if (col >= range_start_col && col < range_end_col) c = '~';
            if (col == loc_col) c = '^';
            out.add1(c);
        }
        out.color(color.Normal);
        out.newline();
    }
    fputs(out.data(), stderr);
}

public fn bool Diags.isOk(const Diags* diags) { return diags.num_errors == 0; }
public fn bool Diags.hasErrors(const Diags* diags) { return diags.num_errors != 0; }

public fn u32 Diags.getNumErrors(const Diags* diags) { return diags.num_errors; }

//public fn u32 Diags.getNumWarnings(const Diags* diags) { return diags.num_warnings; }

public fn void Diags.printStatus(const Diags* diags) {
    string_buffer.Buf* out = diags.out;
    out.clear();

    if (diags.num_warnings) {
        out.print("%d warning%s", diags.num_warnings, diags.num_warnings > 1 ? "s" : "");
    }
    if (diags.num_errors) {
        if (diags.num_warnings) out.add(" and ");
        out.print("%d error%s", diags.num_errors, diags.num_errors > 1 ? "s" : "");
    }
    if (out.size()) {
        out.add(" generated.\n");
        fputs(out.data(), stderr);
    }
}

