/* Copyright 2022-2025 Bas van den Berg
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

module library_list;

import std;

public type Lib struct {
    u32 name; // into auxPool
    bool is_static;
}

public type List struct {
    Lib* libs;
    u32 count;
    u32 capacity;
}

public fn void List.init(List* l) {
    std.memset(l, 0, sizeof(List));
    l.resize(2);
}

public fn void List.free(List* l) {
    std.free(l.libs);
}

public type Visitor fn void (void* arg, u32 name, bool is_static);

public fn void List.visit(const List* l, Visitor visitor, void* arg) {
    for (u32 i=0; i<l.count; i++) {
        const Lib* lib = &l.libs[i];
        visitor(arg, lib.name, lib.is_static);
    }
}

public fn void List.add(List* l, u32 name, bool is_static) {
    // Note: we dont check for duplicates here
    if (l.count == l.capacity) l.resize(l.capacity * 2);
    l.libs[l.count].name = name;
    l.libs[l.count].is_static = is_static;
    l.count++;
}

public fn bool List.contains(const List* l, u32 name) {
    for (u32 i=0; i<l.count; i++) {
        if (l.libs[i].name == name) return true;
    }
    return false;

}

//public fn u32 List.size(const List* l) { return l.count; }

fn void List.resize(List* l, u32 cap) {
    l.capacity = cap;
    Lib* libs2 = std.malloc(l.capacity * sizeof(Lib));
    if (l.libs) {
        std.memcpy(libs2, l.libs, l.count * sizeof(Lib));
        std.free(l.libs);
    }
    l.libs = libs2;
}

