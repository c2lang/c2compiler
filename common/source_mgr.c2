/* Copyright 2022-2025 Bas van den Berg
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

module source_mgr;

import color;
import file_utils;
import string_buffer;
import string_pool;
import src_loc local;

import stdio;
import stdlib;
import string;

const u32 InitialMaxFiles = 32;
const u32 CheckPointSize = 128;

type CheckPoint struct {
    u32 offset;
    u32 line;
}

public type Location struct {
    u32 line;
    u32 column;
    const char* filename;
    const char* line_start;
}

// Note: for generated files, we keep the string_buffer contents
type File struct {
    u32 filename;
    u32 offset;
    union {
        file_utils.Reader file;
        string_buffer.Buf* contents; // when is_generated = true
    }
    bool needed; // they are closed by user, but may still be open
    bool is_generated;
    bool is_source;

    // to find line-number
    u32 last_offset;
    Location last_loc;

    // checkpoints
    u32 checkpoint_count;
    u32 checkpoint_capacity;
    u32 next_checkpoint;
    CheckPoint* checkpoints;
}

fn void File.close(File* f) {
    if (!f.is_generated) f.file.close();
}

fn bool File.isOpen(const File* f) {
    if (f.is_generated) return true;
    return f.file.isOpen();
}

fn void File.clear(File* f) {
    if (f.is_generated) {
        if (f.contents)
            f.contents.free();
        f.contents = nil;
    } else {
        f.file.close();
    }
    stdlib.free(f.checkpoints);
    f.checkpoints = nil;
    f.checkpoint_count = f.checkpoint_capacity = 0;
}

fn u32 File.size(const File* f) {
    if (f.is_generated) return f.contents.size();
    return f.file.size;
}

fn const char* File.data(File* f) {
    if (f.is_generated) return f.contents.data();
    return f.file.data();
}

fn void File.addCheckPoint(File* f, u32 offset, u32 line) {
    if (f.checkpoint_count == f.checkpoint_capacity) {
        if (f.checkpoint_capacity) f.checkpoint_capacity *= 2;
        else f.checkpoint_capacity = 16;

        CheckPoint* checkpoints = stdlib.malloc(f.checkpoint_capacity * sizeof(CheckPoint));
        if (f.checkpoints) {
            string.memcpy(checkpoints, f.checkpoints, f.checkpoint_count * sizeof(CheckPoint));
            stdlib.free(f.checkpoints);
        }
        f.checkpoints = checkpoints;
    }

    CheckPoint* c = &f.checkpoints[f.checkpoint_count];
    f.checkpoint_count++;
    c.offset = offset;
    c.line = line;
    f.next_checkpoint = offset + CheckPointSize;
}

fn const CheckPoint* File.findCheckPoint(File* f, u32 offset) {
    if (f.checkpoint_count && offset > f.checkpoints[f.checkpoint_count-1].offset) {
        return &f.checkpoints[f.checkpoint_count-1];
    }

    u32 left = 0;
    u32 right = f.checkpoint_count;
    //stdio.printf("FIND %d  (%d cps)\n", offset, f.checkpoint_count);

    while (left != right) {
        u32 middle = (left + right) / 2;
        const CheckPoint* cur = &f.checkpoints[middle];
        //stdio.printf("  %3u  %3u  %3u   %d\n", left, right, middle, cur.offset);

        if (offset < cur.offset) {
            // TODO: this cannot happen
            if (right == middle) return cur;
            right = middle;
            continue;
        }
        // check next offset
        // TODO: accessing f.checkpoints[middle+1].offset is invalid if middle+1 == right
        if (offset > f.checkpoints[middle+1].offset) {
            if (left == middle) return cur;
            left = middle;
            continue;
        }
        return cur;
    }
    return nil;
}

public type SourceMgr struct @(opaque) {
    const string_pool.Pool* pool;

    File* files;
    u32 num_files;
    u32 max_files;
    u32 num_open;   // actually open (ignores generated 'files')
    u32 max_open;

    // for cache
    u32 last_file;
    u32 last_file_offset;

    // for report
    u32 other_count;
    u32 other_size;
    u32 sources_count;
    u32 sources_size;
}

public fn SourceMgr* create(const string_pool.Pool* pool, u32 max_open) {
    SourceMgr* sm = stdlib.calloc(1, sizeof(SourceMgr));
    sm.pool = pool;
    sm.max_files = InitialMaxFiles;
    sm.files = stdlib.malloc(sizeof(File) * sm.max_files);
    sm.max_open = max_open;
    return sm;
}

public fn void SourceMgr.free(SourceMgr* sm) {
    for (u32 i=0; i<sm.num_files; i++) {
        sm.files[i].close();
    }
    stdlib.free(sm.files);
    stdlib.free(sm);
}

// Note closes all files above the handle (excluding the handle)
public fn void SourceMgr.clear(SourceMgr* sm, i32 handle) {
    handle++;
    for (i32 i=handle; i<cast<i32>(sm.num_files); i++) {
        File* f = &sm.files[i];
        if (f.needed && !f.is_generated) {
            stdio.printf("WARN %s still not closed\n", sm.pool.idx2str(f.filename));
        }
        f.clear();
    }
    sm.num_files = cast<u32>(handle);
    sm.num_open = 0; // recalculate below
    sm.other_count = 0;
    sm.other_size = 0;
    sm.sources_count = 0;
    sm.sources_size = 0;
    for (u32 i=0; i<sm.num_files; i++) {
        const File* f = &sm.files[i];
        if (!f.is_generated && f.isOpen()) sm.num_open++;
        if (f.is_source) {
            sm.sources_count++;
            sm.sources_size += f.size();
        } else {
            sm.other_count++;
            sm.other_size += f.size();
        }
    }
    sm.last_file = 0;
    sm.last_file_offset = 0;
}

fn file_utils.Reader SourceMgr.openInternal(SourceMgr* sm, const char* filename, SrcLoc loc) {
    file_utils.Reader file;
    if (file.open(filename)) {
        sm.num_open++;
    } else {
        // TODO only color if enabled (cannot use console since we need source loc first)
        if (loc) {
            stdio.fprintf(stdio.stderr, "%s: %serror:%s cannot open %s: %s\n",
                sm.loc2str(loc), color.Red, color.Normal, filename, file.getError());
        } else {
            stdio.fprintf(stdio.stderr, "%serror%s: cannot open %s: %s\n",
                color.Red, color.Normal, filename, file.getError());
        }
    }
    return file;
}

// Note: return true if a file could be closed
fn bool SourceMgr.close_oldest(SourceMgr* sm) {
    for (u32 i=0; i<sm.num_files; i++) {
        File* f = &sm.files[i];
        if (f.isOpen() && !f.needed) {
            f.close();
            sm.num_open--;
            return true;
        }
    }
    return false;
}

fn void SourceMgr.resize(SourceMgr* sm) {
    sm.max_files *= 2;
    File* files2 = stdlib.malloc(sizeof(File) * sm.max_files);
    string.memcpy(files2, sm.files, sm.num_files * sizeof(File));
    stdlib.free(sm.files);
    sm.files = files2;
}

public fn i32 SourceMgr.addGenerated(SourceMgr* sm,
                                     string_buffer.Buf* contents,
                                     u32 name) @(unused) {
#if PrintGenerated
    stdio.printf("------ GENERATED (%s) ------\n%s\n", sm.pool.idx2str(name), contents.data());
#endif
    if (sm.num_files == sm.max_files) sm.resize();

    File* f = &sm.files[sm.num_files];
    string.memset(f, 0, sizeof(File));

    // start at 1 to make 0 location special
    u32 offset = 1;
    if (sm.num_files) {
        File* last = &sm.files[sm.num_files-1];
        // distinguish offset of null byte at end of file from
        // offset of beginning of next file.
        offset = last.offset + last.size() + 1;
    }
    f.filename = name;
    f.offset = offset;
    f.contents = contents;
    f.next_checkpoint = CheckPointSize;
    f.needed = true;
    f.is_generated = true;

    i32 file_id = cast<i32>(sm.num_files);
    sm.num_files++;
    return file_id;
}

// Note: filename must be allocated in pool passed to SourceMgr
public fn i32 SourceMgr.open(SourceMgr* sm, u32 filename, SrcLoc loc, bool is_source) {
    if (sm.num_open == sm.max_open) {
        if (!sm.close_oldest()) {
            // TODO use diags (color)
            stdio.fprintf(stdio.stderr, "%serror%s: too many files open\n",
                color.Red, color.Normal);
            return -1;
        }
    }

    file_utils.Reader file = sm.openInternal(sm.pool.idx2str(filename), loc);
    if (!file.isOpen()) return -1;

    if (sm.num_files == sm.max_files) sm.resize();

    i32 file_id = cast<i32>(sm.num_files);
    File* f = &sm.files[sm.num_files];
    string.memset(f, 0, sizeof(File));

    u32 offset = 1;
    if (sm.num_files) {
        File* last = &sm.files[sm.num_files-1];
        // distinguish offset of null byte at end of file from
        // offset of beginning of next file.
        offset = last.offset + last.size() + 1;
    }
    f.filename = filename;
    f.offset = offset;
    f.file = file;
    f.next_checkpoint = CheckPointSize;
    f.needed = true;
    f.is_source = is_source;

    if (is_source) {
        sm.sources_count++;
        sm.sources_size += file.size;
    } else {
        sm.other_count++;
        sm.other_size += file.size;
    }

    sm.num_files++;
    //sm.dump();
    return file_id;
}

public fn void SourceMgr.close(SourceMgr* sm, i32 file_id) {
    sm.files[file_id].needed = false;   // close lazily when needed
}

fn void SourceMgr.checkOpen(SourceMgr* sm, i32 handle) {
    File* f = &sm.files[handle];
    if (f.isOpen()) return;

    if (sm.num_open == sm.max_open) {
        if (!sm.close_oldest()) {
            // TODO use diags (color)
            stdio.fprintf(stdio.stderr, "%serror%s: too many files open\n",
                color.Red, color.Normal);
            stdlib.exit(-1);
        }
    }

    assert(!f.is_generated);
    f.file = sm.openInternal(sm.pool.idx2str(f.filename), 0);
    if (!f.isOpen()) stdlib.exit(-1);   // if we cannot re-open file, just exit
}

public fn const char* SourceMgr.get_content(SourceMgr* sm, i32 handle) {
    sm.checkOpen(handle);
    return sm.files[handle].data();
}

public fn const char* SourceMgr.get_token_source(SourceMgr* sm, SrcLoc loc) {
    File* f = sm.find_file(loc);
    if (!f) return "";

    u32 offset = loc - f.offset;
    // TODO check if open, otherwise re-open

    const char* data = f.data();
    data += offset;

    return data;
}

public fn u32 SourceMgr.get_offset(SourceMgr* sm, i32 handle) {
    return sm.files[handle].offset;
}

public fn u32 SourceMgr.getFileNameIdx(SourceMgr* sm, i32 handle) {
    return sm.files[handle].filename;
}

public fn const char* SourceMgr.getFileName(SourceMgr* sm, i32 handle) {
    u32 idx = sm.files[handle].filename;
    return sm.pool.idx2str(idx);
}

#if 1
public fn void SourceMgr.dump(const SourceMgr* sm) @(unused) {
    stdio.printf("SourceMgr  files %d  (open %d/%d)\n", sm.num_files, sm.num_open, sm.max_open);
    u32 total_size = 0;
    for (u32 i=0; i<sm.num_files; i++) {
        File* f = &sm.files[i];
        total_size += f.file.size;
        stdio.printf("  [%2d]  %7d  %7d %d %s\n",
            i, f.offset, f.file.size, f.is_generated, sm.pool.idx2str(f.filename));
    }
    stdio.printf("Total size %d\n", total_size);
}
#endif

fn File* SourceMgr.find_file(SourceMgr* sm, SrcLoc loc) {
    u32 left = 0;
    if (loc >= sm.last_file_offset) {
        left = sm.last_file;
        if (loc <= sm.last_file_offset + sm.files[sm.last_file].size()) {
            return &sm.files[sm.last_file];
        }
    }
    u32 right = sm.num_files;
    while (left != right) {
        u32 middle = (left + right) / 2;
        File* f = &sm.files[middle];
        if (loc < f.offset) {
            right = middle;
            continue;
        }
        if (loc > f.offset + f.size()) {
            left = middle;
            continue;
        }
        sm.checkOpen(cast<i32>(middle)); // map will be needed, so check if file is really open
        sm.last_file = middle;
        sm.last_file_offset = f.offset;
        return f;
    }
    return nil;
}

#if 0
fn void File.showCheckpoints(const File* f) {
    stdio.printf("CHECKPOINTS: %d/%d  (next %d)\n", f.checkpoint_count, f.checkpoint_capacity,
        f.next_checkpoint);
    for (u32 i=0; i<f.checkpoint_count; i++) {
        const CheckPoint* cp = &f.checkpoints[i];
        stdio.printf("  %4d  %d\n", cp.offset, cp.line);
    }
}
#endif

fn Location SourceMgr.locate(SourceMgr* sm, SrcLoc loc) {
    //stdio.printf("=== FIND %d  last_offset %d last file %d\n", loc, sm.last_file_offset, sm.last_file);
    Location l = { 1, 1, "-", nil }
    if (loc == 0) return l;

    File* f = sm.find_file(loc);
    if (f) {
        //f.showCheckpoints();
        l.filename = sm.pool.idx2str(f.filename);
        u32 offset = loc - f.offset;
        u32 last_offset = 0;
        const char* data = f.data();

        // find start of search
        const char* line = data;
/*
        if (f.last_offset != 0 && offset > f.last_offset) {
            l = f.last_loc;
            last_offset = f.last_offset;
            line = data + last_offset - l.column + 1;
        }
*/
        u32 line_nr = l.line;

        // TODO also use last_offset (must then be > last checkpoint)

        // find checkpoint
        const CheckPoint* cp = f.findCheckPoint(offset);
        if (cp) {
            //stdio.printf("Find %d -> cp %d  %d\n", offset, cp.offset, cp.line);
            line_nr = cp.line;
            last_offset = cp.offset;
            line = data + cp.offset;
        } else {
            //stdio.printf("Find %d -> no checkpoint\n", offset);
        }

        // find line
        for (u32 i=last_offset; i<offset; i++) {
            if (data[i] == '\n') {
                line_nr++;
                line = data + i + 1;

                if (i >= f.next_checkpoint) {
                    //stdio.printf("%s add %5u  %d\n", l.filename, i, line_nr);
                    f.addCheckPoint(i+1, line_nr);
                }
            }
        }
        l.line = line_nr;
        // find column
        l.column = cast<u32>(&data[offset] - line) + 1;
        l.line_start = line;

        f.last_offset = offset;
        f.last_loc = l;
    }
    //stdio.printf("-> %d:%d\n", l.line, l.column);
    return l;
}

public fn Location SourceMgr.getLocation(SourceMgr* sm, SrcLoc sloc) {
    return sm.locate(sloc);
}

public fn const char* SourceMgr.loc2str(SourceMgr* sm, SrcLoc sloc) {
    local char[256] tmp;
    if (sloc == 0) {
        string.strcpy(tmp, "-");
    } else {
        Location loc = sm.locate(sloc);
        stdio.sprintf(tmp, "%s:%d:%d", loc.filename, loc.line, loc.column);
    }
    return tmp;
}

public fn void SourceMgr.report(const SourceMgr* sm) {
    stdio.printf("source-mgr: %d files, %d sources (%d bytes), %d other (%d bytes)\n",
        sm.num_files, sm.sources_count, sm.sources_size, sm.other_count, sm.other_size);
#if 0
    // show total number of lines
    u32 total_lines = 0;
    for (u32 i=0; i<sm.num_files; i++) {
        File* f = &sm.files[i];
        u32 last = f.offset + f.file.size - 1;
        Location loc = sm.locate(last);
        total_lines += loc.line;
    }
    stdio.printf("  total LoC: %d\n", total_lines);
#endif
#if 0
    u32 total_size = 0;
    for (u32 i=0; i<sm.num_files; i++) {
        File* f = &sm.files[i];
        total_size += (f.checkpoint_capacity * sizeof(CheckPoint));
        stdio.printf("  %7d  %6d  %d  %4d  %s\n",
            f.offset, f.size(), f.is_generated,
            f.checkpoint_count * sizeof(CheckPoint), sm.pool.idx2str(f.filename));
    }
    stdio.printf("  Total size %d\n", total_size);
#endif
}

