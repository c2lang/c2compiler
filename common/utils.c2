/* Copyright 2022-2025 Bas van den Berg
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

module utils;

import constants;
import file_utils;

import std local;

public fn u64 now() @(unused) {
    std.Timeval tv;
    std.gettimeofday(&tv, nil);
    u64 now64 = cast<u64>(tv.tv_sec);
    now64 *= 1000000;
    now64 += tv.tv_usec;
    return now64;
}

public type PathInfo struct {
    char[file_utils.Max_path] orig2root; // subdir/subdir/
    char[file_utils.Max_path] root2orig; // ../../
}

public fn bool PathInfo.hasSubdir(const PathInfo* pi) {
    return pi.orig2root[0] != 0;
}

// info may be nil
public fn bool findProjectDir(PathInfo* info) {
    if (info) {
        info.root2orig[0] = 0;
        info.orig2root[0] = 0;
    }
    char[file_utils.Max_path] base_path;
    char[file_utils.Max_path] rel_path;
    base_path[0] = 0;
    rel_path[0] = 0;

    char[file_utils.Max_path] buffer;
    while (1) {
        char* path = getcwd(buffer, elemsof(buffer));
        if (path == nil) {
            perror("getcwd");
            return false;
        }
        if (base_path[0] == 0) strcpy(base_path, path);

        Stat buf;
        if (stat(constants.recipe_name, &buf)) {
            if (path[0] == '/' && path[1] == '\0') return false;
            if (errno != ENOENT) {
                perror("stat");
                return false;
            }
        } else {
            // must be file, not dir
            if ((buf.st_mode & S_IFMT) == S_IFREG) {
                char* path_prefix = base_path + strlen(path);
                if (*path_prefix == '/') path_prefix++;
                if (info) {
                    strcpy(info.orig2root, path_prefix);
                    strcpy(info.root2orig, rel_path);
                }
                return true;
            }
        }
        if (chdir("..")) {
            perror("chdir");
            return false;
        }
        strcat(rel_path, "../");
    }
    return false; // to satisfy compiler
}

public fn const char* findBuildFile() @(unused) {
    Stat buf;
    i32 error = stat(constants.buildfile_name, &buf);
    if (error) return nil;

    return constants.buildfile_name;
}

