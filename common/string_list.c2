/* Copyright 2022-2025 Bas van den Berg
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

module string_list;

import string_pool;
import string local;
import stdlib;

public type List struct {
    string_pool.Pool* pool;
    u32* indexes;   // into pool
    u32 count;
    u32 capacity;
}

public fn void List.init(List* l, string_pool.Pool* pool) {
    memset(l, 0, sizeof(List));
    l.pool = pool;
    l.resize(16);
}

public fn void List.free(List* l) {
    stdlib.free(l.indexes);
}

public fn void List.clear(List* l) {
    l.count = 0;
}

fn void List.resize(List* l, u32 capacity) {
    l.capacity = capacity;
    u32* indexes2 = stdlib.malloc(capacity * sizeof(u32));
    if (l.count) {
        memcpy(indexes2, l.indexes, l.count * sizeof(u32));
        stdlib.free(l.indexes);
    }
    l.indexes = indexes2;
}

public fn void List.add(List* l, u32 name_idx) {
    if (l.count == l.capacity) l.resize(l.capacity * 2);

    l.indexes[l.count] = name_idx;
    l.count++;
}

// remove an index from the string list
// return number of items removed.
public fn u32 List.del(List* l, u32 idx) {
    u32 j = 0;
    u32 count = l.count;
    for (u32 i = 0; i < count; i++) {
        if (l.indexes[i] != idx)
            l.indexes[j++] = l.indexes[i];
    }
    l.count = j;
    return count - j;
}

public fn void List.addStr(List* l, const char* str) {
    l.add(l.pool.addStr(str, true));
}

public fn bool List.contains(const List* l, const char* name) {
    for (u32 i=0; i<l.count; i++) {
        if (strcmp(l.pool.idx2str(l.indexes[i]), name) == 0) return true;
    }
    return false;
}

public fn bool List.contains_idx(const List* l, u32 idx) {
    for (u32 i=0; i<l.count; i++) {
        if (l.indexes[i] == idx) return true;
    }
    return false;
}

public fn u32 List.length(const List* l) {
    return l.count;
}

public fn const char* List.get(const List* l, u32 idx) {
    return l.pool.idx2str(l.indexes[idx]);
}

public fn u32 List.get_idx(const List* l, u32 idx) {
    return l.indexes[idx];
}

public fn u32* List.getData(List* l) {
    return l.indexes;
}
