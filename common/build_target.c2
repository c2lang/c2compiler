/* Copyright 2022-2025 Bas van den Berg
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

module build_target;

import library_list;
import src_loc local;
import string_list;
import string_pool;
import warning_flags;

import stdlib;
import string;

public type BackEndKind enum u8 {
    None,
    C,
    IR,
}

public type Kind enum u8 {
    Image,
    Executable,
    StaticLibrary,
    DynamicLibrary,
}

public fn bool has_dynamic(Kind k) {
    switch (k) {
    case Image:
        return false;
    case Executable:
        return true;
    case StaticLibrary:
        return false;
    case DynamicLibrary:
        return true;
    }
    return false;
}

public type Plugin struct {
    u32 name; // into pool
    u32 options; // into pool
    SrcLoc loc;
}

public type PluginList struct {
    Plugin* plugins;        // malloc'ed, ownership
    u32 count;
    u32 capacity;
}

public fn void PluginList.init(PluginList* l) {
    string.memset(l, 0, sizeof(PluginList));
}

public fn void PluginList.free(PluginList* l) {
    stdlib.free(l.plugins);
}

public fn u32 PluginList.size(const PluginList* l) { return l.count; }

public fn const Plugin* PluginList.get(const PluginList* l, u32 idx) {
    return &l.plugins[idx];
}

public fn void PluginList.add(PluginList* l, u32 name, u32 options, SrcLoc loc) {
    if (l.count == l.capacity) {
        l.capacity = l.capacity ? l.capacity * 2 : 4;
        Plugin* plugins2 = stdlib.malloc(l.capacity * sizeof(Plugin));
        if (l.count) {
            string.memcpy(plugins2, l.plugins, l.count * sizeof(Plugin));
            stdlib.free(l.plugins);
        }
        l.plugins = plugins2;
    }
    Plugin* p = &l.plugins[l.count];
    p.name = name;
    p.options = options;
    p.loc = loc;
    l.count++;
}

public type File struct {
    u32 name;       // index into auxPool
    SrcLoc loc;
}

public type Target struct @(opaque) {
    u32 name_idx;       // index into auxPool
    SrcLoc loc;
    warning_flags.Flags warnings;
    Kind kind;

    bool disable_asserts;
    bool force_initializers;
    bool no_libc;
    BackEndKind backend;
    bool backend_no_build;
    bool backend_fast;

    string_list.List features;
    library_list.List libs;
    string_list.List exports;
    PluginList plugins;

    File* files;
    u32 num_files;
    u32 max_files;

    File* asm_files;
    u32 asm_file_count;
    u32 asm_file_max;
}

public fn Target* create(u32 name_idx, SrcLoc loc, Kind kind, string_pool.Pool* pool) {
    Target* t = stdlib.calloc(1, sizeof(Target));
    t.name_idx = name_idx;
    t.loc = loc;
    // remove this once the bootstrap handles improved flow analysis
    t.warnings.no_unreachable_code = true;
    t.kind = kind;
    t.max_files = 8;
    t.features.init(pool);
    t.libs.init();
    t.exports.init(pool);
    t.files = stdlib.malloc(t.max_files * sizeof(File));
    t.asm_file_max = 4;
    t.asm_files = stdlib.malloc(t.asm_file_max * sizeof(File));
    return t;
}

public fn void Target.free(Target* t) {
    t.exports.free();
    t.plugins.free();
    t.libs.free();
    t.features.free();
    stdlib.free(t.files);
    stdlib.free(t.asm_files);
    stdlib.free(t);
}

public fn u32 Target.getNameIdx(const Target* t) { return t.name_idx; }

public fn void Target.setNameIdx(Target* t, u32 name_idx) {
    t.name_idx = name_idx;
}

public fn u32 Target.numFiles(const Target* t) { return t.num_files; }

public fn u32 Target.numAsmFiles(const Target* t) { return t.asm_file_count; }

public fn const string_list.List* Target.getFeatures(const Target* t) { return &t.features; }

public fn void Target.addFeature(Target* t, u32 feature) {
    t.features.add(feature);
}

public fn void Target.addPlugin(Target* t, u32 name, u32 options, SrcLoc loc) {
    t.plugins.add(name, options, loc);
}

public fn const PluginList* Target.getPlugins(const Target* t) { return &t.plugins; }


public fn void Target.disableAsserts(Target* t) { t.disable_asserts = true; }

public fn bool Target.hasAsserts(const Target* t) { return !t.disable_asserts; }

public fn void Target.enableForceInitializers(Target* t) { t.force_initializers = true; }

public fn bool Target.hasForceInitializers(const Target* t) { return t.force_initializers; }

public fn void Target.visitLibs(const Target* t, library_list.Visitor visitor, void* arg) {
    t.libs.visit(visitor, arg);
}

public fn bool Target.hasLib(const Target* t, u32 lib) {
    return t.libs.contains(lib);
}

public fn void Target.addLib(Target* t, u32 lib, bool is_static) {
    t.libs.add(lib, is_static);
}

public fn void Target.disableWarnings(Target* t) {
    t.warnings.no_unused = true;
    t.warnings.no_unused_variable = true;
    t.warnings.no_unused_function = true;
    t.warnings.no_unused_parameter = true;
    t.warnings.no_unused_type = true;
    t.warnings.no_unused_module = true;
    t.warnings.no_unused_import = true;
    t.warnings.no_unused_public = true;
    t.warnings.no_unused_label = true;
    t.warnings.no_unused_enum_constant = true;
    t.warnings.no_unreachable_code = true;
}

public fn void Target.enableWarnings(Target* t) {
    t.warnings.no_unused = false;
    t.warnings.no_unused_variable = false;
    t.warnings.no_unused_function = false;
    t.warnings.no_unused_parameter = false;
    t.warnings.no_unused_type = false;
    t.warnings.no_unused_module = false;
    t.warnings.no_unused_import = false;
    t.warnings.no_unused_public = false;
    t.warnings.no_unused_label = false;
    t.warnings.no_unused_enum_constant = false;
    t.warnings.no_unreachable_code = false;
}

public fn const warning_flags.Flags* Target.getWarnings(const Target* t) {
    return &t.warnings;
}

public fn warning_flags.Flags* Target.getWarnings2(Target* t) {
    return &t.warnings;
}

public fn void Target.addExport(Target* t, u32 export) {
    t.exports.add(export);
}

public fn const string_list.List* Target.getExports(const Target* t) { return &t.exports; }

public fn Kind Target.getKind(const Target* t) { return t.kind; }

public fn bool Target.needsMain(const Target* t) {
    switch (t.kind) {
    case Image:
    case Executable:
        return true;
    case StaticLibrary:
    case DynamicLibrary:
        break;
    }
    return false;
}

public fn bool Target.addFile(Target* t, u32 filename, SrcLoc loc) {
    // check for duplicates
    for (u32 i=0; i<t.num_files; i++) {
        if (t.files[i].name == filename) return false;
    }

    if (t.num_files == t.max_files) {
        t.max_files *= 2;
        File* files2 = stdlib.malloc(t.max_files * sizeof(File));
        string.memcpy(files2, t.files, t.num_files * sizeof(File));
        stdlib.free(t.files);
        t.files = files2;
    }

    t.files[t.num_files].name = filename;
    t.files[t.num_files].loc = loc;
    t.num_files++;
    return true;
}

public fn const File* Target.getFile(const Target* t, u32 idx) {
    return &t.files[idx];
}

public fn bool Target.addAsmFile(Target* t, u32 filename, SrcLoc loc) {
    // check for duplicates
    for (u32 i=0; i<t.asm_file_count; i++) {
        if (t.asm_files[i].name == filename) return false;
    }

    if (t.asm_file_count == t.asm_file_max) {
        t.asm_file_max *= 2;
        File* files2 = stdlib.malloc(t.asm_file_max * sizeof(File));
        string.memcpy(files2, t.files, t.asm_file_count * sizeof(File));
        stdlib.free(t.asm_files);
        t.asm_files = files2;
    }

    t.asm_files[t.asm_file_count].name = filename;
    t.asm_files[t.asm_file_count].loc = loc;
    t.asm_file_count++;
    return true;
}

public fn const File* Target.getAsmFile(const Target* t, u32 idx) {
    return &t.asm_files[idx];
}

public fn void Target.setNoLibC(Target* t) {
    t.no_libc = true;
}

public fn bool Target.getNoLibC(const Target* t) {
    return t.no_libc;
}

public fn BackEndKind Target.getBackEnd(const Target* t) {
    return t.backend;
}

public fn bool Target.hasBackEnd(const Target* t) {
    return t.backend != BackEndKind.None;
}

public fn void Target.setBackEnd(Target* t, BackEndKind kind) {
    t.backend = kind;
}

public fn void Target.setNoBuild(Target* t) {
    t.backend_no_build = true;
}

public fn bool Target.getNoBuild(const Target* t) {
    return t.backend_no_build;
}

public fn void Target.setFastBuild(Target* t) {
    t.backend_fast = true;
}

public fn bool Target.getFastBuild(const Target* t) {
    return t.backend_fast;
}

