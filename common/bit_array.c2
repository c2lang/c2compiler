/* Copyright 2022-2025 Bas van den Berg
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

module bit_array;

import std;

public const u32 MaxBits = 256;    // must be 64-bit multiple

public type BitArray struct {
    u64[MaxBits / 64] data;
}

public fn void BitArray.reset(BitArray* a, u32 cap) {
    assert(cap <= MaxBits);
    u32 num_words = (cap + 63) / 64;
    std.memset(a.data, 0, num_words * sizeof(u64));
}

public fn void BitArray.set(BitArray* a, u32 idx) {
    //assert(idx < a.cap);
    u32 word = idx / 64;
    idx -= word * 64;
    a.data[word] |= (cast<u64>(1) << idx);
}

public fn void BitArray.clear(BitArray* a, u32 idx) {
    //assert(idx < MaxBits);
    u32 word = idx / 64;
    idx -= word * 64;
    a.data[word] &= ~(cast<u64>(1) << idx);
}

public fn bool BitArray.get(const BitArray* a, u32 idx) {
    //assert(idx < MaxBits);
    u32 word = idx / 64;
    idx -= word * 64;
    return (a.data[word] >> idx) & 0x1;
}

