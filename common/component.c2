/* Copyright 2022-2025 Bas van den Berg
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

module component;

import ast;
import ast_context;
import color;
import module_list;
import string_buffer;
import string_list;
import string_pool;

import stdlib local;
import string;
import stdio local;

/*
    Represents a library or the main-component

    Used to:
    - create + store Modules
*/

public type Kind enum u8 {
    Internal,
    Image,
    Executable,
    StaticLibrary,
    DynamicLibrary,
    // for libraries
    ExternalStatic, // must be first external kind
    ExternalDynamic,
}

const char*[] kind_names = {
    "internal",
    "image",
    "executable",
    "static library",
    "dynamic library",
    "external static library",
    "external dynamic library",
}

static_assert(elemsof(Kind), elemsof(kind_names));

public type Component struct @(opaque) {
    u32 name_idx;   // into auxPool
    u32 dirname_idx;   // into auxPool
    u32 linkname;   // into auxPool
    Kind kind;
    bool is_direct; // only for external, if used directly (otherwise sub-dep)
    bool is_foreign;        // only for external
    bool available_static;  // only for external
    bool available_dynamic; // only for external

    ast_context.Context* context;   // no ownership
    string_pool.Pool* auxPool;      // no ownership
    module_list.List* allmodules;   // no ownership

    module_list.List mods;
    string_list.List deps;
}

public fn Component* create(ast_context.Context* context,
                              string_pool.Pool* auxPool,
                              module_list.List* allmodules,
                              u32 name_idx, // into auxPool
                              Kind kind,
                              bool is_direct)
{
    Component* c = calloc(1, sizeof(Component));
    c.name_idx = name_idx;
    c.kind = kind;
    c.is_direct = is_direct;
    c.context = context;
    c.auxPool = auxPool;
    c.allmodules = allmodules;

    c.mods.init(true, 4);
    c.deps.init(auxPool);
    return c;
}

fn void Component.free(Component* c) {
    c.mods.free();
    c.deps.free();
    free(c);
}

public fn const char* Component.getName(const Component* c) {
    return c.auxPool.idx2str(c.name_idx);
}

public fn u32 Component.getNameIdx(const Component* c) {
    return c.name_idx;
}

public fn void Component.setPath(Component* c, u32 dirname) {
    c.dirname_idx = dirname;
}

public fn const char* Component.getPath(const Component* c) {
    return c.auxPool.idx2str(c.dirname_idx);
}

public fn void Component.setForeign(Component* c, bool is_foreign) {
    c.is_foreign = is_foreign;
}

public fn bool Component.getForeign(const Component* c) {
    return c.is_foreign;
}

public fn void Component.setLinkName(Component* c, const char* name) {
    c.linkname = c.auxPool.addStr(name, false);
}

public fn const char* Component.getLinkName(const Component* c) {
    if (c.linkname) return c.auxPool.idx2str(c.linkname);
    return nil;
}

public fn bool Component.isExternal(const Component* c) {
    return c.kind >= Kind.ExternalStatic;
}

// only used by plugins
public fn bool Component.isInternal(const Component* c) @(unused) {
    return c.kind == Kind.Internal;
}

//public fn bool Component.isDirect(const Component* c) { return c.is_direct; }

public fn void Component.setKind(Component* c, bool is_static, bool is_dynamic) {
    c.available_static = is_static;
    c.available_dynamic = is_dynamic;
}

public fn bool Component.isStaticLib(const Component* c) {
    return c.kind == Kind.StaticLibrary || c.kind == Kind.ExternalStatic;
}

public fn bool Component.isAvailableStatic(const Component* c) { return c.available_static; }

public fn bool Component.isAvailableDynamic(const Component* c) { return c.available_dynamic; }

public fn void Component.visitModules(const Component* c, module_list.Visitor visitor, void* arg) {
    c.mods.visit(visitor, arg);
}

public fn module_list.List* Component.getModules(Component* c) { return &c.mods; }

public fn ast.Module* Component.getOrAddModule(Component* c, u32 name_idx) {
    ast.Module* m = c.mods.find(name_idx);
    if (m) return m;

    return c.createModule(name_idx);
}

public fn ast.Module* Component.createModule(Component* c, u32 name_idx) @(unused) {
    ast.Module* m = c.allmodules.find(name_idx);
    if (m) return nil;

    m = ast.Module.create(c.context, name_idx, c.isExternal(), c.is_direct);

    c.mods.add(m);
    c.allmodules.add(m);
    return m;
}

public fn bool Component.hasModule(const Component* c, const ast.Module* mod) {
    return c.mods.contains(mod);
}

public fn void Component.print(const Component* c, bool show_funcs) {
    string_buffer.Buf* out = string_buffer.create(128*1024, color.useColor(), 1);
    const ast.Module** mods = c.mods.getConst();
    for (u32 i=0; i<c.mods.length(); i++) {
        mods[i].print(out, show_funcs);
    }
    out.color(color.Normal);
    stdio.puts(out.data());
    out.free();
}

public fn void Component.printModules(const Component* c) {
    string_buffer.Buf* out = string_buffer.create(4096, color.useColor(), 1);
    out.print("--- %s [%s]", c.getName(), kind_names[c.kind]);
    if (!c.is_direct) out.add(" (indirect)");
    out.add(" ---\n");
    const ast.Module** mods = c.mods.getConst();
    for (u32 i=0; i<c.mods.length(); i++) {
        const ast.Module* m = mods[i];
        const char* col = m.isUsed() ? color.Normal : color.Grey;
        out.color(col);
        out.print("   %s\n", m.getName());
    }
    out.color(color.Normal);
    stdio.puts(out.data());
    out.free();
}

public fn void Component.printSymbols(const Component* c, bool print_external) {
    if (c.isExternal() != print_external) return;

    string_buffer.Buf* out = string_buffer.create(4096, color.useColor(), 1);
    out.print("--- %s [%s] ---\n", c.getName(), kind_names[c.kind]);
    const ast.Module** mods = c.mods.getConst();
    for (u32 i=0; i<c.mods.length(); i++) {
        out.color(color.Cyan);
        out.print("  %s\n", mods[i].getName());
        const ast.SymbolTable* table = mods[i].getSymbols();
        table.print(out);
    }
    out.color(color.Normal);
    stdio.puts(out.data());
    out.free();
}

public fn void Component.addDep(Component* c, const char* dep) {
    u32 dep_idx = c.auxPool.addStr(dep, true);
    c.deps.add(dep_idx);
}

public fn string_list.List* Component.getDeps(Component* c) {
    return &c.deps;
}


public type List struct {
    Component** components;
    u32 count;
    u32 capacity;
}

public fn void List.init(List* l) {
    l.components = nil;
    l.count = 0;
    l.resize(4);
}

public fn void List.free(List* l) {
    for (u32 i=0; i<l.count; i++) {
        l.components[i].free();
    }
    free(l.components);
}

fn void List.resize(List* l, u32 capacity) {
    l.capacity = capacity;
    Component** comps2 = malloc(l.capacity * sizeof(Component*));
    if (l.count) {
        string.memcpy(comps2, l.components, l.count * sizeof(Component*));
        free(l.components);
    }
    l.components = comps2;
}

public fn void List.add(List* l, Component* c) {
    if (l.count == l.capacity) l.resize(l.capacity * 2);

    l.components[l.count] = c;
    l.count++;
}

public fn u32 List.size(const List* l) {
    return l.count;
}

public fn Component* List.get(const List* l, u32 idx) {
    return l.components[idx];
}

public fn Component** List.get_all(List* l) {
    return l.components;
}

public fn Component* List.getLast(const List* l) {
    if (l.count == 0) return nil;
    return l.components[l.count-1];
}

public fn bool Component.isLibrary(const Component* c) {
    return c.kind == Kind.StaticLibrary || c.kind == Kind.DynamicLibrary;
}

public fn Kind Component.getKind(const Component* c) {
    return c.kind;
}

