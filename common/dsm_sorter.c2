/* Copyright 2022-2025 Bas van den Berg
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

module dsm_sorter;

import std;

public type Sorter struct {
    u8* array;
    u32 count;
}

public fn void Sorter.init(Sorter* s, u32 count) {
    s.array = std.calloc(1, count * (count + 2));  // one extra line for todo, one for results
    s.count = count;
    assert(count <= 256); // otherwise wont fit in u8 result

}
public fn void Sorter.free(Sorter* s) {
    std.free(s.array);
}

public fn void Sorter.add_dep(Sorter* s, u32 src, u32 dst) {
    u32 offset = src * s.count + dst;
    s.array[offset] = 1;
}

public fn const u8* Sorter.get_array(Sorter* s) {
    return s.array;
}

public fn const u8* Sorter.sort(Sorter* s) {
    const u32 count = s.count;

    u8* sorted = &s.array[count*(count+1)];
    // Note: max modules is 256 this way!
    u8* ringbuf = &s.array[count*count];
    u32 head = 0;
    u32 size = count;
    for (u8 i=0; i<count; i++) ringbuf[i] = i;

    u32 iterations = 0;
    while (size) {
        if (iterations > size) {
            return nil; // circular dependencies
        }

        u8 idx = ringbuf[head];
        head = (head + 1) % count;
        // Note: dont change size yet

        u32 offset = idx*count;
        bool has_deps = false;
        for (u32 j=0; j<count; j++) {
            if (s.array[offset + j] != 0) {
                has_deps = true;
                break;
            }
        }
        if (has_deps) {
            // note: head already updated, so size - 1
            ringbuf[(head + size -1) % count] = idx;
            iterations++;
        } else {
            sorted[count-size] = cast<u8>(idx);
            iterations = 0;
            size--;
            // clear this module's dependencies
            for (u32 x=0; x<count; x++) s.array[x*count + idx] = 0;
        }
    }
    return sorted;
}

