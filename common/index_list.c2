/* Copyright 2022-2025 Bas van den Berg
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

module index_list;

import std;

public type List struct {
    u32 count;
    u32 capacity;
    u32* data;
}

public fn void List.init(List* l, u32 initial) {
    l.count = 0;
    l.data = nil;
    l.resize(initial);
}

public fn void List.free(List* l) {
    std.free(l.data);
}

public fn void List.clear(List* l) {
    l.count = 0;
}

public fn void List.add(List* l, u32 item) {
    if (l.count == l.capacity) l.resize(l.capacity * 2);
    l.data[l.count] = item;
    l.count++;
}

public fn u32* List.getFrom(const List* l, u32 idx) {
    return &l.data[idx];
}

public fn u32 List.getCount(const List* l) {
    return l.count;
}

fn void List.resize(List* l, u32 cap) {
    l.capacity = cap;
    u32* data2 = std.malloc(l.capacity * sizeof(u32));
    if (l.data) {
        std.memcpy(data2, l.data, l.count * sizeof(u32));
        std.free(l.data);
    }
    l.data = data2;
}


