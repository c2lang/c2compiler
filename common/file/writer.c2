/* Copyright 2022-2025 Bas van den Berg
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

module file_utils;

import std local;

fn isize write2(i32 hd, const void* data, usize len) {
    const u8* p = data;
    isize total_written = 0;
    while (len > 0) {
        isize written = write(hd, p, len);
        if (written >= 0) {
            total_written += written;
            p += written;
            len -= written;
        } else {
            if (errno != EINTR)
                return -1;
        }
    }
    return total_written;
}

public fn bool File.write(File* file, const void* data, usize len) {
    if (file.error) return false;

    i32 fd = open(file.path, O_CREAT | O_WRONLY | O_TRUNC | O_BINARY, 0660);
    if (fd < 0) {
        file.error = errno;
        return false;
    }

    isize written = write2(fd, data, len);
    if (written < 0) {
        file.error = errno;
        close(fd);
        return false;
    }

    // TODO: store number of bytes written to file?
    if ((usize)written != len) {
        file.error = Err_write_error;
        close(fd);
        return false;
    }

    close(fd);
    return true;
}
