/* Copyright 2022-2025 Bas van den Berg
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

module file_utils;

import libc_fcntl local;
import c_errno local;
import string local;
import unistd local;

const i32 Err_write_error = 2003;

public type Writer struct {
    i32 errno_;
}

public fn bool Writer.write(Writer* writer, const char* filename, const void* data, u32 len) {
    writer.errno_ = 0;

    i32 fd = open(filename, O_CREAT | O_WRONLY | O_TRUNC | O_BINARY, 0660);
    if (fd == -1) {
        writer.errno_ = errno;
        return false;
    }

    // TODO: handle chunked or interrupted I/O
    i64 written = write(fd, data, len);
    if (written < 0) {
        writer.errno_ = errno;
        close(fd);
        return false;
    }
    if (written != len) {
        writer.errno_ = Err_write_error;
        close(fd);
        return false;
    }

    close(fd);
    return true;
}

public fn const char* Writer.getError(const Writer* file) @(unused) {
    const char *msg;
    switch (file.errno_) {
    case Err_read_error:
        msg = "read error";
        break;
    default:
        msg = string.strerror(file.errno_);
        break;
    }
    return msg;
}

