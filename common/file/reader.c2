/* Copyright 2022-2025 Bas van den Berg
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

module file_utils;

import libc_fcntl local;
import c_errno local;
import sys_stat local;
import unistd local;
import stdlib;

u8 empty;

public const i32 Err_not_a_file = 2001;

public type Reader struct {
    void* region;
    u32 size;
    i32 errno;
}

public fn bool Reader.open(Reader* file, const char* filename) {
    file.region = nil;
    file.size = 0;

    i32 fd = open(filename, O_RDONLY);
    if (fd == -1) {
        file.errno = *errno2();
        return false;
    }

    Stat statbuf;
    i32 err = fstat(fd, &statbuf);
    if (err) {
        file.errno = *errno2();
        return false;
    }

    if (statbuf.st_mode & S_IFMT != S_IFREG) {
        close(fd);
        file.errno = Err_not_a_file;
        return false;
    }

    file.size = cast<u32>(statbuf.st_size);

    if (file.size == 0) {
        file.region = &empty;
    } else {
        file.region = stdlib.malloc(file.size+1);
        isize numread = read(fd, file.region, file.size);
        if (numread != file.size) return false;
        // 0-terminate
        u8* ptr = file.region;
        ptr[file.size] = 0;
    }
    close(fd);
    return true;
}

public fn void Reader.close(Reader* file) {
    if (file.size) {
        stdlib.free(file.region);
        file.region = nil;
    }
}

public fn bool Reader.isOpen(const Reader* file) {
    return file.region != nil;
}

public fn const u8* Reader.data(Reader* file) @(unused) {
    return cast<u8*>(file.region);
}

public fn const char* Reader.char_data(Reader* file) @(unused) {
    return cast<char*>(file.region);
}

public fn bool Reader.isEmpty(const Reader* file) @(unused) {
    return file.size == 0;
}

