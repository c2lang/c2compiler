/* Copyright 2022-2025 Bas van den Berg
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

module file_utils;

import libc_fcntl local;
import c_errno local;
import sys_stat local;
import unistd local;
import stdlib;
import string local;

u8 empty;

const i32 Err_not_a_file = 2001;
const i32 Err_read_error = 2002;
const i32 Err_too_large = 2003;

public type Reader struct {
    u8* region;
    u32 size;
    i32 error;
}

fn isize read2(i32 hd, void* data, usize len) {
    u8* p = data;
    isize total_read = 0;
    while (len > 0) {
        isize nread = read(hd, p, len);
        if (nread >= 0) {
            total_read += nread;
            p += nread;
            len -= nread;
        } else {
            if (errno != EINTR)
                return -1;
        }
    }
    return total_read;
}

public fn bool Reader.open(Reader* file, const char* filename) {
    file.region = nil;
    file.size = 0;
    file.error = 0;

    i32 fd = open(filename, O_RDONLY | O_BINARY);
    if (fd == -1) {
        file.error = errno;
        return false;
    }

    Stat statbuf;
    if (fstat(fd, &statbuf)) {
        file.error = errno;
        close(fd);
        return false;
    }

    if ((statbuf.st_mode & S_IFMT) != S_IFREG) {
        file.error = Err_not_a_file;
        close(fd);
        return false;
    }

    u32 size = (u32)statbuf.st_size;
    if (size != statbuf.st_size) {
        file.error = Err_too_large;
        close(fd);
        return false;
    }

    u8* region = stdlib.malloc(size + 1);
    i64 numread = read2(fd, region, size);
    if (numread < 0) {
        file.error = errno;
        stdlib.free(region);
        close(fd);
        return false;
    }
    if (numread != size) {
        file.error = Err_read_error;
        stdlib.free(region);
        close(fd);
        return false;
    }
    region[size] = '\0';
    file.region = region;
    file.size = size;
    close(fd);
    return true;
}

public fn void Reader.close(Reader* file) {
    if (file.size) {
        stdlib.free(file.region);
        file.region = nil;
        file.size = 0;
    }
}

public fn bool Reader.isOpen(const Reader* file) {
    return file.region != nil;
}

public fn const u8* Reader.udata(Reader* file) @(unused) {
    return file.region;
}

public fn const char* Reader.data(Reader* file) @(unused) {
    return cast<const char*>(file.region);
}

public fn bool Reader.isEmpty(const Reader* file) @(unused) {
    return file.size == 0;
}

public fn const char* Reader.getError(const Reader* file) @(unused) {
    const char *msg;
    switch (file.error) {
    case Err_not_a_file:
        msg = "not a regular file";
        break;
    case Err_read_error:
        msg = "read error";
        break;
    case Err_too_large:
        msg = "file too large";
        break;
    default:
        msg = strerror(file.error);
        break;
    }
    return msg;
}
