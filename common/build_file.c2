/* Copyright 2022-2025 Bas van den Berg
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

module build_file;

import string_pool;
import source_mgr;
import src_loc local;
import string_list;
import yaml;

import stdlib;
import string;
import stdio local;

public type Plugin struct {
    u32 name;    //  index into pool
    u32 options; // index into pool
    SrcLoc loc; // TODO FILL (is in yaml parser)
}

public type Info struct @(opaque) {
    string_pool.Pool* pool; // no ownership
    const char* filename;   // no ownership

    // all indexes into pool
    u32 target;
    u32 output_dir;
    u32 cc;
    u32 cflags;
    u32 ldflags;    // before other flags
    u32 ldflags2;   // after other flags
    u32 asmflags;
    u32 linkerscript;

    string_list.List lib_dirs;
    string_list.List plugin_dirs;

    Plugin* plugins; // can be nil
    u32 plugin_count;
    u32 plugin_max;
}

fn void Info.addPlugin(Info* info, const char* name, const char* options, SrcLoc loc) {
    if (info.plugin_count == info.plugin_max) {
        info.plugin_max += 2;
        Plugin* plugins2 = stdlib.malloc(info.plugin_max * sizeof(Plugin));
        if (info.plugins) {
            string.memcpy(plugins2, info.plugins, info.plugin_count * sizeof(Plugin));
            stdlib.free(info.plugins);
        }
        info.plugins = plugins2;
    }

    Plugin* p = &info.plugins[info.plugin_count];
    info.plugin_count++;
    p.name = info.pool.addStr(name, false);
    p.options = info.pool.addStr(options, false);
    p.loc = loc;
}

public fn const char* Info.getTarget(const Info* info) {
    if (info.target) return info.pool.idx2str(info.target);
    return nil;
}

public fn const char* Info.getOutputDir(const Info* info) {
    if (info.output_dir) return info.pool.idx2str(info.output_dir);
    return nil;
}

public fn const char* Info.getCC(const Info* info) {
    if (info.cc) return info.pool.idx2str(info.cc);
    return nil;
}

public fn const char* Info.getCFlags(const Info* info) {
    if (info.cflags) return info.pool.idx2str(info.cflags);
    return nil;
}

public fn const char* Info.getLdFlags(const Info* info) {
    if (info.ldflags) return info.pool.idx2str(info.ldflags);
    return nil;
}

public fn const char* Info.getLdFlags2(const Info* info) {
    if (info.ldflags2) return info.pool.idx2str(info.ldflags2);
    return nil;
}

public fn const char* Info.getAsmFlags(const Info* info) {
    if (info.asmflags) return info.pool.idx2str(info.asmflags);
    return nil;
}

public fn const char* Info.getLinkerScript(const Info* info) {
    if (info.linkerscript) return info.pool.idx2str(info.linkerscript);
    return nil;
}

public fn const string_list.List* Info.getLibDirs(const Info* info) {
    return &info.lib_dirs;
}

public fn const string_list.List* Info.getPluginDirs(const Info* info) {
    return &info.plugin_dirs;
}

public fn const Plugin* Info.getPlugin(const Info* info, u32 idx) {
    return &info.plugins[idx];
}

public fn u32 Info.getNumPlugins(const Info* info) {
    return info.plugin_count;
}

/*
fn const yaml.Node* get_checked(yaml.Parser* parser, const char* path) {
    const yaml.Node* node = parser.findNode(path);
    if (!node) {
        // TODO print manifest filename
        fprintf(stderr, "missing node %s\n", path);
        stdlib.exit(-1);
    }
    return node;
}
*/

fn u32 Info.expand(Info* info, const char* raw) {
    if (!raw) return 0;

    if (raw[0] == '$') {
        // TODO expand with environment variable
        const char* expand = stdlib.getenv(raw + 1);
        if (!expand) {
            fprintf(stderr, "[build-file] warning: environment variable '%s' not set!\n", raw + 1);
            return 0;
        }
        raw = expand;
    }

    return info.pool.addStr(raw, false);
}

fn bool getYamlInfo(yaml.Parser* parser, Info* info) {
    const char* target = parser.getScalarValue("target");
    info.target = info.expand(target);

    const char* outputDir = parser.getScalarValue("output_dir");
    info.output_dir = info.expand(outputDir);

    const char* cc = parser.getScalarValue("toolchain.cc");
    info.cc = info.expand(cc);

    const char* cflags = parser.getScalarValue("toolchain.cflags");
    info.cflags = info.expand(cflags);

    const char* ldflags = parser.getScalarValue("toolchain.ldflags");
    info.ldflags = info.expand(ldflags);

    const char* ldflags2 = parser.getScalarValue("toolchain.ldflags2");
    info.ldflags2 = info.expand(ldflags2);

    const char* asmflags = parser.getScalarValue("toolchain.asmflags");
    info.asmflags = info.expand(asmflags);

    const char* linkerscript = parser.getScalarValue("toolchain.linkerscript");
    info.linkerscript = info.expand(linkerscript);

    const yaml.Node* dirs = parser.findNode("libdir");
    yaml.Iter iter = parser.getNodeChildIter(dirs);
    while (!iter.done()) {
        const char* dir = iter.getValue();
        info.lib_dirs.add(info.expand(dir));
        iter.next();
    }

    dirs = parser.findNode("plugindir");
    iter = parser.getNodeChildIter(dirs);
    while (!iter.done()) {
        const char* dir = iter.getValue();
        info.plugin_dirs.add(info.expand(dir));
        iter.next();
    }

    // TODO iterate all nodes, extract all that start with 'plugin.'
    const yaml.Node* root = parser.getRoot();
    iter = parser.getNodeChildIter(root);
    while (!iter.done()) {
        const char* name = iter.getName();
        if (string.strncmp(name, "plugin.,", 7) == 0) {
            const char* options = iter.getChildScalarValue("options");
            if (!options) {
                fprintf(stderr, "[build-file] missing options for %s\n", name);
                stdlib.exit(-1);
            }
            SrcLoc loc = 0; // TODO
            info.addPlugin(name+7, options, loc);
        }
        iter.next();
    }

    return true;
}

fn bool Info.parse(Info* info, const char* data) {
    yaml.Parser* parser = yaml.Parser.create();
    bool ok = parser.parse(data);
    if (ok) {
        //parser.dump(true);
        ok = getYamlInfo(parser, info);
    } else {
        fprintf(stderr, "Error: %s\n", parser.getMessage());
    }

    parser.destroy();
    return ok;
}

public fn Info* parse(source_mgr.SourceMgr* sm, string_pool.Pool* pool, const char* filename) {
    // create on stack first. After successful parse, alloc on heap and return
    Info info = {}
    info.pool = pool;
    info.filename = filename;
    info.lib_dirs.init(pool);
    info.plugin_dirs.init(pool);

    u32 filename_idx = pool.addStr(filename, false);
    i32 file_id = sm.open(filename_idx, 0, false);
    if (file_id == -1) return nil;

    bool ok = info.parse(sm.get_content(file_id));

    sm.close(file_id);

    if (!ok) return nil;

    Info* result = stdlib.malloc(sizeof(Info));
    string.memcpy(result, &info, sizeof(Info));
    return result;
}

public fn void Info.free(Info* info) {
    info.lib_dirs.free();
    info.plugin_dirs.free();
    stdlib.free(info);
}

