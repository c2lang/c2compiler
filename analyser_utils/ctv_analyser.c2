/* Copyright 2022-2025 Bas van den Berg
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

module ctv_analyser;

import ast local;
import diagnostics;
import src_loc local;

type Limit struct {
    i64 min_val;
    u64 max_val;
}

fn void Limit.init(Limit* l, u32 width, bool is_signed) {
    if (is_signed) {
        i64 max_val = (i64)0x7FFFFFFFFFFFFFFF >> (64 - width);
        l.min_val = -max_val - 1;
        l.max_val = (u64)max_val;
    } else {
        l.min_val = 0;
        l.max_val = (u64)~(u64)0 >> (64 - width);
    }
}

#if 1
public fn Value get_value(const Expr* e) {
    return ast.evalExpr(e);
}
#else
public fn Value get_value(const Expr* e) {
    Value result = { }

    if (!e.isCtv()) {
        e.dump(); // TEMP
        assert(e.isCtv());
    }

    switch (e.getKind()) {
    case IntegerLiteral:
        const IntegerLiteral* i = (IntegerLiteral*)e;
        return i.getValue();
    case FloatLiteral:
        const FloatLiteral* f = (FloatLiteral*)e;
        return f.getValue();
    case BooleanLiteral:
        const BooleanLiteral* b = (BooleanLiteral*)e;
        return b.getValue();
    case CharLiteral:
        const CharLiteral* c = (CharLiteral*)e;
        return c.getValue();
    case StringLiteral:
        assert(0);
        break;
    case Nil:
        break;
    case Identifier:
        const IdentifierExpr* i = (IdentifierExpr*)e;
        return get_decl_value(i.getDecl());
    case Type:
    case Call:
    case InitList:
    case FieldDesignatedInit:
    case ArrayDesignatedInit:
        // should not happen
        break;
    case BinaryOperator:
        return get_binaryop_value((BinaryOperator*)e);
    case UnaryOperator:
        return get_unaryop_value((UnaryOperator*)e);
    case ConditionalOperator:
        ConditionalOperator* c = (ConditionalOperator*)e;
        Value v = get_value(c.getCond());
        return !v.isZero() ? get_value(c.getLHS()) : get_value(c.getRHS());
    case Builtin:
        const BuiltinExpr* bi = (BuiltinExpr*)e;
        return bi.getValue();
    case ArraySubscript:  // a[high:low], both included
        // note: can be CTV if BitOffsetExpr
        ArraySubscriptExpr* a = (ArraySubscriptExpr*)e;

        result = get_value(a.getBase());
        // Dont allow negative/float
        assert(result.isDecimal() && !result.isNegative());

        Expr* index = a.getIndex();
        assert(index.isBitOffset());
        BitOffsetExpr* bo = (BitOffsetExpr*)index;
        Value high = get_value(bo.getLHS());
        Value low = get_value(bo.getRHS());
        Value width = high.minus(&low);
        width.incr();
        // calculate result = (base >> low) & bitmask(width))
        result = result.right_shift(&low);
        result.mask(width.as_u32());
        break;
    case Member:
        const MemberExpr* m = (MemberExpr*)e;
        return get_decl_value(m.getFullDecl());
    case Paren:
        const ParenExpr* p = (ParenExpr*)e;
        return get_value(p.getInner());
    case BitOffset:
        assert(0); // TODO
        break;
    case ExplicitCast:
        const ExplicitCastExpr* i = (ExplicitCastExpr*)e;
        result = get_value(i.getInner());
        return result.castAs(e.getType());
    case ImplicitCast:
        const ImplicitCastExpr* i = (ImplicitCastExpr*)e;
        return get_value(i.getInner());
    case Range:
        // should not happen
        break;
    }

    return result;
}

fn Value get_decl_value(const Decl* d) {
    assert(d);
    switch (d.getKind()) {
    case EnumConstant:
        const EnumConstantDecl* ecd = (EnumConstantDecl*)d;
        return ecd.getValue();
    case Variable:
        const VarDecl* vd = (VarDecl*)d;
        const Expr* initval = vd.getInit();
        assert(initval);
        return get_value(initval);
    default:
        assert(0);
        break;
    }
    return Value.error("not a constant value");
}

fn Value get_unaryop_value(const UnaryOperator* e) {
    Value result = { }
    const Expr* inner = e.getInner();
    Value res2 = get_value(inner);

    switch (e.getOpcode()) {
    case PostInc:
    case PostDec:
    case PreInc:
    case PreDec:
        // should not happen
        break;
    case AddrOf:
    case Deref:
        // Allowed?
        break;
    case Plus:
        result = res2;
        break;
    case Minus:
        result = res2.negate();
        break;
    case Not:
        assert(res2.isDecimal()); // TODO give error
        result = res2.bitnot();
        break;
    case LNot:
        assert(res2.isDecimal()); // TODO give error
        result = res2.lnot();
        break;
    }
    return result;
}

fn Value get_binaryop_value(const BinaryOperator* e) {
    Value result = { }
    Value left = get_value(e.getLHS());
    Value right = get_value(e.getRHS());

    switch (e.getOpcode()) {
    case Multiply:
        result = left.multiply(&right);
        break;
    case Divide:
        // Note: should already be checked!
        result = left.divide(&right);
        break;
    case Remainder:
        // Note: should already be checked!
        result = left.remainder(&right);
        break;
    case Add:
        result = left.add(&right);
        break;
    case Subtract:
        result = left.minus(&right);
        break;
    case ShiftLeft:
        // Note: neither may be negative, should already be checked
        // TODO warn about overflow
        // TODO fix
        result = left.left_shift(&right);
        break;
    case ShiftRight:
        // Note: neither may be negative, should already be checked
        // Note: rhs value should be less than bitwidth of lhs type, should already be checked
        // TODO fix
        result = left.right_shift(&right);
        break;
    case LessThan:
        return Value.createBool(left.is_less(&right));
    case GreaterThan:
        return Value.createBool(left.is_greater(&right));
    case LessEqual:
        return Value.createBool(left.is_less_equal(&right));
    case GreaterEqual:
        return Value.createBool(left.is_greater_equal(&right));
    case Equal:
        return Value.createBool(left.is_equal(&right));
    case NotEqual:
        return Value.createBool(!left.is_equal(&right));
    case And:
        result = left.and(&right);
        break;
    case Xor:
        result = left.xor(&right);
        break;
    case Or:
        result = left.or(&right);
        break;
    case LAnd:
        result = left.land(&right);
        break;
    case LOr:
        result = left.lor(&right);
        break;
    case Assign:
    case MulAssign:
    case DivAssign:
    case RemAssign:
    case AddAssign:
    case SubAssign:
    case ShlAssign:
    case ShrAssign:
    case AndAssign:
    case XorAssign:
    case OrAssign:
        assert(0);
        break;
    }
    return result;
}
#endif

public fn bool check(diagnostics.Diags* diags, QualType qt, const Expr* e) {
    QualType canon = qt.getCanonicalType();
    if (!canon.isBuiltin()) return true;  // TODO find out cases

    assert(e.isCtv());

    Value value = ctv_analyser.get_value((e));

    if (value.kind == ValueKind.Error) {
        diags.errorRange(e.getLoc(), e.getRange(), "%s", value.error_msg);
        return false;
    }
    return checkTypeRange(diags, qt, &value, 0, e);
}

public fn bool checkBitfield(diagnostics.Diags* diags, u8 bitfield_width, bool bitfield_signed, const Expr* e) {
    Value value = ctv_analyser.get_value((e));
    if (value.kind == ValueKind.Error) {
        diags.errorRange(e.getLoc(), e.getRange(), "%s", value.error_msg);
        return false;
    }
    Limit limit.init(bitfield_width, bitfield_signed);

    if (!value.checkRange(limit.min_val, limit.max_val)) {
        diags.errorRange(e.getLoc(), e.getRange(), "constant value %s out-of-bounds for bitfield, range [%d, %d]",
                         value.str(), limit.min_val, limit.max_val);
        return false;
    }
    return true;
}

// Expr* e can be nil
public fn bool checkTypeRange(diagnostics.Diags* diags, QualType qt, Value* value, SrcLoc loc, const Expr* e) {
    QualType canon = qt.getCanonicalType();
    if (!canon.isBuiltin()) return true;  // TODO find out cases
    // hack to accept `u32 x = ~1;`
    if (e && e.isTilde()) return true;

    BuiltinType* bi = canon.getBuiltin();
    // TODO: check float32 range
    if (bi.getKind() == BuiltinKind.Float32 || bi.getKind() == BuiltinKind.Float64) return true;

    Limit limit.init(bi.getWidth(), bi.isSigned());

    if (!value.checkRange(limit.min_val, limit.max_val)) {
        SrcRange range = { 0, 0 }
        if (e) {
            loc = e.getLoc();
            range = e.getRange();
        }
        diags.errorRange(loc, range, "constant value %s out-of-bounds for type '%s', range [%d, %d]",
                         value.str(), qt.diagNameBare(), limit.min_val, limit.max_val);
        return false;
    }
    return true;
}

