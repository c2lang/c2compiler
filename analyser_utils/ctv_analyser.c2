/* Copyright 2022-2024 Bas van den Berg
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

module ctv_analyser;

import ast local;
import diagnostics;
import src_loc local;

public type Limit struct {
    i64 min_val;
    u64 max_val;
    const char* min_str;
    const char* max_str;
}

const Limit[] Limits = {
    // 1 - Bool
    {           0,          1,           "0",          "1" },
    // 7 - Char/Int8
    {        -128,        127,        "-128",        "127" },
    // 8 - UInt8
    {           0,        255,           "0",        "255" },
    // 15 - Int16
    {      -32768,      32767,      "-32768",      "32767" },
    // 16 - UInt16
    {           0,      65535,           "0",      "65535" },
    // 31 - Int32
    { -2147483648, 2147483647, "-2147483648", "2147483647" },
    // 32 - UInt32
    {          0,  4294967295,           "0", "4294967295" },
    // 63 - Int64
    // NOTE: minimum should be -..808, but clang complains about it..
    {-9223372036854775807,  9223372036854775807, "-9223372036854775808", "9223372036854775807" },
    // 64 - UInt64
    {                   0,  18446744073709551615, "0", "18446744073709551615" },
}

fn const Limit* getLimit(u32 width) {
    switch (width) {
    case 1: return &Limits[0];
    case 7: return &Limits[1];
    case 8: return &Limits[2];
    case 15: return &Limits[3];
    case 16: return &Limits[4];
    case 31: return &Limits[5];
    case 32: return &Limits[6];
    case 63: return &Limits[7];
    case 64: return &Limits[8];
    }
    assert(0);
    return nil;
}


public fn Value get_value(const Expr* e) {
    Value result = { }

    if (!e.isCtv()) e.dump(); // TEMP
    assert(e.isCtv());

    switch (e.getKind()) {
    case IntegerLiteral:
        const IntegerLiteral* i = cast<IntegerLiteral*>(e);
        result.kind = i.isSigned() ? ValueKind.SignedDecimal : ValueKind.UnsignedDecimal;
        result.uvalue = i.getValue();
        break;
    case FloatLiteral:
        const FloatLiteral* f = cast<FloatLiteral*>(e);
        result.kind = ValueKind.Float;
        result.fvalue = f.getValue();
        break;
    case BooleanLiteral:
        const BooleanLiteral* b = cast<BooleanLiteral*>(e);
        result.uvalue = b.getValue();
        break;
    case CharLiteral:
        const CharLiteral* c = cast<CharLiteral*>(e);
        result.uvalue = cast<u64>(c.getValue());  // cast required if char is signed
        break;
    case StringLiteral:
        assert(0);
        break;
    case Nil:
        break;
    case Identifier:
        const IdentifierExpr* i = cast<IdentifierExpr*>(e);
        return get_decl_value(i.getDecl());
    case Type:
    case Call:
    case InitList:
    case FieldDesignatedInit:
    case ArrayDesignatedInit:
        // should not happen
        break;
    case BinaryOperator:
        return get_binaryop_value(cast<BinaryOperator*>(e));
    case UnaryOperator:
        return get_unaryop_value(cast<UnaryOperator*>(e));
    case ConditionalOperator:
        // should not happen
        break;
    case Builtin:
        const BuiltinExpr* bi = cast<BuiltinExpr*>(e);
        result = bi.getValue();
        break;
    case ArraySubscript:
        // note: can be CTV if BitOffsetExpr
        ArraySubscriptExpr* a = cast<ArraySubscriptExpr*>(e);

        result = get_value(a.getBase());
        // Dont allow negative/float
        assert(result.kind == ValueKind.UnsignedDecimal);

        Expr* index = a.getIndex();
        assert(index.isBitOffset());
        BitOffsetExpr* bo = cast<BitOffsetExpr*>(index);
        Value high = get_value(bo.getLHS());
        Value low = get_value(bo.getRHS());
        Value width = high.minus(&low);
        width.uvalue++;
        // calculate result = (base >> low) & bitmask(width))
        result.uvalue >>= low.uvalue;
        result.mask(cast<u32>(width.uvalue));
        break;
    case Member:
        const MemberExpr* m = cast<MemberExpr*>(e);
        return get_decl_value(m.getFullDecl());
    case Paren:
        const ParenExpr* p = cast<ParenExpr*>(e);
        return get_value(p.getInner());
    case BitOffset:
        assert(0); // TODO
        break;
    case ExplicitCast:
        const ExplicitCastExpr* i = cast<ExplicitCastExpr*>(e);
        result = get_value(i.getInner());
        QualType qt = e.getType();
        qt = qt.getCanonicalType();
        assert(qt.isBuiltin());
        BuiltinType* bi = qt.getBuiltin();
        assert(result.isDecimal()); // TODO handle
        result = truncate(result, bi.isSigned(), bi.getWidth());
        break;
    case ImplicitCast:
        const ImplicitCastExpr* i = cast<ImplicitCastExpr*>(e);
        return get_value(i.getInner());
    }

    return result;
}

fn Value truncate(Value orig, bool is_signed, u32 width) {
    assert(orig.isDecimal());
    // TODO signed, for now only take uvalue

    switch (width) {
    case 1:
        orig.kind = ValueKind.UnsignedDecimal;
        orig.svalue = (orig.uvalue != 0) ? 1 : 0;
        break;
    case 7:
        orig.uvalue = (orig.uvalue & 0x7F);
        break;
    case 8:
        orig.kind = ValueKind.UnsignedDecimal;
        orig.uvalue = (orig.uvalue & 0xFF);
        break;
    case 15:
        orig.uvalue = (orig.uvalue & 0x7FFF);
        break;
    case 16:
        orig.kind = ValueKind.UnsignedDecimal;
        orig.uvalue = (orig.uvalue & 0xFFFF);
        break;
    case 31:
        orig.uvalue = (orig.uvalue & 0x7FFFFFFF);
        break;
    case 32:
        orig.kind = ValueKind.UnsignedDecimal;
        orig.uvalue = (orig.uvalue & 0xFFFFFFFF);
        break;
    case 63:
        orig.uvalue = (orig.uvalue & 0x7FFFFFFFFFFFFFFF);
        break;
    case 64:
        orig.kind = ValueKind.UnsignedDecimal;
        break;
    }

    return orig;
}

fn Value get_decl_value(const Decl* d) {
    assert(d);
    Value result = { }
    switch (d.getKind()) {
    case EnumConstant:
        const EnumConstantDecl* ecd = cast<EnumConstantDecl*>(d);
        result = ecd.getValue();
        break;
    case Variable:
        const VarDecl* vd = cast<VarDecl*>(d);
        const Expr* initval = vd.getInit();
        assert(initval);
        return get_value(initval);
    default:
        assert(0);
        break;
    }
    return result;
}

fn Value get_unaryop_value(const UnaryOperator* e) {
    Value result = { }
    const Expr* inner = e.getInner();
    Value res2 = get_value(inner);

    switch (e.getOpcode()) {
    case PostInc:
    case PostDec:
    case PreInc:
    case PreDec:
        // should not happen
        break;
    case AddrOf:
    case Deref:
        // Allowed?
        break;
    case Minus:
        result = res2;
        result.negate();
        break;
    case Not:
        assert(res2.isDecimal()); // TODO give error
        // Note: doesn't matter if we check svalue/uvalue
        result.kind = ValueKind.UnsignedDecimal;
        result.uvalue = ~res2.uvalue;
        break;
    case LNot:
        assert(res2.isDecimal()); // TODO give error
        result.kind = ValueKind.UnsignedDecimal;
        result.uvalue = ! res2.to_bool();
        break;
    }
    return result;
}

fn Value get_binaryop_value(const BinaryOperator* e) {
    Value result = { }
    Value left = get_value(e.getLHS());
    Value right = get_value(e.getRHS());

    switch (e.getOpcode()) {
    case Multiply:
        result = left.multiply(&right);
        break;
    case Divide:
        // Note: should already be checked!
        result = left.divide(&right);
        break;
    case Remainder:
        // Note: should already be checked!
        result = left.remainder(&right);
        break;
    case Add:
        result = left.add(&right);
        break;
    case Subtract:
        result = left.minus(&right);
        break;
    case ShiftLeft:
        // Note: neither may be negative, should already be checked
        // TODO warn about overflow
        // TODO fix
        result.kind = ValueKind.UnsignedDecimal;
        result.uvalue = left.uvalue << right.uvalue;
        break;
    case ShiftRight:
        // Note: neither may be negative, should already be checked
        // Note: rhs value should be less than bitwidth of lhs type, should already be checked
        // TODO fix
        result.kind = ValueKind.UnsignedDecimal;
        result.uvalue = left.uvalue >> right.uvalue;
        break;
    case LessThan:
        result.kind = ValueKind.UnsignedDecimal;
        result.uvalue = left.is_less(&right);
        break;
    case GreaterThan:
        result.kind = ValueKind.UnsignedDecimal;
        result.uvalue = left.is_greater(&right);
        break;
    case LessEqual:
        result.kind = ValueKind.UnsignedDecimal;
        result.uvalue = left.is_less_equal(&right);
        break;
    case GreaterEqual:
        result.kind = ValueKind.UnsignedDecimal;
        result.uvalue = left.is_greater_equal(&right);
        break;
    case Equal:
        result.kind = ValueKind.UnsignedDecimal;
        result.uvalue = left.is_equal(&right);
        break;
    case NotEqual:
        result.kind = ValueKind.UnsignedDecimal;
        result.uvalue = !left.is_equal(&right);
        break;
    case And:
        result = left.and(&right);
        break;
    case Xor:
        result = left.xor(&right);
        break;
    case Or:
        result = left.or(&right);
        break;
    case LAnd:
        result = left.land(&right);
        break;
    case LOr:
        result = left.lor(&right);
        break;
    case Assign:
    case MulAssign:
    case DivAssign:
    case RemAssign:
    case AddAssign:
    case SubAssign:
    case ShlAssign:
    case ShrAssign:
    case AndAssign:
    case XorAssign:
    case OrAssign:
        assert(0);
        break;
    }
    return result;
}

public fn bool check(diagnostics.Diags* diags, QualType qt, const Expr* e) {
    QualType canon = qt.getCanonicalType();
    if (!canon.isBuiltin()) return true;  // TODO find out cases

    assert(e.isCtv());

    Value value = ctv_analyser.get_value((e));

    return checkRange(diags, qt, &value, 0, e);
}

// Expr* e can be nil
public fn bool checkRange(diagnostics.Diags* diags, QualType qt, Value* value, SrcLoc loc, const Expr* e) {
    QualType canon = qt.getCanonicalType();
    if (!canon.isBuiltin()) return true;  // TODO find out cases
    if (e && !e.canOverflow()) return true;

    BuiltinType* bi = canon.getBuiltin();
    u32 width = bi.getWidth();
    if (width == 64) return true;  // 64-bit
    if (bi.getKind() == BuiltinKind.Float32 || bi.getKind() == BuiltinKind.Float64) return true;

    const Limit* limit = getLimit(width);

    bool out_of_bounds = false;
    switch (value.kind) {
    case SignedDecimal:
        if (value.svalue > 0 && cast<u64>(value.svalue) > limit.max_val) out_of_bounds = true;
        if (value.svalue < 0 && value.svalue < limit.min_val) out_of_bounds = true;
        break;
    case UnsignedDecimal:
        if (value.uvalue > limit.max_val) out_of_bounds = true;
        break;
    case Float:
        if (value.fvalue < 0) {
            i64 val2 = cast<i64>(value.fvalue);
            if (val2 < limit.min_val) out_of_bounds = true;
        } else {
            u64 val2 = cast<u64>(value.fvalue);
            if (val2 > limit.max_val) out_of_bounds = true;
        }
        break;
    }

    if (out_of_bounds) {
        if (e) {
            diags.errorRange(e.getLoc(), e.getRange(), "constant value %s out-of-bounds for type '%s', range [%s, %s]",
                value.str(), qt.diagNameBare(), limit.min_str, limit.max_str);
        } else {
            diags.error(loc, "constant value %s out-of-bounds for type '%s', range [%s, %s]",
                value.str(), qt.diagNameBare(), limit.min_str, limit.max_str);
        }
        return false;
    }
    return true;
}

