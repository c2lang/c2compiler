/* Copyright 2022-2025 Bas van den Berg
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

module refs_main;

import c2refs local;
import constants;
import file_utils;
import replacer;
import refs_finder;
import utils;

import std local;

type Options struct {
    const char* target;
    const char* newname;
    const char* symbolname;
    const char* filename;
    u32 line;
    u16 column;
}

Options opts;

fn void usage(const char* me) {
    printf("Usage: %s [old-name] [new-name] <opts>\n", me);
    printf("  old-name can be specified by:\n");
    printf("    [file] [line] [col]\n");
    printf("    [<module>.symbol] ]\n");
    printf("  Options:\n");
    printf("    -t [target]             use [target]\n");
    exit(-1);
}

fn void parse_options(i32 argc, const char** argv) {
    const char*[4] args = { nil }
    u32 pos_count = 0;
    i32 i = 1;
    while (i<argc) {
        const char* arg = argv[i];
        if (arg[0] == '-') {
            if (arg[1] != 't') usage(argv[0]);
            i++;
            if (i == argc) usage(argv[0]);
            opts.target = argv[i];
        } else {
            if (pos_count >= 4) usage(argv[0]);

            args[pos_count] = arg;
            pos_count++;
        }
        i++;
    }

    if (pos_count == 2) {
        opts.symbolname = args[0];
        opts.newname = args[1];
    } else if (pos_count == 4) {
        opts.filename= args[0];
        opts.line = cast<u32>(atoi(args[1]));
        opts.column = cast<u16>(atoi(args[2]));
        opts.newname = args[3];
    } else {
        usage(argv[0]);
    }
}

fn void use_fn(void* arg, const Dest* res) {
    replacer.Replacer* r = arg;
    r.add(res.filename, res.line, res.col);
}

public fn i32 main(i32 argc, const char** argv)
{
    parse_options(argc, argv);

    if (!utils.findProjectDir(nil)) {
        fprintf(stderr, "cannot find C2 root dir\n");
        return -1;
    }

    const char* refsfile = constants.refs_filename;
    char[file_utils.Max_path] refsname;
    if (opts.target) {
        file_utils.make_path3(refsname, elemsof(refsname),
                              constants.output_dir, opts.target, constants.refs_filename);
        refsfile = refsname;
    } else {
        refs_finder.Finder* finder = refs_finder.create(constants.output_dir, constants.refs_filename);
        u32 count = finder.search(nil);

        if (count == 0) {
            fprintf(stderr, "no %s files found\n", constants.refs_filename);
            return -1;
        }
        if (count == 1) {
            strcpy(refsname, finder.get(0));
            refsfile = refsname;
        } else {
            fprintf(stderr, "multiple %s files, please specify target with '-t' option\n", constants.refs_filename);
            return -1;
        }
        finder.free();
    }

    Refs* refs = Refs.load(refsfile);
    if (!refs) {
        fprintf(stderr, "error loading %s: %s\n", refsfile, strerror(errno));
        return -1;
    }

    replacer.Replacer* r = replacer.create(opts.newname);

    u16 old_len = 0;
    if (opts.symbolname) {
        refs.findSymbolUses(opts.symbolname, use_fn, r, &old_len);
    } else {
        Dest origin = { opts.filename, opts.line, opts.column }
        refs.findRefUses(&origin, use_fn, r, &old_len);
    }
    i32 ret = r.replace(old_len);
    refs.free();
    r.free();
    return ret;
}

