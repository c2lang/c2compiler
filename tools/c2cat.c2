/* Copyright 2022-2024 Bas van den Berg
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

module c2cat_main;

import c2_tokenizer;
import color;
import file_utils;
import string_buffer;
import string_list;
import string_pool;
import token local;

import c_errno local;
import ctype;
import stdio local;
import stdlib local;
import string local;

fn void usage(const char* me) {
    printf("Usage: %s [file.c2]\n", me);
    exit(-1);
}

string_pool.Pool* pool;
string_buffer.Buf* out;
u32 offset = 0;
const char* input;

u32 in_attributes; // 0 no, 1 seen @, 2 (, ) -> 0

const char*[] attr_names = {
    "export",
    "packed",
    "unused",
    "unused_params",
    "section",
    "noreturn",
    "inline",
    "printf_format",
    "aligned",
    "weak",
    "opaque",
    "cname",
    "no_typedef",
    "constructor",
    "destructor",
    "pure",
    "auto_file",
    "auto_line",
}


fn bool is_attribute(const char* str) {
    for (u32 i=0; i<elemsof(attr_names); i++) {
        if (strcmp(str, attr_names[i]) == 0) return true;
    }
    return false;
}

fn void update_state(const Token* tok) {
    switch (in_attributes) {
    case 0:
        if (tok.kind == Kind.At) in_attributes = 1;
        break;
    case 1:
        if (tok.kind == Kind.LParen) in_attributes = 2;
        break;
    case 2:
        if (tok.kind == Kind.RParen) in_attributes = 0;
        break;
    }
}

fn void print_token(const Token* tok) {
    if (offset != 0) {
        // copy stuff from file to out (from end of last token to start of current)
        if (!tok.more) return;
        assert(offset <= tok.loc);
        u32 len = tok.loc - offset;
        if (len) out.add2(input + offset, len);
    }

    if (tok.kind >= Kind.LParen && tok.kind < Kind.KW_bool) {
        const char* str = kind2str(tok.kind);
        out.add(str);
        offset = tok.loc + cast<u32>(strlen(str));
        return;
    }
    if (tok.kind >= Kind.KW_bool && tok.kind <= Kind.KW_void) {
        const char* str = kind2str(tok.kind);
        out.color(color.Green);
        out.add(str);
        out.color(color.Normal);
        offset = tok.loc + cast<u32>(strlen(str));
        return;
    }
    if (tok.kind == Kind.KW_const || tok.kind == Kind.KW_volatile) {
        const char* str = kind2str(tok.kind);
        out.color(color.Green);
        out.add(str);
        out.color(color.Normal);
        offset = tok.loc + cast<u32>(strlen(str));
        return;
    }
    if (tok.kind >= Kind.KW_as && tok.kind <= Kind.KW_while) {
        const char* str = kind2str(tok.kind);
        out.color(color.Byellow);
        out.add(str);
        out.color(color.Normal);
        offset = tok.loc + cast<u32>(strlen(str));
        return;
    }
    if (tok.kind >= Kind.Feat_if && tok.kind <= Kind.Feat_endif) {
        const char* str = kind2str(tok.kind);
        out.color(color.Blue);
        out.add(str);
        out.color(color.Normal);
        offset = tok.loc + cast<u32>(strlen(str));
        return;
    }
    switch (tok.kind) {
    case Identifier:
        const char* str = pool.idx2str(tok.text_idx);

        if (in_attributes && is_attribute(str)) {
            out.color(color.Blue);
            out.add(str);
            out.color(color.Normal);
        } else {
            out.add(str);
        }
        offset = tok.loc + cast<u32>(strlen(str));
        return;
    case IntegerLiteral:
        out.color(color.Magenta);
        char[64] tmp;
        i32 len;
        switch (tok.radix) {
        case 16:
            len = sprintf(tmp, "0x%x", tok.int_value);
            break;
        default:
            len = sprintf(tmp, "%d", tok.int_value);
            break;
        }
        out.add(tmp);
        offset = tok.loc + len;
        break;
    case FloatLiteral:
        out.color(color.Magenta);
        char[64] tmp;
        i32 len = sprintf(tmp, "%f", tok.float_value);
        out.add(tmp);
        offset = tok.loc + len;
        break;
    case CharLiteral:
        out.color(color.Magenta);
        char[64] tmp;
        i32 len = 0;
        switch (tok.radix) {
        case 8:
            len = sprintf(tmp, "'\\%o'", tok.char_value);
            break;
        case 16:
            len = sprintf(tmp, "'\\x%02x'", tok.char_value);
            break;
        default:
            if (ctype.isprint(tok.char_value)) {
                len = sprintf(tmp, "'%c'", tok.char_value);
            } else {
                tmp[0] = 0;
                // TODO print nicely (eg \n etc)
            }
            break;
        }
        out.add(tmp);
        offset = tok.loc + len;
        break;
    case StringLiteral:
        out.color(color.Magenta);
        const char* str = pool.idx2str(tok.text_idx);
        out.print("\"%s\"", str);
        offset = tok.loc + cast<u32>(strlen(str)) + 2;
        break;
    case LineComment:
        out.color(color.Bcyan);
        const char* str = pool.idx2str(tok.text_idx);
        out.print("//%s", str);
        offset = tok.loc + cast<u32>(strlen(str)) + 2;
        break;
    case BlockComment:
        out.color(color.Bcyan);
        const char* str = pool.idx2str(tok.text_idx);
        out.print("/*%s*/", str);
        offset = tok.loc + cast<u32>(strlen(str)) + 4;
        break;
    default:
        break;
    }
    out.color(color.Normal);
}

public fn i32 main(i32 argc, const char** argv)
{
    // TODO cat all files passed?
    if (argc != 2) usage(argv[0]);
    const char* filename = argv[1];

    file_utils.Reader file;
    if (!file.open(filename)) {
        fprintf(stderr, "error opening %s: %s\n", filename, strerror(file.errno));
        return -1;
    }

    pool = string_pool.create(16*1024, 128);
    c2_tokenizer.Tokenizer tokenizer;
    string_list.List features;
    input = file.char_data();
    string_buffer.Buf* buf = string_buffer.create(1024, 0, false);
    tokenizer.init(pool, buf, input, 0, &features, true);

    out = string_buffer.create(16*1024, true, 2);

    Token tok;
    tok.init();

    while (tok.more) {
        tokenizer.lex(&tok);
        //printf("%4d %s\n", tok.loc, kind2str(tok.kind));

        update_state(&tok);

        print_token(&tok);
    }

    assert (offset < file.size);
    u32 len = file.size - offset;
    if (len) out.add2(input + offset, len);
    printf("%s", out.data());
    fflush(stdout);

    out.free();
    buf.free();
    file.close();

    return 0;
}

