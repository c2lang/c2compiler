/* Copyright 2022-2025 Bas van den Berg
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

module replacer;

import file_utils;
import quicksort;

import stdio local;
import stdlib;
import string;
import c_errno local;

type Loc struct {
    const char* filename;
    u32 line;
    u32 column;
}

type Fragment struct {
    u32 start;
    u32 end;
}

public type Replacer struct @(opaque) {
    const char* new_name;
    u16 old_len;

    u32 count;
    u32 capacity;
    Loc* locs;

    u32 f_count;
    u32 f_capacity;
    Fragment* fragments;

    file_utils.Reader file;
    u8* dest;
    u32 dest_capacity;
}

public fn Replacer* create(const char* new_name) {
    Replacer* r = stdlib.calloc(1, sizeof(Replacer));
    r.new_name = new_name;
    r.resize(16);
    r.f_resize(16);
    return r;
}

public fn void Replacer.free(Replacer* r) {
    if (r.file.isOpen()) r.file.close();
    if (r.dest) stdlib.free(r.dest);
    stdlib.free(r.locs);
    stdlib.free(r.fragments);
    stdlib.free(r);
}

fn void Replacer.resize(Replacer* r, u32 capacity) {
    r.capacity = capacity;
    Loc* locs2 = stdlib.malloc(capacity * sizeof(Loc));
    if (r.count) {
        string.memcpy(locs2, r.locs, r.count * sizeof(Loc));
        stdlib.free(r.locs);
    }
    r.locs = locs2;
}

fn void Replacer.f_resize(Replacer* r, u32 capacity) {
    r.f_capacity = capacity;
    Fragment* frags2 = stdlib.malloc(capacity * sizeof(Fragment));
    if (r.f_count) {
        string.memcpy(frags2, r.fragments, r.f_count * sizeof(Fragment));
        stdlib.free(r.fragments);
    }
    r.fragments = frags2;
}

fn void Replacer.addFragment(Replacer* r, u32 start, u32 end) {
    if (r.f_count == r.f_capacity) r.f_resize(r.f_capacity * 2);
    Fragment* f = &r.fragments[r.f_count];
    f.start = start;
    f.end = end;
    r.f_count++;
}

fn void Replacer.flushFragments(Replacer* r, const char* filename) {
    u32 new_len = cast<u32>(string.strlen(r.new_name));
    u32 new_size = r.file.size;
    new_size += (r.f_count - 1)* (new_len - r.old_len);
    if (new_size + 1 > r.dest_capacity) {
        if (r.dest) stdlib.free(r.dest);
        r.dest_capacity = new_size+1; // add 1 for 0-terminator
        r.dest = stdlib.malloc(r.dest_capacity);
        assert(r.dest);
    }

    //printf("Fragments:\n");
    const u8* src = r.file.udata();
    u32 dest_idx = 0;
    for (u32 i=0; i<r.f_count; i++) {
        Fragment* f = &r.fragments[i];
        //printf("  [%d] %5u - %5u\n", i, f.start, f.end);
        if (i != 0) {
            string.memcpy(r.dest + dest_idx, r.new_name, new_len);
            dest_idx += new_len;
        }
        u32 len = f.end - f.start;
        string.memcpy(r.dest + dest_idx, src + f.start, len);
        dest_idx += len;
    }
    r.dest[dest_idx] = 0;

    // write
    file_utils.Writer outfile;
    if (!outfile.write(filename, r.dest, new_size)) {
        fprintf(stderr, "cannot write to %s: %s\n", filename, outfile.getError());
    }

    r.f_count = 0;
}

// Note: assumes are locations are sorted
public fn void Replacer.add(Replacer* r, const char* filename, u32 line, u32 column) {
    //printf("%s %d %d\n", filename, line, column);
    if (r.count == r.capacity) r.resize(r.capacity *= 2);
    Loc* l = &r.locs[r.count];
    l.filename = filename;
    l.line = line;
    l.column = column;
    r.count++;
}

fn u32 findLine(const char* start, u32 line) {
    if (line == 1) return 0;
    const char* cp = start;
    u32 cur_line = 1;
    while (*cp) {
        if (*cp == '\n') {
            cur_line++;
            if (cur_line == line) {
                cp++;
                break;
            }
        }
        cp++;
    }
    return cast<u32>(cp - start);
}

fn u32 Replacer.findOffset(Replacer* r, u32 line, u32 column) {
    //printf("find offset %d %d  file.size %d\n", line, column, r.file.size);
    // TODO cache last entry

    u32 cur_line = 1;
    const char* start = r.file.data();
    const char* cp = start;

    u32 offset = findLine(cp, line);
    return offset + column - 1;
}


fn bool compareLoc(void* arg, const void* left, const void* right) {
    const Loc* l = left;
    const Loc* r = right;
    i32 cmp = string.strcmp(l.filename, r.filename);
    if (cmp != 0) return cmp < 0;
    if (l.line != r.line) return l.line < r.line;
    return l.column < r.column;
}

public fn i32 Replacer.replace(Replacer* r, u16 old_len) {
    quicksort.sort(r.locs, r.count, sizeof(Loc), compareLoc, nil);

    r.old_len = old_len;
    const char* cur_file = nil;
    u32 prev_offset = 0;
    u32 num_subs = 0;
    u32 num_files = 0;
    for (u32 i=0; i<r.count; i++) {
        const Loc* l = &r.locs[i];
        //printf("%s %d %d\n", l.filename, l.line, l.column);
        const char* filename = l.filename;
        if (filename != cur_file) {
            num_files++;
            if (r.file.isOpen()) {
                r.addFragment(prev_offset, r.file.size);
                r.flushFragments(cur_file);
                r.file.close();
                prev_offset = 0;
            }
            cur_file = filename;
            if (!r.file.open(filename)) {
                fprintf(stderr, "error opening %s: %s\n", filename, r.file.getError());
                return -1;
            }
        }
        u32 offset = r.findOffset(l.line, l.column);
        if (offset >= r.file.size) {
            printf("invalid position %s %d %d\n", l.filename, l.line, l.column);
            return -1;
        }
        //printf("offset %d   prev %d\n", offset, prev_offset);

        r.addFragment(prev_offset, offset);
        num_subs++;
        prev_offset = offset += r.old_len;
    }
    if (r.file.isOpen()) {
        r.addFragment(prev_offset, r.file.size);
        r.flushFragments(cur_file);
        r.file.close();
    }
    printf("%d substitution%s in %d file%s\n", num_subs, num_files != 1 ? "s" : "", num_files, num_files != 1 ? "s" : "");
    return 0;
}

