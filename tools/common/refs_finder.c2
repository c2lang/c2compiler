/* Copyright 2022-2025 Bas van den Berg
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

module refs_finder;

import string_pool;

import c_errno local;
import libc_dirent local;
import stdio local;
import stdlib local;
import string;
import sys_stat local;

public type Finder struct @(opaque) {
    const char* dirname;
    const char* filename;
    u32 count;
    u32 capacity;
    u32* results;

    string_pool.Pool* pool;
}

public fn Finder* create(const char* dirname, const char* filename) {
    Finder* f = malloc(sizeof(Finder));
    f.dirname = dirname;
    f.filename = filename;
    f.count = 0;
    f.resize(4);
    f.pool = string_pool.create(256, 512);
    return f;
}

public fn void Finder.free(Finder* f) {
    f.pool.free();
    free(f.results);
    free(f);
}

public fn u32 Finder.search(Finder* f, const char* target) {
    char[512] fullname;

    if (target) {
        stdio.snprintf(fullname, 512, "%s/%s/%s", f.dirname, target, f.filename);
        Stat statbuf;
        i32 err = stat(fullname, &statbuf);
        if (err) return 0;
        f.add(fullname);
        return 1;
    }
    DIR* dir = opendir(f.dirname);
    if (dir == nil) {
        fprintf(stderr, "cannot open library dir '%s': %s", f.dirname, string.strerror(errno));
        exit(EXIT_FAILURE);
    }

    Dirent* entry = readdir(dir);
    while (entry != nil) {
        const char* name = entry.d_name;
        if (name[0] != '.' && entry.d_type == DT_DIR) {
            stdio.snprintf(fullname, 512, "%s/%s/%s", f.dirname, name, f.filename);

            Stat statbuf;
            i32 err = stat(fullname, &statbuf);
            if (err) goto next;
            f.add(fullname);
        }
next:
        entry = readdir(dir);
    }
    closedir(dir);
    return f.count;
}

public fn const char* Finder.get(Finder* f, u32 idx) {
    assert(idx < f.count);
    return f.pool.idx2str(f.results[idx]);
}

fn void Finder.resize(Finder* f, u32 capacity) {
    f.capacity = capacity;
    u32* res2 = malloc(capacity * sizeof(u32));
    if (f.count) {
        string.memcpy(res2, f.results, f.count * sizeof(u32));
        free(f.results);
    }
    f.results = res2;
}

fn void Finder.add(Finder* f, const char* filename) {
    if (f.count == f.capacity) f.resize(f.capacity * 2);
    f.results[f.count] = f.pool.addStr(filename, false);
    f.count++;
}
