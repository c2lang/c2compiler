/* Copyright 2022-2025 Bas van den Berg
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

module test_db;

import c_errno local;
import stdio local;
import stdlib local;
import string local;
import unistd local;

import color;
import constants;
import expect_file local;
import file_utils;
import issues local;
import string_buffer;
import string_utils local;
import test_utils local;

public const u32 MAX_LINE = 512;

// TODO move to tester.c2
// TEMP here since C2C doesn't support implemented functions in libs (yet)
fn bool doWIFSIGNALED(i32 state) {
    return ((state & 0x7F) > 0 && (state & 0x7F) < 0x7F);
}

fn bool doWIFEXITED(i32 state) {
    return ((state & 0xff) == 0);
}

fn char getWEXITSTATUS(i32 state) {
    return cast<char>((state >> 8) & 0xff);
}


public type TestKind enum u8 {
    C2,
    C2T,
    C2A,
}

public type Mode enum u8 {
    Outside,
    Infile,
    InExpectFile,
}

// TODO rename
type Type enum u8 { ERROR, WARNING, NOTE }

public type Db struct {
    string_buffer.Buf* output;  // no ownership
    file_utils.Reader* file;    // no ownership
    TestKind kind;
    const char* tmp_dir;
    const char* c2c_cmd;    // no ownership

    // TODO use vector<ExpectFile>
    ExpectFile** expectedFiles;
    u32 expectedCount;
    u32 expectedCapacity;
    ExpectFile* currentExpect;  // points into expectedFiles

    Issues* errors;
    Issues* warnings;
    Issues* notes;

    Mode mode;
    const char* file_start;
    u32 line_offset;
    bool hasErrors;
    bool skip;
    bool runSkipped;        // TODO pass from init
    const char* cur;
    u32 line_nr;
    string_buffer.Buf* errorMsg;    // ownership
    string_buffer.Buf* recipe;      // ownership
    char[constants.Max_path] current_file;
    char[64] target;

    char[32] word_buffer;
    char[MAX_LINE] line_buffer;
    char[128] until_buffer;
}

public fn void Db.init(Db* db,
                         string_buffer.Buf* output,
                         file_utils.Reader* file,
                         const char* filename,
                         TestKind kind,
                         const char* tmp_dir,
                         const char* c2c_cmd,
                         const char* cwd,
                         bool runSkipped)
{
    memset(db, 0, sizeof(Db));
    db.output = output;
    db.file = file;
    db.kind = kind;
    db.tmp_dir = tmp_dir;
    db.c2c_cmd = c2c_cmd;
    db.runSkipped = runSkipped;

    db.errors = issues.create();
    db.warnings = issues.create();
    db.notes = issues.create();

    db.line_nr = 1;
    db.errorMsg = string_buffer.create(128, false, 2);
    db.recipe = string_buffer.create(4096, false, 2);

    if (kind == TestKind.C2) { // only for single file test
        sprintf(db.current_file, "%s/%s", cwd, filename);
    }
}

public fn void Db.destroy(Db* db) {

    for (u32 i=0; i<db.expectedCount; i++) {
        db.expectedFiles[i].destroy();
    }
    free(cast<void*>(db.expectedFiles));
    db.errorMsg.free();
    db.recipe.free();
    db.notes.destroy();
    db.warnings.destroy();
    db.errors.destroy();
}

public fn bool Db.haveErrors(const Db* db) {
    return db.hasErrors;
}

fn void Db.addExpected(Db* db, ExpectFile* f) {
    if (db.expectedCount == db.expectedCapacity) {
        db.expectedCapacity += 4;
        ExpectFile* exp2 = malloc(db.expectedCapacity * sizeof(ExpectFile*));
        if (db.expectedCount) {
            memcpy(exp2, cast<void*>(db.expectedFiles), db.expectedCount * sizeof(ExpectFile*));
            free(cast<void*>(db.expectedFiles));
        }
        db.expectedFiles = cast<ExpectFile**>(exp2);
    }

    db.expectedFiles[db.expectedCount] = f;
    db.expectedCount++;
}

fn void Db.matchNote(Db* db, const char* filename, i32 linenr, const char* msg) {
    const char* match = db.notes.find(filename, linenr);
    if (match) {
        if (!same_string(match, msg)) {
            color_print2(db.output, colError, "  wrong note at %s:%d:", filename, linenr);
            color_print2(db.output, colError, "     expected: %s", match);
            color_print2(db.output, colError, "     got: %s", msg);
            db.hasErrors = true;
        }
        db.notes.erase(filename, linenr);
        return;
    }
    // not expected
    color_print2(db.output, colError, "  unexpected note on line %d: %s", linenr, msg);
    db.hasErrors = true;
}

fn void Db.matchWarning(Db* db, const char* filename, i32 linenr, const char* msg) {
    const char* match = db.warnings.find(filename, linenr);
    if (match) {
        if (!same_string(match, msg)) {
            color_print2(db.output, colError, "  wrong warning at %s:%d:", filename, linenr);
            color_print2(db.output, colError, "     expected: %s", match);
            color_print2(db.output, colError, "     got: %s", msg);
            db.hasErrors = true;
        }
        db.warnings.erase(filename, linenr);
        return;
    }
    // not expected
    color_print2(db.output, colError, "  unexpected warning on line %d: %s", linenr, msg);
    db.hasErrors = true;
}

fn void Db.matchError(Db* db, const char* filename, i32 linenr, const char* msg) {
    const char* match = db.errors.find(filename, linenr);
    if (match) {
        if (!same_string(match, msg)) {
            color_print2(db.output, colError, "%s:%d: wrong error: %s", relativeFilename(filename), linenr, msg);
            color_print2(db.output, colError, "     expected: %s", match);
            db.hasErrors = true;
        }
        db.errors.erase(filename, linenr);
        return;
    }
    // not expected
    color_print2(db.output, colError, "%s:%d: unexpected error: %s", relativeFilename(filename), linenr, msg);
    db.hasErrors = true;
}

fn void Db.writeFile(Db* db, const char* filename, const char* data, u32 len) {
    char[128] fullname;
    sprintf(fullname, "%s/%s", db.tmp_dir, filename);
    file_utils.Writer writer;
    bool ok = writer.write(fullname, cast<u8*>(data), len);
    if (!ok) {
        print_error("error writing %s: %s", fullname, writer.getError());
        exit(EXIT_FAILURE);
    }
}

fn void Db.skipLine(Db* db) {
    while (*db.cur != 0) {
        if (*db.cur == '\n') {
            db.line_nr++;
            db.cur++;
            return;
        }
        db.cur++;
    }
}

fn const char* Db.findEndOfLine(Db* db) {
    const char* cp = db.cur;
    while (*cp != 0 && *cp != '\n') {
        cp++;
    }
    return cp;
}

fn const char* Db.readWord(Db* db) {
    const char* cp = db.cur;
    while (*cp != 0 && cp - db.cur < 31) {
        if ((*cp < 'a' || *cp > 'z') && *cp != '-' && *cp != '_') break;
        cp++;
    }
    u32 len = cast<u32>(cp - db.cur);
    memcpy(db.word_buffer, db.cur, len);
    db.word_buffer[len] = 0;
    return db.word_buffer;
}

fn const char* Db.readLine(Db* db) {
    const char* cp = db.cur;
    while (*cp != 0 && cp - db.cur < MAX_LINE) {
        if (*cp == 0 || *cp == '\n') break;
        cp++;
    }
    u32 len = cast<u32>(cp - db.cur);
    memcpy(db.line_buffer, db.cur, len);
    db.line_buffer[len] = 0;
    return db.line_buffer;
}

fn char* Db.readUntil(Db* db, char delim) {
    const char* cp = db.cur;
    while (1) {
        if (*cp == 0) return nil;
        if (*cp == delim) break;
        if (cp - db.cur > 127) return nil;
        cp++;
    }
    u32 len = cast<u32>(cp - db.cur);
    memcpy(db.until_buffer, db.cur, len);
    db.until_buffer[len] = 0;
    return db.until_buffer;
}

fn bool Db.parseRecipe(Db* db) {
    if (strncmp(db.cur, "bin", 3) == 0) {
        db.recipe.add("executable test\n");
    } else if (strncmp(db.cur, "lib", 3) == 0) {
        db.cur += 4;
        // Syntax lib dynamic/static
        const char* libtype = db.readWord();
        if (same_string(libtype, "dynamic") || same_string(libtype, "static")) {
        } else {
            db.errorMsg.print("unknown library type '%s'", libtype);
            return false;
        }
        db.recipe.print("lib test %s\n", libtype);
    } else {
        db.errorMsg.print("unknown target type '%s'", db.readWord());
        return false;
    }
    db.skipLine();
    // TODO check that each line starts with $? (after optional whitespace)
    while (1) {
        if (*db.cur == 0 || strncmp(db.cur, "// @", 4) == 0) return true;

        if (*db.cur != '\n') {
            db.recipe.add(db.readLine());
            db.recipe.newline();
        }
        db.skipLine();
    }

    return true;
}

fn bool Db.parseFile(Db* db) {
    // Syntax file{name}
    if (*db.cur != '{') {
        db.errorMsg.add("expected { after file");
        return false;
    }
    db.cur++;

    char* filename = db.readUntil('}');
    if (filename[0] == 0) {
        db.errorMsg.add("expected filename");
        return false;
    }
    // NOTE: we know filename is allocated in until_buffer, so we can add
    if (!endsWith(filename, ".c2")) append(filename, ".c2");
    db.recipe.print("    %s\n", filename);
    db.line_offset = db.line_nr;
    strcpy(db.current_file, filename);
    db.skipLine();
    const char* start = db.cur;
    while (1) {
        if (*db.cur == 0 || strncmp(db.cur, "// @", 4) == 0) {
            const char* end = db.cur;
            db.writeFile(db.current_file, start, cast<u32>(end - start));
            break;
        }
        db.parseTags(db.cur, db.findEndOfLine());
        db.skipLine();
    }
    return true;
}

fn bool Db.parseExpect(Db* db) {
    // Syntax expect{mode, name}
    if (*db.cur != '{') {
        db.errorMsg.add("expected { after expect");
        return false;
    }
    db.cur++;
    const char* modeStr = db.readWord();
    ExpectMode em = ExpectMode.ATLEAST;
    if (same_string(modeStr, "atleast")) {
        em = ExpectMode.ATLEAST;
    } else if (same_string(modeStr, "complete")) {
        em = ExpectMode.COMPLETE;
    } else {
        db.errorMsg.print("unknown mode: %s", modeStr);
        return false;
    }

    db.cur += strlen(modeStr);
    if (*db.cur != ',') {
        db.errorMsg.add("expected comma");
        return false;
    }
    db.cur++;

    while (*db.cur == ' ') db.cur++;

    const char* filename = db.readUntil('}');
    if (filename[0] == 0) {
        db.errorMsg.add("expected filename");
        return false;
    }
    db.skipLine(); // skip rest of the line

    db.currentExpect = expect_file.create(filename, em);
    // TODO check for name duplicates
    db.addExpected(db.currentExpect);
    while (*db.cur != 0) {
        if (strncmp(db.cur, "// @", 4) == 0) {
            break;
        }

        if (*db.cur == '\n') {
            db.skipLine();
            continue;
        }

        const char* end = db.cur;
        while (*end != 0 && *end != '\n') end++;
        db.currentExpect.addLine(db.line_nr, db.cur, end);
        db.skipLine();
    }
    db.currentExpect = nil;
    return true;
}

fn bool Db.parseKeyword(Db* db) {
    // NOTE: cur points to start of keyword after // @
    const char* keyword = db.readWord();

    if (same_string(keyword, "skip")) {
        if (!db.runSkipped) db.skip = true;
        return true;
    } else if (same_string(keyword, "recipe")) {
        if (db.kind != TestKind.C2T) {
            db.errorMsg.add("keyword 'recipe' only allowed in .c2t files");
            return false;
        }
        db.cur += 7;
        return db.parseRecipe();
    } else if (same_string(keyword, "warnings")) {
        if (db.kind != TestKind.C2) {
            db.errorMsg.add("keyword 'warnings' only allowed in .c2 files");
            return false;
        }
        db.recipe.print("  $warnings %s\n", db.readLine());
        db.skipLine();
    } else if (same_string(keyword, "file")) {
        if (db.kind == TestKind.C2) {
            db.errorMsg.add("keyword 'file' only allowed in .c2t/.c2a files");
            return false;
        }
        db.cur += 4;
        return db.parseFile();
    } else if (same_string(keyword, "expect")) {
        if (db.kind != TestKind.C2T && db.kind != TestKind.C2A) {
            db.errorMsg.add("keyword 'expect' only allowed in .c2t/.c2a files");
            return false;
        }
        db.cur += 6;
        return db.parseExpect();
    } else {
        db.errorMsg.print("unknown keyword '%s'", keyword);
        return false;
    }
    return true;
}

// returns if OK
fn bool Db.parseOuter(Db* db) {
    // NOTE: cur always points to beginning of line

    while (*db.cur != 0) {
        if (*db.cur == '\n') {
            db.skipLine();
            continue;
        }
        // search for lines starting with // @..
        if (strncmp(db.cur, "// @", 4) == 0) {
            db.cur += 4;
            if (!db.parseKeyword()) return false;
            continue;
        }

        // TODO give error on non-empty lines
        db.skipLine();
    }
    return true;
}


// TODO use errorMsg.print()? and wrap that?
fn void Db.error(Db* db, const char* msg) {
    // TODO use colError?
    // TODO BB filename
    //color_print2(db.output, color.Bred, "%s:%d: %s", file.filename.c_str(), line_nr, msg);
    color_print2(db.output, color.Bred, "%s:%d: %s", "TODO BB", db.line_nr, msg);
    db.hasErrors = true;
}

fn void Db.parseTags(Db* db, const char* start, const char* end) {
    // if finding '// @' somewhere else, it's a note/warning/error
    const char* cp = find(start, end, "// @");
    if (!cp) cp = find(start, end, "/* @");
    if (!cp) return;
    cp += 4;    // skip "// @";

    const char* msg_start;

    Type kind = Type.ERROR;
    if (strncmp(cp, "error{", 6) == 0) {
        cp += 6;
        kind = Type.ERROR;
        goto parse_msg;
    }
    if (strncmp(cp, "warning{", 8) == 0) {
        cp += 8;
        kind = Type.WARNING;
        goto parse_msg;
    }
    if (strncmp(cp, "note{", 5) == 0) {
        cp += 5;
        kind = Type.NOTE;
        goto parse_msg;
    }
    db.error("unknown note/warning/error tag");
    return;
parse_msg:
    // todo extract to function
    msg_start = cp;
    while (*cp != '}') {
        if (cp == end) {
            db.error("missing '}'");
            return;
        }
        cp++;
    }
    char[128] msg;
    memcpy(msg, msg_start, cast<u32>(cp - msg_start));
    msg[cp - msg_start] = 0;
    switch (kind) {
    case ERROR:
#if TesterDebug
        color_print(color.Blue, "  expecting error '%s' at %d", msg, db.line_nr - db.line_offset);
#endif
        db.errors.add(db.current_file, db.line_nr - db.line_offset, msg);
        break;
    case WARNING:
#if TesterDebug
        color_print(color.Blue, "  expecting warning '%s' at %d", msg, db.line_nr - db.line_offset);
#endif
        db.warnings.add(db.current_file, db.line_nr - db.line_offset, msg);
        break;
    case NOTE:
#if TesterDebug
        color_print(color.Blue, "  expecting note '%s' at %d", msg, db.line_nr - db.line_offset);
#endif
        db.notes.add(db.current_file, db.line_nr - db.line_offset, msg);
        break;
    }
}

public fn void Db.parseLineOutside(Db* db, const char* start, const char* end) {
    const char* cp = start;
    skipInitialWhitespace(&cp, end);
    if (cp == end) return;

    // TODO if .c2t/.cta, only accept tags or comments
    if (db.kind != TestKind.C2 && strncmp(cp, "// ", 3) != 0) {
        db.error("unexpected line");
        return;
    }

    if (strncmp(cp, "// @", 4) == 0) {
        cp += 4;
        if (strncmp(cp, "warnings{", 9) == 0) {
            cp += 9;

            // TODO extract parsing on name
            const char* name_start = cp;
            while (*cp != '}') {
                if (cp == end) {
                    db.error("missing '}'");
                    return;
                }
                cp++;
            }
            char[64] name;
            copy_string(name, name_start, cp);
            db.recipe.print("    $warnings %s\n", name);
        } else if (strncmp(cp, "target{", 7) == 0) {
            if (db.kind != TestKind.C2) {
                db.error("keyword 'target' only allowed in .c2 files");
                return;
            }
            cp += 7;

            const char* target_start = cp;
            while (*cp != '}') {
                if (cp == end) {
                    db.error("missing '}'");
                    return;
                }
                cp++;
            }
            copy_string(db.target, target_start, cp);
    } else if (strncmp(cp, "file{", 5) == 0) {
            if (db.kind == TestKind.C2) {
                db.error("invalid @file tag in .c2 test");
                return;
            }
            cp += 5;
            // parse name
            const char* name_start = cp;
            while (*cp != '}') {
                if (cp == end) {
                    db.error("missing '}'");
                    return;
                }
                cp++;
            }
            copy_string(db.current_file, name_start, cp);
            if (!endsWith(db.current_file, ".c2")) append(db.current_file, ".c2");

            db.recipe.print("  %s\n", db.current_file);
            db.file_start = end + 1;
            db.line_offset = db.line_nr;
            db.mode = Mode.Infile;
        } else if (strncmp(cp, "expect{", 7) == 0) {
            if (db.kind != TestKind.C2T) {
                db.error("invalid @expect tag in .c2/.cta test");
                return;
            }
            cp += 7;
            // parse name
            const char* name_start = cp;
            while (*cp != '}') {
                if (cp == end) {
                    db.error("missing '}'");
                    return;
                }
                cp++;
            }

            char[64] name;
            copy_string(name, name_start, cp);
            db.currentExpect = expect_file.create(name, ExpectMode.ATLEAST);
            // TODO check for name duplicates
            db.addExpected(db.currentExpect);
            db.mode = Mode.InExpectFile;
        } else if (strncmp(cp, "backend c", 9) == 0) {
            if (db.kind != TestKind.C2T) {
                db.error("invalid @backend c tag in .c2/c2a test");
                return;
            }
            cp += 9;
            // parse args
            char[128] args;
            char* out = args;
            while (cp < end) {
                *out++ = *cp++;
            }
            *out = 0;
            db.recipe.print("  $ansi-c %s\n", args);
        } else if (strncmp(cp, "skip", 4) == 0) {
            // just skip
        } else {
            db.error("unknown tag");
        }

        return;
    }
    db.parseTags(start, end);
}

public fn void Db.parseLineFile(Db* db, const char* start, const char* end) {
    // if line starts with '// @' stop filemode
    if (strncmp(start, "// @", 4) == 0) {
        assert(db.file_start);
        const char* file_end = start;
        db.writeFile(db.current_file, db.file_start, cast<u32>(file_end - db.file_start));
        db.file_start = nil;
        db.mode = Mode.Outside;
        db.parseLine(start, end);
        return;
    }

    db.parseTags(start, end);
}

public fn void Db.parseLineExpect(Db* db, const char* start, const char* end) {
    // if line starts with '// @' stop filemode
    if (strncmp(start, "// @", 4) == 0) {
        db.currentExpect = nil;
        db.mode = Mode.Outside;
        db.parseLine(start, end);
        return;
    }
    assert(db.currentExpect);
    db.currentExpect.addLine(db.line_nr, start, end);
    // TODO add non-empty lines (stripped of heading+trailing whitespace) to list
}

public fn void Db.parseLine(Db* db, const char* start, const char* end) {
    switch (db.mode) {
    case Outside:
        db.parseLineOutside(start, end);
        break;
    case Infile:
        db.parseLineFile(start, end);
        break;
    case InExpectFile:
        db.parseLineExpect(start, end);
        break;
    }
}

public fn bool Db.parse(Db* db) {
    const char* cp = db.file.data();
    db.cur = cp;
    db.line_nr = 1;

    bool hasSkip = (strncmp(cp, "// @skip", 8) == 0);
    if (db.runSkipped != hasSkip) return true;

    switch (db.kind) {
    case C2:
        const char* end = cp + db.file.size;
        const char* line_start = cp;
        db.recipe.add("executable test\n");
        db.recipe.add("  $warnings no-unused-module\n");
        db.recipe.add("  $backend c\n");

        while (cp != end) {
            while (*cp != '\n' && cp != end) cp++;
            if (cp != line_start) db.parseLine(line_start, cp);
            db.line_nr++;
            if (*cp == '\n') cp++;
            line_start = cp;
        }

        db.recipe.print("  %s\n", db.current_file);
        if (db.target[0] != 0) {
            string_buffer.Buf* build = string_buffer.create(1024, 0, 0);
            build.print("target: \"%s\"\n", db.target);
            build.add("libdir:\n");
            build.add("   - \"$C2_LIBDIR\"\n");
            db.writeFile("build.yaml", build.data(), build.size());
            build.free();
        }
        db.recipe.add("end\n");
        db.writeFile("recipe.txt", db.recipe.data(), db.recipe.size());
        return false;
    case C2T:
        if (!db.parseOuter()) {
            print_error("error in recipe: %s on line %d", db.errorMsg.data(), db.line_nr);
            return false;
        }
        db.recipe.add("end\n");
        db.writeFile("recipe.txt", db.recipe.data(), db.recipe.size());
        break;
    case C2A:
        db.recipe.add("executable test\n");
        db.recipe.add("  $warnings no-unused\n");
        db.recipe.add("  $backend c skip\n");
        db.recipe.add("  $write-AST\n");
        if (!db.parseOuter()) {
            print_error("error in recipe: %s on line %d", db.errorMsg.data(), db.line_nr);
            return false;
        }
        db.recipe.add("end\n");
        db.writeFile("recipe.txt", db.recipe.data(), db.recipe.size());
        break;
    }

    return db.skip;
}

public fn void Db.testFile(Db* db) {
    // flush all streams before forking to avoid duplicate output
    fflush(nil);

    i32[2] pipe_stdout;
    if (pipe(pipe_stdout) == -1) {
        fprintf(stderr, "pipe() failed: %s\n", strerror(errno));
        exit(1);
    }
    i32[2] pipe_stderr;
    if (pipe(pipe_stderr) == -1) {
        fprintf(stderr, "pipe() failed: %s\n", strerror(errno));
        exit(1);
    }

    // spawn a child to run c2c
    Pid pid = fork();
    if (pid == -1) {
        fprintf(stderr, "fork() failed: %s\n", strerror(errno));
        exit(1);
    }
    if (pid==0) { // child
        while ((dup2(pipe_stdout[1], STDOUT_FILENO) == -1) && (errno == EINTR)) {}
        close(pipe_stdout[1]);
        close(pipe_stdout[0]);
        while ((dup2(pipe_stderr[1], STDERR_FILENO) == -1) && (errno == EINTR)) {}
        close(pipe_stderr[1]);
        close(pipe_stderr[0]);
        execl(db.c2c_cmd, "c2c", "-d", db.tmp_dir, "--test", nil);
        fprintf(stderr, "execl() failed: %s\n", strerror(errno));
        exit(127); /* only if execv fails */
    } else { // parent
        close(pipe_stdout[1]);
        close(pipe_stderr[1]);

        // collect output and check errors
        string_buffer.Buf* buf = string_buffer.create(4096, true, 2);
        for (;;) {
            char[64*1024] buffer;
            isize count = read(pipe_stderr[0], buffer, sizeof(buffer));
            if (count == -1) {
                if (errno == EINTR) continue;
                perror("read");
                exit(1);
            }
            if (count == 0) break;
            buf.add2(buffer, cast<u32>(count));
        }
        db.checkErrors(buf.data(), buf.size());
        buf.free();

        i32 status = 0;
        waitpid(pid, &status, 0);

        if (!doWIFEXITED(status)) {  // child exited abnormally
            // TODO print pipe_stderr
            db.output.color(colError);
            db.output.add("c2c crashed!");
            db.output.color(color.Normal);
            db.output.newline();
            db.hasErrors = true;
            return;
        }
        // check return code
        i32 retcode = getWEXITSTATUS(status);
        if (retcode == 127) {
            //color_print2(db.output, colError, "Error spawning compiler '%s'", db.c2c_cmd);
            color_print(colError, "Error spawning compiler '%s'", db.c2c_cmd);
            exit(EXIT_FAILURE);
        }
        if (retcode == 254) { // from TODO/FATAL_ERROR macros
            db.output.color(colError);
            db.output.add("c2c returned error");
            db.output.color(color.Normal);
            db.output.newline();
            db.hasErrors = true;
            return;
        }

        close(pipe_stdout[0]);
        close(pipe_stderr[0]);
        wait(nil);
        db.checkExpectedFiles();
        if (!db.errors.empty() || !db.warnings.empty()) db.hasErrors = true;
    }
}

fn void Db.checkDiagnosticLine(Db* db, const char* line) {
#if TesterDebug
    color_print(color.White, "line: '%s'", color.White, line);
#endif
    // line syntax: '<filename>.c2:<linenr>:<offset>: error/warning/note: <msg>\n'
    char[128] filename;
    char[128] msg;
    i32 error_line = 0;
    i32 col = 0;
    memset(filename, 0, sizeof(filename));
    memset(msg, 0, sizeof(msg));

    i32 res = sscanf(line, "%[^: ]:%d:%d: error: %[^\n]\n", filename, &error_line, &col, msg);
    if (res == 4) {
        // found error
#if TesterDebug
        color_print(color.Cyan, "%s %d:%d '%s'", filename, error_line, col, msg);
#endif
        db.matchError(filename, error_line, msg);
    } else {
        res = sscanf(line, "%[^: ]:%d:%d: warning: %[^\n]\n", filename, &error_line, &col, msg);
        if (res == 4) {
            // found warning
#if TesterDebug
            color_print(color.Cyan, "%s %d:%d '%s'", filename, error_line, col, msg);
#endif
            db.matchWarning(filename, error_line, msg);
        } else {
            res = sscanf(line, "%[^: ]:%d:%d: note: %[^\n]\n", filename, &error_line, &col, msg);
            if (res == 4) {
                // found note
#if TesterDebug
                color_print(color.Cyan, "%s %d:%d '%s'", filename, error_line, col, msg);
#endif
                db.matchNote(filename, error_line, msg);
            }
        }
    }

    if (res == 4) {
        // match msg string and set cp to that to avoid duplicates on empty lines
        const char* found = strstr(line, msg);
        assert(found);
        line = found;
    }
}

fn void Db.checkErrors(Db* db, const char* buffer, u32 size) {
#if TesterDebug
    color_print(color.Magenta, "stderr:\n%s", buffer);
#endif
    const char* cp = buffer;
    const char* end = cp + size;
    const char* line = cp;
    bool haveColon = false;
    while (cp != end) {
        // cut up into lines
        if (*cp == ':') haveColon = true;
        if (*cp == '\n') {
            char[512] data;
            u32 len = cast<u32>(cp - line);
            assert(len < sizeof(data));
            memcpy(data, line, len);
            data[len] = 0;
            if (haveColon) db.checkDiagnosticLine(data);
            cp++;
            line = cp;
            haveColon = false;
        } else {
            cp++;
        }
    }
}

fn void Db.checkExpectedFiles(Db* db) {
    char[constants.Max_path] basedir;
    sprintf(basedir, "%s/output/test/", db.tmp_dir);
    for (u32 i=0; i<db.expectedCount; ++i) {
        ExpectFile* e = db.expectedFiles[i];
        if (!e.check(db.output, basedir)) db.hasErrors = true;
    }
}

public fn bool Db.printIssues(const Db* db) {
    bool res = false;
    issues.Iter iter = db.errors.getIter();
    while (iter.more()) {
        db.output.color(colError);
        db.output.print("%s:%d: expected error '%s'",
                iter.getFilename(), iter.getLineNr(), iter.getMsg());
        db.output.color(color.Normal);
        db.output.newline();
        res = true;
        iter.next();
    }

    iter = db.warnings.getIter();
    while (iter.more()) {
        db.output.color(colError);
        db.output.print("%s:%d: expected warning '%s'",
                iter.getFilename(), iter.getLineNr(), iter.getMsg());
        db.output.color(color.Normal);
        db.output.newline();
        res = true;
        iter.next();
    }

    iter = db.notes.getIter();
    while (iter.more()) {
        db.output.color(colError);
        db.output.print("%s:%d: expected note '%s'",
                iter.getFilename(), iter.getLineNr(), iter.getMsg());
        db.output.color(color.Normal);
        db.output.newline();
        res = true;
        iter.next();
    }
    return res;
}

