/* Copyright 2022-2025 Bas van den Berg
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

module expect_file;

import stdlib local;
import string local;
import stdio local;

#if TesterDebug
import color;
#endif
import file_utils;
import line_db;
import test_utils local;
import string_buffer;

/*
    Design:
    - compares file content with expectations
    - start/end whitespace is always ingored
    - empty lines test file are ignored
    - can be in mode complete -> every line must match
    - can be in mode atleast -> at least given lines must be present
    - if lines are sequential, they must also be sequential in test file

    Q: must there be space between 2 blocks in test file? -> no
*/

const u32 EXPECT_MAX_LINE = 512;

public type ExpectMode enum u8 {
    ATLEAST,
    COMPLETE,
}

public type ExpectFile struct @(opaque) {
    char[file_utils.Max_path] filename;
    ExpectMode mode;
    string_buffer.Buf* output;  // will be set in check()

    const char* testFilename;
    // during analysis
    u32 lastLineNr;
    u32 expIndex;
    // cache for Lines[expIndex]
    const char* expectedLine;
    u32 expectedLineNr;
    bool consecutive;

    line_db.Db* lines;
}


public fn ExpectFile* create(const char* name, ExpectMode m, const char* testFilename) {
    ExpectFile* f = calloc(1, sizeof(ExpectFile));
    strcpy(f.filename, name);
    f.mode = m;
    f.testFilename = testFilename;
    f.lines = line_db.create();
    return f;
}

public fn void ExpectFile.destroy(ExpectFile* f) {
    f.lines.destroy();
    free(f);
}

public fn void ExpectFile.addLine(ExpectFile* f, u32 line_nr, const char* start, const char* end) {
    bool consecutive = (f.lastLineNr + 1 == line_nr); // ignore for first one (always ok)

    skipInitialWhitespace(&start, end);
    skipTrailingWhitespace(start, &end);

    if (strncmp(start, "//", 2) == 0) return;   // ignore comments

    f.lastLineNr = line_nr;
    f.lines.add(start, end, line_nr, consecutive);
}

fn bool ExpectFile.checkLine(ExpectFile* f, u32 line_nr, const char* start, const char* end) {

    skipInitialWhitespace(&start, end);
    skipTrailingWhitespace(start, &end);

    u32 len = (u32)(end - start);
    if (len == 0) return true;  // ignore empty lines
    if (strncmp(start, "//", 2) == 0) return true;    // ignore comment lines

    if (!f.expectedLine) {
        if (f.mode == ExpectMode.COMPLETE) {
            color_print2(f.output, colError, "%s:%d: unexpected '%.*s'", f.testFilename, f.expectedLineNr+1, (i32)len, start);
            color_print2(f.output, colError, "  in file %s: line %d\n     unexpected line '%.*s'", f.filename, line_nr, (i32)len, start);
            return false;
        } else {
            return true;
        }
    }
    if (strncmp(f.expectedLine, start, len) == 0) {
#if TesterDebug
        printf("-> match\n");
#endif
        f.expIndex++;
        f.setExpected();
    } else {
        if (f.mode == ExpectMode.COMPLETE || f.consecutive) {
            color_print2(f.output, colError, "%s:%d: expected '%s', got '%.*s'", f.testFilename, f.expectedLineNr, f.expectedLine, (i32)len, start);
            color_print2(f.output, colError, "  in file %s: line %d\n  expected '%s'\n       got '%.*s'", f.filename, line_nr, f.expectedLine, (i32)len, start);
            return false;
        }
    }
    return true;
}

fn void ExpectFile.setExpected(ExpectFile* f) {
    if (f.expIndex == f.lines.size()) {
        f.expectedLine = nil;
        f.consecutive = false;
    } else {
        f.expectedLine = f.lines.getLine(f.expIndex);
        f.expectedLineNr = f.lines.getLineNr(f.expIndex);
        f.consecutive = f.lines.getConsecutive(f.expIndex);
    }
#if TesterDebug
    color_print(color.Bcyan, "exp [%s]  %d", f.expectedLine, f.consecutive);
#endif
}

public fn bool ExpectFile.check(ExpectFile* f, string_buffer.Buf* output, const char* basedir) {
    f.output = output;
    bool result = true;

    file_utils.File file.init(basedir, f.filename);
    if (!file.exists()) {
        color_print2(f.output, colError, "  missing expected file '%s' (%s)", f.filename, file.path);
        return false;
    }

    if (!file.load()) {
        fprintf(stderr, "error loading %s: %s\n", file.path, file.getError());
        exit(EXIT_FAILURE);
    }

    if (f.lines.size() == 0) return true;

    const char* lineStart = file.data();
    f.setExpected();

    u32 line_nr = 1;
    while (*lineStart) {
        // cut it up into lines (even if empty)
        const char* cp = lineStart;
        while (*cp) {
            if (*cp == '\n') break;
            cp++;
        }
        if (!f.checkLine(line_nr, lineStart, cp)) {
            result = false;
            break;
        }
        line_nr++;
        if (*cp == '\n') cp++;   // skip newline
        lineStart = cp;
    }
    if (!*lineStart && f.expectedLine != nil) {
        color_print2(f.output, colError, "%s:%d: expected '%s'", f.testFilename, f.expectedLineNr, f.expectedLine);
        color_print2(f.output, colError, "  in file %s: expected '%s'", f.filename, f.expectedLine);
        result = false;
    }
    file.close();
    return result;
}

