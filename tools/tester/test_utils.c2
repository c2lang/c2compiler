/* Copyright 2022-2025 Bas van den Berg
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

module test_utils;

import ctype;
import stdarg local;
import stdio local;
import string local;

import color;
import string_buffer;

public bool color_output;
const char* proc_name = "";

public const char* colError = color.Bred;
public const char* colSkip = color.Bcyan;
public const char* colOk = color.Green;
//public const char* colDebug = color.Bmagenta;

// NOTE: end must point AFTER last valid char (could be 0-terminator)

public fn void skipInitialWhitespace(const char** start, const char* end) {
    const char* cp = *start;
    while (cp != end && ctype.isblank(*cp)) cp++;
    *start = cp;
}

public fn void skipTrailingWhitespace(const char* start, const char** end) {
    const char* cp = *end;
    while (cp > start && ctype.isblank(cp[-1])) cp--;
    *end = cp;
}

public fn void set_color_output(const char *name, bool enable) {
    proc_name = name;
    color_output = enable;
}

public fn void color_print(const char* col, const char* format @(printf_format), ...) {
    char[1024] buffer;
    va_list args;
    va_start(args, format);
    vsnprintf(buffer, sizeof(buffer), format, args);
    va_end(args);

    if (color_output) printf("%s%s%s\n", col, buffer, color.Normal);
    else printf("%s\n", buffer);
}

public fn void print_error(const char* format @(printf_format), ...) {
    char[1024] buffer;
    va_list args;
    va_start(args, format);
    vsnprintf(buffer, sizeof(buffer), format, args);
    va_end(args);

    if (color_output) fprintf(stderr, "%s: %s%s%s\n", proc_name, color.Byellow, buffer, color.Normal);
    else fprintf(stderr, "%s: %s\n", proc_name, buffer);
}

public fn void color_print2(string_buffer.Buf* output,
                            const char* col,
                            const char* format @(printf_format),
                            ...)
{
    char[1024] buffer;
    va_list args;
    va_start(args, format);
    vsnprintf(buffer, sizeof(buffer), format, args);
    va_end(args);

    if (color_output) output.print("%s%s%s\n", col, buffer, color.Normal);
    else output.print("%s\n", buffer);
}

public fn const char* find(const char* start, const char* end, const char* text) {
    usize tlen = strlen(text);
    if (start > end)
        return nil;
    if (tlen == 0)
        return start;
    for (;;) {
        const char* cp = memchr(start, *text, (usize)(end - start));
        if (!cp)
            break;
        usize len = (usize)(end - cp);
        if (len < tlen)
            break;
        if (!memcmp(cp, text, tlen))
            return cp;
        start = cp + 1;
    }
    return nil;
}

public fn bool append(char* dest, u32 size, const char* tail) {
    usize len = strlen(dest);
    usize len2 = strlen(tail);
    if (len + len2 >= size) {
        while (len + 1 < size)
            dest[len++] = *tail++;
        dest[len] = '\0';
        return false;
    }
    memcpy(dest + len, tail, len2 + 1);
    return true;
}

public fn bool same_string(const char* a, const char* b) {
    return strcmp(a, b) == 0;
}

public fn bool strstart(const char* p, const char* s, const char** pp) {
    usize len = strlen(s);
    if (strncmp(p, s, len) != 0)
        return false;
    if (pp) *pp = p + len;
    return true;
}
