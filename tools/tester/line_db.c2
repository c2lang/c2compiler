/* Copyright 2022-2025 Bas van den Berg
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

module line_db;

import stdlib local;
import string local;

type Entry struct {
    char* line;
    u32 line_nr;
    bool consecutive;
}

public type Db struct @(opaque) {
    u32 count;
    u32 capacity;
    // TODO use vector<Entry>
    Entry* entries;
}

public fn Db* create() {
    Db* db = calloc(1, sizeof(Db));
    return db;
}

public fn void Db.destroy(Db* db) {
    for (u32 i=0; i<db.count; i++) {
        free(db.entries[i].line);
    }
    free(db.entries);
    free(db);
}

public fn u32 Db.size(const Db* db) {
    return db.count;
}

public fn void Db.resize(Db* db, u32 capacity) {
    Entry* entries2 = malloc(capacity * sizeof(Entry));
    if (db.count) {
        memcpy(entries2, db.entries, db.count * sizeof(Entry));
        free(db.entries);
    }
    db.capacity = capacity;
    db.entries = entries2;
}

public fn void Db.add(Db* db, const char* start, const char* end, u32 line_nr, bool consecutive) {
    u32 len = (u32)(end - start);
    if (db.count == db.capacity) {
        db.resize((u32)(db.capacity ? db.capacity * 2 : 4));
    }
    Entry* entry = &db.entries[db.count];
    db.count++;

    entry.line = malloc(len + 1); // add 0-terminator
    memcpy(entry.line, start, len);
    entry.line[len] = 0;
    entry.line_nr = line_nr;
    entry.consecutive = consecutive;
}

public fn const char* Db.getLine(const Db* db, u32 idx) {
    return db.entries[idx].line;
}

public fn u32 Db.getLineNr(const Db* db, u32 idx) {
    return db.entries[idx].line_nr;
}

public fn bool Db.getConsecutive(const Db* db, u32 idx) {
    return db.entries[idx].consecutive;
}


