/* Copyright 2022-2025 Bas van den Berg
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

module ir;

import constants;

import std;

public type FunctionInfo struct {
    BlockList blocks;
    InstrList instructions;
    CaseList cases;
    PhiList phis;   // for phi instructions
    u16 num_slots;
    u8 num_args;
    // args[0][low bits] is return type (None if no return value)
    u8[1 + constants.MaxCallArgs/2] args;   // stores 2 ir.Types per u8, first low, then high bits
}
static_assert(80, sizeof(FunctionInfo));

public fn FunctionInfo* FunctionInfo.create(u32 num_blks, u32 num_instr, u32 num_refs) {
    FunctionInfo* fi = std.malloc(sizeof(FunctionInfo));
    fi.blocks.init(num_blks);
    fi.instructions.init(num_instr);
    fi.cases.init();
    fi.phis.init();
    fi.num_args = 0;
    return fi;
}

public fn void FunctionInfo.free(FunctionInfo* fi) {
    fi.phis.free();
    fi.cases.free();
    fi.instructions.free();
    fi.blocks.free();
    std.free(fi);
}

// Note: must be called before addArg
public fn void FunctionInfo.setReturnType(FunctionInfo* fi, ir.Type t) {
    fi.args[0] = t;
    fi.num_args = 1;
}

public fn void FunctionInfo.addArg(FunctionInfo* fi, ir.Type t) {
    u8* ptr = &fi.args[fi.num_args/2];
    if (fi.num_args % 2) {  // store in high bits
        *ptr |= (t << 4);
    } else {    // store in low bits (high bits are not used yet)
        *ptr = t;
    }
    fi.num_args++;
}

public fn Type FunctionInfo.getReturnType(const FunctionInfo* fi) {
    if (fi.num_args == 0) return Type.None;
    return cast<Type>(fi.args[0] & 0x0F);
}

public fn Type FunctionInfo.getArg(const FunctionInfo* fi, u32 idx) {
    u8 value = fi.args[idx/2];
    if (idx % 2) {  // return high bits
        value >>= 4;
    } else {    // return low bits
        value &= 0x0F;
    }
    return cast<Type>(value);
}

