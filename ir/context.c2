/* Copyright 2022-2025 Bas van den Berg
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

module ir;

import bit_array;
import index_list;
import instr_inserter;
import lookup_table;
import string_pool;

import stdlib;
import string;
#if DebugIr
import stdio;
#endif

public type Context struct @(opaque) {
    // context stuff
    string_pool.Pool* pool;
    ConstantList constants;
    SymbolList symbols;
    InitValueList init_values;

    // builder stuff, used during function generation (extract to builder?)
    bool in_block;
    u32 slot_idx;
    u32 num_scopes;
    SymbolId cur_func;
    SymbolId cur_global;
    BlockId cur_block;
    u32 blk_start_instr;    // used to note starting instruction
    bool block_terminated;

    // only used during function generation / optimization
    index_list.List block_order;
    lookup_table.Table conversion;
    FunctionInfo* tmp_info;

    SlotCollector collector;
    RevList revlist;
    instr_inserter.InstrInserter inserter;
    bit_array.BitArray active_blocks;
}

public fn Context* create() {
    Context* c = stdlib.calloc(1, sizeof(Context));
    c.pool = string_pool.create(2*1024, 256);
    c.constants.init(128);
    c.symbols.init(128);
    c.init_values.init(128);

    c.block_order.init(64);
    c.conversion.init(64);

    c.tmp_info = FunctionInfo.create(32, 64, 32);
    c.collector.create();
    c.revlist.create(256);
    c.inserter.create();
    return c;
}

public fn void Context.free(Context* c) {
    c.inserter.free();
    c.revlist.free();
    c.collector.free();
    for (u32 i=1; i<c.symbols.getCount(); i++) {
        const Symbol* s = c.symbols.get(i);
        if (s.is_function && s.f.info) {
            s.f.info.free();
        }
    }
    c.tmp_info.free();
    c.conversion.free();
    c.block_order.free();

    c.init_values.free();
    c.symbols.free();
    c.constants.free();
    c.pool.free();
    stdlib.free(c);
}

public fn SymbolId Context.addStringLiteral(Context* c, const char* name, const char* text, u32 size) {
#if DebugIr
    stdio.printf("addStringLiteral(%s)\n", text);
#endif
    SymbolId id = c.addGlobalVar(name, 1, false);
    u32 text_idx = c.pool.addStr(text, false);

    Symbol* s = c.symbols.get(id);
    s.g.init_value_idx = c.init_values.getCount();
    s.g.init_value_count = 1;

    InitValue* v = c.init_values.add();
    v.init(InitValueKind.Text, text_idx);
    return id;
}

public fn SymbolId Context.addGlobalVar(Context* c, const char* name, u32 align, bool is_external) {
    u32 name_idx = c.pool.addStr(name, false);
    SymbolId id = c.symbols.add(name_idx, false, align, is_external);
#if DebugIr
    stdio.printf("addGlobalVar(%s) id=%d external=%d\n", name, id, is_external);
#endif
    return id;
}

public fn SymbolId Context.addFunction(Context* c, const char* name, bool is_external) {
    u32 name_idx = c.pool.addStr(name, false);
    // TODO 4/8 bytes, ARCH
    SymbolId id = c.symbols.add(name_idx, true, 4, is_external);
#if DebugIr
    stdio.printf("addFunction(%s) id=%d external=%d\n", name, id, is_external);
#endif
    return id;
}

public fn void Context.startFunc(Context* c, SymbolId id) {
#if DebugIr
    stdio.printf("startFunc(%d)  cur %d\n", id, c.cur_func);
#endif
    assert(c.cur_func == 0);
    c.cur_func = id;
    c.num_scopes = 0;
    c.slot_idx = 0;
}

public fn void Context.endFunc(Context* c) {
#if DebugIr
    stdio.printf("endFunc() cur %d\n", c.cur_func);
#endif
    assert(c.num_scopes == 0);
    assert(c.cur_func);

    c.finalizeFunction(c.cur_func);

    c.cur_func = 0;
}

public fn void Context.startGlobal(Context* c, SymbolId id) {
#if DebugIr
    stdio.printf("startGlobal(%d)  cur %d\n", id, c.cur_global);
#endif
    assert(c.cur_global == 0);
    c.cur_global = id;
    Symbol* s = c.symbols.get(c.cur_global);
    s.g.init_value_idx = c.init_values.getCount();
}

public fn void Context.endGlobal(Context* c) {
#if DebugIr
    stdio.printf("endGlobal()  cur %d\n", c.cur_global);
#endif
    assert(c.cur_global);
    Symbol* s = c.symbols.get(c.cur_global);
    s.g.init_value_count = c.init_values.getCount() - s.g.init_value_idx;
    c.cur_global = 0;
}

public fn void Context.addInitZero(Context* c, u32 size) {
#if DebugIr
    stdio.printf("addInitZero()  %d\n", size);
#endif
    assert(size < 0x0FFFFFFF);
    assert(c.cur_global);
    InitValue* v = c.init_values.add();
    v.init(InitValueKind.Zero, size);
}

public fn void Context.addInitValueU8(Context* c, u32 value) {
    InitValue* v = c.init_values.add();
    v.init(InitValueKind.Byte, value);
}

public fn void Context.addInitValueU16(Context* c, u32 value) {
    InitValue* v = c.init_values.add();
    v.init(InitValueKind.Short, value);
}

public fn void Context.addInitValueU32(Context* c, u32 value) {
    InitValue* v = c.init_values.add();
    if (value < 0x0FFFFFFF) {
        v.init(InitValueKind.Word, value);
    } else {
        Constant constant = { .uvalue = value };
        u32 idx = c.constants.add(&constant);
        v.init(InitValueKind.Word2, idx);
    }
}

public fn void Context.addInitValueU64(Context* c, u64 value) {
    InitValue* v = c.init_values.add();
    if (value < 0x0FFFFFFF) {
        v.init(InitValueKind.Long, cast<u32>(value));
    } else {
        Constant constant = { .uvalue = value };
        u32 idx = c.constants.add(&constant);
        v.init(InitValueKind.Long2, idx);
    }
}

public fn void Context.addInitSymbol(Context* c, SymbolId id) {
    InitValue* v = c.init_values.add();
    v.init(InitValueKind.Symbol, id);
}

// size = strlen()
public fn void Context.addInitString(Context* c, const char* text, u32 size) {
    InitValue* v = c.init_values.add();
    u32 text_idx = c.pool.add(text, size, false);
    v.init(InitValueKind.Text, text_idx);
}

public fn void Context.setFunctionReturnType(Context* c, Type t) {
    c.tmp_info.setReturnType(t);
}

public fn void Context.addFuncArg(Context* c, Type t) {
    c.tmp_info.addArg(t);
}

public fn u32 Context.addCallArgs(Context* c, const RefList* refs) {
    return c.tmp_info.refs.addList(refs);
}

public fn BlockId Context.createBlock(Context* c, BlockKind kind) {
    BlockId id = c.tmp_info.blocks.add(kind);
#if DebugIr
    stdio.printf(" createBlock(%s) id=%d\n", kind.str(), id);
#endif
    return id;
}

public fn bool Context.isBlockTerminated(const Context* c) {
    return c.block_terminated;
}

// Note: blocks are not implemented in order! (can be nested statements)
public fn void Context.startBlock(Context* c, BlockId id) {
#if DebugIr
    Block* b = c.tmp_info.blocks.get(id);
    stdio.printf(" startBlock(%s.%d) cur %d\n", b.getKind().str(), id, c.cur_block);
#endif
    assert(!c.in_block);
    c.in_block = true;
    c.block_order.add(id);
    c.cur_block = id;
    c.block_terminated = false;
    c.blk_start_instr = c.tmp_info.instructions.getCount();
}

public fn void Context.endBlock(Context* c) {
#if DebugIr
    stdio.printf(" endBlock()\n");
#endif
    if (!c.block_terminated) {
        // always close block with jmp to next block
        c.addJmpInstr(c.cur_block+1);
    }
    Block* b = c.tmp_info.blocks.get(c.cur_block);
    b.setInstructions(c.blk_start_instr, c.tmp_info.instructions.getCount() - c.blk_start_instr);
    c.cur_block = 0;
    c.in_block = false;
}

public fn BlockId Context.getCurBlock(const Context* c) {
    return c.cur_block;
}

public fn void Context.addJmpInstr(Context* c, BlockId dest) {
    assert(c.in_block);
    Block* b = c.tmp_info.blocks.get(c.cur_block);
#if DebugIr
    stdio.printf("  jmp(%s.%d)\n", b.getKindName(), dest);
#endif
    // destination blocks are stored inside Block, not jmp instr
    b.setDest(dest, 0);
    Ref ref.init(RefKind.JmpDest, 0);
    Instr* i = c.tmp_info.instructions.add();
    i.init1(InstrKind.Jmp, ref);
    c.block_terminated = true;
}

public fn void Context.addJmpIfInstr(Context* c, Ref cond, BlockId dest1, BlockId dest2) {
    assert(c.in_block);
    Block* b = c.tmp_info.blocks.get(c.cur_block);
#if DebugIr
    Block* d1 = c.tmp_info.blocks.get(dest1);
    Block* d2 = c.tmp_info.blocks.get(dest1);
    stdio.printf("  cond jmp_if %s.%d, %s.%d\n", d1.getKindName(), dest1, d2.getKindName(), dest2);
#endif
    b.setDest(dest1, dest2);
    Ref ref.init(RefKind.JmpDest, 0);
    Instr* i = c.tmp_info.instructions.add();
    i.init2(InstrKind.JmpIf, cond, ref);
    c.block_terminated = true;
}

public fn void Context.addRet0Instr(Context* c) {
#if DebugIr
    stdio.printf("  ret\n");
#endif
    assert(c.in_block);
    Instr* i = c.tmp_info.instructions.add();
    i.init0(InstrKind.Ret);
    c.block_terminated = true;
    Block* b = c.tmp_info.blocks.get(c.cur_block);
    b.end_block = 1;
}

public fn void Context.addRet1Instr(Context* c, Ref ref) {
#if DebugIr
    stdio.printf("  ret <val>\n");
#endif
    assert(c.in_block);
    Instr* i = c.tmp_info.instructions.add();
    i.init1(InstrKind.Ret, ref);
    c.block_terminated = true;
    Block* b = c.tmp_info.blocks.get(c.cur_block);
    b.end_block = 1;
}

public fn Ref Context.addLoadInstr(Context* c, Type t, Ref src) {
#if DebugIr
    stdio.printf("  load %s %s %d\n", t.str(), src.getKindName(), src.value);
#endif
    assert(c.in_block);

    Ref out.init(RefKind.Temp, c.tmp_info.instructions.getCount());

    InstrKind k;
    switch (t) {
    case None:
        assert(0);
        return out;
    case I8:
        k = InstrKind.Load1;
        break;
    case I16:
        k = InstrKind.Load2;
        break;
    case I32:
        k = InstrKind.Load4;
        break;
    case I64:
        k = InstrKind.Load8;
        break;
    case U8:
        k = InstrKind.Load1;
        break;
    case U16:
        k = InstrKind.Load2;
        break;
    case U32:
        k = InstrKind.Load4;
        break;
    case U64:
        k = InstrKind.Load8;
        break;
    case F32:
        k = InstrKind.Load4;
        break;
    case F64:
        k = InstrKind.Load8;
        break;
    }
    Instr* i = c.tmp_info.instructions.add();
    i.init1b(k, src);
    return out;
}

const InstrKind[elemsof(Type)] Type2Store = {
    [Type.I8]  = InstrKind.Store1,
    [Type.I16] = InstrKind.Store2,
    [Type.I32] = InstrKind.Store4,
    [Type.I64] = InstrKind.Store8,
    [Type.U8]  = InstrKind.Store1,
    [Type.U16] = InstrKind.Store2,
    [Type.U32] = InstrKind.Store4,
    [Type.U64] = InstrKind.Store8,
    [Type.F32] = InstrKind.Store4,
    [Type.F64] = InstrKind.Store8,
}

public fn void Context.addStoreInstr(Context* c, Type t, Ref src, Ref dest) {
#if DebugIr
    stdio.printf("  store %s  %s %d -> %s %d\n", t.str(),
        src.getKindName(), src.value,
        dest.getKindName(), dest.value);
#endif
    assert(c.in_block);
    Instr* i = c.tmp_info.instructions.add();
    assert (t != Type.None);
    InstrKind k = Type2Store[t];
    i.init2(k, src, dest);
}

public fn Ref Context.addBinaryInstr(Context* c, InstrKind k, Ref left, Ref right) {
#if DebugIr
    stdio.printf("  binary Instr %s (%s %d, %s %d) \n", k.str(),
        left.getKindName(), left.value,
        right.getKindName(), right.value);
#endif
    Ref out.init(RefKind.Temp, c.tmp_info.instructions.getCount());

    Instr* i = c.tmp_info.instructions.add();
    i.init2b(k, left, right);
    return out;
}

public fn Ref Context.addCallInstr(Context* c, Ref name, Ref args, bool has_result, bool noreturn) {
#if DebugIr
    stdio.printf("  call %s\n", c.pool.idx2str(name.value));
#endif
    Ref out.init(RefKind.Temp, c.tmp_info.instructions.getCount());

    Instr* i = c.tmp_info.instructions.add();
    if (has_result) {
        i.init2b(InstrKind.Call, name, args);
    } else {
        i.init2(InstrKind.Call, name, args);
    }
    if (noreturn) {
        Block* b = c.tmp_info.blocks.get(c.cur_block);
        b.end_block = 1;
        c.block_terminated = true;
    }
    return out;
}

public fn Ref Context.addPhi2Instr(Context* c, BlockId b1, Ref r1, BlockId b2, Ref r2) {
#if DebugIr
    stdio.printf("  phi2  %d, %d\n", b1, b2);
#endif
    Ref out.init(RefKind.Temp, c.tmp_info.instructions.getCount());

    Instr* i = c.tmp_info.instructions.add();
    i.initPhi(c.tmp_info.phis.getCount(), 2);

    Block* blk = c.tmp_info.blocks.get(b1);
    blk.phi_source = 1;
    blk = c.tmp_info.blocks.get(b2);
    blk.phi_source = 1;

    c.tmp_info.phis.add(b1, r1);
    c.tmp_info.phis.add(b2, r2);
    return out;
}

public fn Ref Context.addStackSlot(Context* c, u32 align, Ref size) {
#if DebugIr
    stdio.printf("  slot (%d)\n", c.slot_idx);
#endif
    u32 idx = c.slot_idx;
    c.slot_idx++;
    assert(c.slot_idx < 65536); // to fit in u16
    Ref out.init(RefKind.Slot, idx);
    Instr* i = c.tmp_info.instructions.add();

    // TODO pass instr idx (global)

    InstrKind kind;
    switch (align) {
    case 1:
        kind = InstrKind.Alloc1;
        break;
    case 2:
        kind = InstrKind.Alloc2;
        break;
    case 4:
        kind = InstrKind.Alloc4;
        break;
    case 8:
        kind = InstrKind.Alloc8;
        break;
    default:
        //stdio.printf("WARN: implement other alignment (%d)\n", align);
        kind = InstrKind.Alloc8;
        break;
    }
    i.init1b(kind, size);
    return out;
}

public fn Ref Context.addIntegerConstant(Context* c, i64 size) {
#if DebugIr
    stdio.printf("  integer (%d)\n", size);
#endif
    // if signed value fits in 27 bits, store it in Ref directly
    const i32 min_27bits = -0x3FFFFFF-1;
    const i32 max_27_bits = 0x3FFFFFF;
    Ref ref;
    if (size >= min_27bits && size <= max_27_bits) {
        ref.init(RefKind.Value, cast<u32>(size));
    } else {
        Constant constant = { .ivalue = size };
        u32 idx = c.constants.add(&constant);
        ref.init(RefKind.Integer, idx);
    }
    return ref;
}

public fn void Context.addComment(Context* c, const char* text) {
    c.addComment2(text, c.tmp_info);
}

fn Ref Context.addComment2(Context* c, const char* text, FunctionInfo* info) {
    u32 idx = c.pool.addStr(text, false);
    Ref out.init(RefKind.Temp, info.instructions.getCount());
    Instr* i = info.instructions.add();
    Ref ref.init(RefKind.Text, idx);
    i.init1(InstrKind.Comment, ref);
    return out;
}

public fn CaseId Context.addSwitchInstr(Context* c, Ref cond, u32 num_cases) {
#if DebugIr
    stdio.printf("  switch (%d)\n", after, num_cases);
#endif
    CaseId case_id = c.tmp_info.cases.reserve(num_cases);

    assert(c.in_block);
    Instr* i = c.tmp_info.instructions.add();
    i.init1(InstrKind.Switch, cond);
    c.block_terminated = true;
    Block* b = c.tmp_info.blocks.get(c.cur_block);
    b.end_with_switch = 1;
    b.setDest(case_id, num_cases);
    return case_id;
}

public fn void Context.setCase(Context* c, CaseId case_id, u32 value, BlockId blk_id) {
#if DebugIr
    stdio.printf("  case (%d) value %d blk %d\n", case_id, value, blk_id);
#endif
    c.tmp_info.cases.set(case_id, value, blk_id);
}

fn void Context.finalizeFunction(Context* c, SymbolId id) {
    // prune unused blocks and flatten blocks with only a jmp instruction
    Symbol* s = c.symbols.get(id);
    //Function* f = c.functions.get(id);
    u32 num_blocks = c.tmp_info.blocks.getCount();
    c.tmp_info.num_slots = cast<u16>(c.slot_idx);

    const char* name = c.pool.idx2str(s.name);

    //c.dump_function(c.tmp_info, name);
    //c.print_function(id, c.tmp_info);

    // prune unused and empty blocks, possible convert jmp_if to jmp
    c.checkDest(0);

    //c.dump_function(c.tmp_info, name);
    //c.print_function(id, c.tmp_info);

    // move used blocks to new list, drop unused blocks

    // TODO extract to function, pass 2x FunctionInfo
    u32 num_used_blocks = c.tmp_info.getUsedBlkCount();
    // TODO dont know used instructions (should be calculated during used_blocks)
    FunctionInfo* fi2 = FunctionInfo.create(num_used_blocks, 32, c.tmp_info.refs.getCount());
    fi2.num_slots = c.tmp_info.num_slots;   // TODO could change due to dead code removal

    // put blocks in correct order in new FunctionInfo
    const u32* order = c.block_order.getFrom(0);
    assert(num_blocks == c.block_order.getCount());
    u32 blk_count = 0;
    c.conversion.clear(num_blocks);   // NOTE: potentially large memset
    for (u32 i=0; i<num_blocks; i++) {
        BlockId bid = order[i];
        const Block* b = c.tmp_info.blocks.get(bid);
        if (!b.used) continue;
        fi2.blocks.copy(b);
        c.conversion.set(bid, blk_count);
        //stdio.printf("BLOCK MOVE %d -> %d\n", bid, blk_count);
        blk_count++;
    }

    // convert block dests (old -> new)
    Block* new_blks = fi2.blocks.get(0);
#if 0
    if (c.conversion.get(0) != 0) {
        c.dump_function(c.tmp_info, name);
        c.conversion.dump();
    }
#endif
    assert(c.conversion.get(0) == 0);   // block 0 should never move
    for (u32 i=0; i<blk_count; i++) {
        Block* b = &new_blks[i];
        if (b.end_with_switch) {
            CaseId case_id = b.dests[0];
            u32 num_cases = b.dests[1];
            for (u32 j=0; j<num_cases; j++) {
                Case* cs = c.tmp_info.cases.get(case_id+j);
                cs.block = c.conversion.get(cs.block);
            }
        } else {
            b.dests[0] = c.conversion.get(b.dests[0]);
            b.dests[1] = c.conversion.get(b.dests[1]);
        }
    }
    // also update block ids in phi clauses
    for (u32 i=0; i<c.tmp_info.phis.getCount(); i++) {
        PhiClause* pc = c.tmp_info.phis.get(i);
        pc.src = c.conversion.get(pc.src);
    }

    //c.dump_function(c.tmp_info, name);

    // Note: for now just copy all refs
    // TODO remove unused refs
    fi2.refs.copy(&c.tmp_info.refs);
    // TODO remove unused cases
    fi2.cases.copy(&c.tmp_info.cases);
    fi2.phis.copy(&c.tmp_info.phis);

    // args
    fi2.num_args = c.tmp_info.num_args;
    string.memcpy(fi2.args, c.tmp_info.args, sizeof(fi2.args));

    // TODO cleanup, extract to function
    // convert Ref.Temp to new index since intermediate blocks/instructions could have been removed
    const Instr* i_old = c.tmp_info.instructions.get(0);
    //stdio.printf("INSTR COUNT %d\n", c.tmp_info.instructions.getCount());
    c.conversion.clear(c.tmp_info.instructions.getCount());
    u32 i_index = 0;
    for (u32 i=0; i<blk_count; i++) {
        Block* b = &new_blks[i];
        u32 i_start = b.instr.start;
        u32 i_count = b.instr.count;
        //stdio.printf("   B[%d] %d - %d\n", i, i_start, i_start+i_count-1);
        u32 new_start = i_index;
        for (u32 j=i_start; j<i_start+i_count; j++) {
            Instr* is = fi2.instructions.add();
            is.copy(&i_old[j]);
            c.conversion.set(j, i_index);
            Ref* r = &is.args[0];
            if (r.isTemp()) r.value = c.conversion.get(r.value);
            r = &is.args[1];
            if (r.isTemp()) r.value = c.conversion.get(r.value);
            else if (r.isRefList()) { // can only occur on args[1]
                Ref* refs = fi2.refs.get(r.value);
                u32 idx = 0;
                while (1) {
                    Ref* r2 = &refs[idx];
                    if (r2.isTemp()) r2.value = c.conversion.get(r2.value);
                    if (!r2.isValid()) break;
                    idx++;
                }
            }
            i_index++;
        }
        b.instr.start = new_start;
    }
    // update refs used inside Phi instructions
    for (u32 i=0; i<fi2.phis.getCount(); i++) {
        PhiClause* pc = fi2.phis.get(i);
        if (pc.ref.isTemp()) pc.ref.value = c.conversion.get(pc.ref.value);
    }

    s.f.info = fi2;
    // TODO use Ref.StackSlot that doesn't change (= not temp)
    c.tmp_info.clear();
    c.block_order.clear();

    //c.dump_function(fi2, name);
    //c.generate_graphviz(fi2, name);
    //c.print_function(id, fi2);
    c.create_ssa(fi2, name);
    if (c.inserter.needsFixup()) c.fixup_function(fi2);

    //c.dump_function(fi2, name);
    //c.print_function(id, fi2);
}

fn bool empty_block(const Block* b, const InstrList* instructions) {
    // empty means only a jump
    if (b.instr.count == 1) return true;
    if (b.instr.count == 2) {
        Instr* instr = instructions.get(b.instr.start);
        if (instr.getKind() == InstrKind.Comment) return true;

        instr = instructions.get(b.instr.start+1);
        if (instr.getKind() == InstrKind.Comment) return true;
    }
    return false;
}

// uses tmp_info! TODO could also just use cur_info (points to current)
fn BlockId Context.checkDest(Context* c, BlockId id) {
    Block* b = c.tmp_info.blocks.get(id);

    if (b.checked) {
        if (b.used) return id;  // avoid circular loops
        assert(!b.end_with_switch);
        return b.dests[0];
    }
    b.checked = true;

    if (b.end_with_switch) {
        b.used = true;
        CaseId case_id = b.dests[0];
        u32 num_cases = b.dests[1];
        for (u32 i=0; i<num_cases; i++) {
            Case* cs = c.tmp_info.cases.get(case_id+i);
            BlockId new_blk = c.checkDest(cs.block);
            if (cs.block != new_blk) cs.block = new_blk;
        }
        return id;
    }

    if (b.dests[0] == 0 && b.dests[1] == 0) {   // last one
        b.used = true;
        return id;
    }

    if (!b.phi_source && id != 0 && empty_block(b, &c.tmp_info.instructions)) {
        BlockId new_blk = c.checkDest(b.dests[0]);
        if (new_blk == id) {
            b.used = true;
            b.dests[0] = id;    // create circular loop
        } else {
            b.used = false;
            b.dests[0] = new_blk;   // set for next queries
        }
        return new_blk;
    }

    b.used = true;
    if (b.dests[0]) {
        b.dests[0] = c.checkDest(b.dests[0]);
    }
    if (b.dests[1]) {
        b.dests[1] = c.checkDest(b.dests[1]);
    }

    if (b.dests[0] == b.dests[1]) {
        // both jumps go to same dest, convert cmp + jmp_if -> jmp
        Instr* last = c.tmp_info.instructions.get(b.instr.start + b.instr.count -1);
        Ref ref.init(RefKind.JmpDest, id);
        last.init1(InstrKind.Jmp, ref);
        b.dests[1] = 0;
        // unroll all unused temps -> after re-writing?
    }

    return id;
}

