/* Copyright 2022-2025 Bas van den Berg
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

module ir;

import std local;

public type InstrList struct {
    u32 count;
    u32 capacity;
    Instr* instrs;
}

public fn void InstrList.init(InstrList* l, u32 initial_size) {
    memset(l, 0, sizeof(InstrList));
    if (initial_size) {
        l.capacity = initial_size;
        l.instrs = std.malloc(l.capacity * sizeof(Instr));
    }
}

public fn void InstrList.free(InstrList* l) {
    if (l.instrs) std.free(l.instrs);
}

public fn void InstrList.reserve(InstrList* l, u32 extra) {
    u32 new_count = l.count + extra;
    if (new_count > l.capacity) l.resize(new_count);
}

fn void InstrList.resize(InstrList* l, u32 cap) {
    l.capacity = cap;
    Instr* instrs2 = malloc(l.capacity * sizeof(Instr));
    if (l.count) memcpy(instrs2, l.instrs, l.count * sizeof(Instr));
    if (l.instrs) free(l.instrs);
    l.instrs = instrs2;
}

public fn Instr* InstrList.add(InstrList* l) {
    if (l.count >= l.capacity) l.resize(l.capacity == 0 ? 8 : l.capacity * 2);

    return &l.instrs[l.count++];
}

public fn u32 InstrList.getCount(const InstrList* l) {
    return l.count;
}

public fn Instr* InstrList.get(const InstrList* l, u32 idx) {
    assert(idx < l.count);
    return &l.instrs[idx];
}

public fn void InstrList.swap(InstrList* l, InstrList* other) {
    InstrList tmp = *other;
    *other = *l;
    *l = tmp;
}

public fn void InstrList.prune(InstrList* l) {
    while (l.count) {
        Instr* last = &l.instrs[l.count-1];
        if (last.isNone()) l.count--;
        else break;
    }
}

public fn void InstrList.removeLastInstruction(InstrList* l) {
    l.count--;
}

