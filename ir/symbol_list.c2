/* Copyright 2022-2025 Bas van den Berg
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

module ir;

import string local;
import stdlib;

public type SymbolId u32;

// contains Functions and Globals
type Symbol struct {
    u32 name;
    u32 is_external : 1;
    u32 is_function : 1;
    u32 align : 8;  // global only
    u32 size : 22;  // global only    NOT USED YET
    union {
        struct f {
            FunctionInfo* info;
        }
        struct g {
            u32 init_value_idx;
            u32 init_value_count;
        }
    }
}
static_assert(16, sizeof(Symbol));


type SymbolList struct {
    u32 count;
    u32 capacity;
    Symbol* symbols;
}

fn void SymbolList.init(SymbolList* l, u32 initial_size) {
    memset(l, 0, sizeof(SymbolList));
    l.count = 1;    // start at 1, 0 used to indicate invalid
    l.resize(initial_size);
}

fn void SymbolList.free(SymbolList* l) {
    if (l.symbols) stdlib.free(l.symbols);
}

fn void SymbolList.resize(SymbolList* l, u32 cap) {
    l.capacity = cap;
    Symbol* symbols2 = stdlib.calloc(l.capacity, sizeof(Symbol));
    if (l.count > 1) memcpy(symbols2, l.symbols, l.count * sizeof(Symbol));
    if (l.symbols) stdlib.free(l.symbols);
    l.symbols = symbols2;
}

fn SymbolId SymbolList.add(SymbolList* l, u32 name, bool is_function, u32 align, bool is_external) {
    if (l.count == l.capacity) l.resize(l.capacity * 2);

    SymbolId idx = l.count;
    Symbol* s = &l.symbols[idx];
    memset(s, 0, sizeof(Symbol));
    s.name = name;
    s.align = align;
    s.is_external = is_external;
    s.is_function = is_function;
    if (is_function) {
        s.f.info = nil;
    } else {
        s.g.init_value_count = 0;
        s.g.init_value_idx = 0;
    }
    l.count++;
    return idx;
}

fn u32 SymbolList.getCount(const SymbolList* l) {
    return l.count;
}

fn Symbol* SymbolList.get(const SymbolList* l, SymbolId idx) {
    return &l.symbols[idx];
}

