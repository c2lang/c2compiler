/* Copyright 2022-2025 Bas van den Berg
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

module ir_lookup_table;

import std;

public type Table struct {
    u32 capacity;
    u32* data;
}

public fn void Table.init(Table* t, u32 initial) {
    t.data = nil;
    t.capacity = 0;
    t.resize(initial, false);
}

public fn void Table.free(Table* t) {
    std.free(t.data);
}

public fn void Table.clear(Table* t, u32 amount) {
    if (amount > t.capacity) t.resize(amount, false);
    std.memset(t.data, 0, amount * sizeof(u32));
}

public fn void Table.set(Table* t, u32 idx, u32 value) {
    while (idx >= t.capacity) t.resize(t.capacity * 2, true);
    t.data[idx] = value;
}

public fn u32 Table.get(const Table* t, u32 idx) {
    if (idx >= t.capacity) return 0;
    return t.data[idx];
}

fn void Table.resize(Table* t, u32 capacity2, bool copy) {
    // Note: could memset only new part, for now just clear whole new area
    u32* data2 = std.calloc(capacity2, sizeof(u32));
    if (t.data) {
        if (copy) std.memcpy(data2, t.data, t.capacity * sizeof(u32));
        std.free(t.data);
    }
    t.capacity = capacity2;
    t.data = data2;
}

/*
public fn void Table.dump(const Table* t) @(unused) {
    stdio.printf("TABLE %d\n", t.capacity);
    for (u32 i=0; i<t.capacity; i++) {
        if (t.data[i] != 0) stdio.printf("  [%d] %d\n", i, t.data[i]);
    }
}
*/

