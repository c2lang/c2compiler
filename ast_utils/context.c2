/* Copyright 2022-2025 Bas van den Berg
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

module ast_context;

import stdlib local;
import stdio;

type Block struct {
    u8* data;
    u32 size;
    Block* next;
}

fn Block* Block.create(u32 blk_size) {
    Block* b = malloc(sizeof(Block));
    b.data = malloc(blk_size);
    b.size = 0;
    b.next = nil;
    return b;
}

fn Block* Block.free(Block* b) {
    Block* next = b.next;
    free(b.data);
    free(b);
    return next;
}

fn u32 Block.count(const Block* b) {
    u32 total = 0;
    const Block* blk = b;
    while (blk) {
        total ++;
        blk = blk.next;
    }
    return total;
}

fn u32 Block.get_total(const Block* b) {
    u32 total = 0;
    const Block* blk = b;
    while (blk) {
        total += blk.size;
        blk = blk.next;
    }
    return total;
}

public type Context struct @(opaque) {
    Block* blk_head;
    Block* blk_tail;
    u32 blk_size;
    u32 num_allocs;
}

public fn Context* create(u32 blk_size) {
    Context* c = calloc(1, sizeof(Context));
    c.blk_size = blk_size;
    c.init();
    return c;
}

fn void Context.freeBlocks(Context* c) {
    Block* blk = c.blk_head;
    while (blk) blk = blk.free();
}

public fn void Context.free(Context* c) {
    c.freeBlocks();
    free(c);
}

fn void Context.init(Context* c) {
    c.blk_head = Block.create(c.blk_size);
    c.blk_tail = c.blk_head;
}

/*
public fn void Context.clear(Context* c) {
    c.freeBlocks();
    c.init();
}
*/

public fn void* Context.alloc(Context* c, u32 len) {
    len = (len + 7) & ~0x7; // always round to 8-byte boundaries
    c.num_allocs++;

    Block* last = c.blk_tail;
    if (last.size + len > c.blk_size) {
        c.blk_tail = Block.create(len > c.blk_size ? len : c.blk_size);
        last.next = c.blk_tail;
        last = last.next;
    }

    void* cur = last.data + last.size;
    last.size += len;
    return cur;
}

/*
// Make sure len bytes fit sequentially, does NOT allocate!
public fn void Context.reserve(Context* c, u32 len) {
    len = (len + 7) & ~0x7; // always round to 8-byte boundaries

    Block* last = c.blk_tail;
    if (last.size + len >= c.blk_size) {
        c.blk_tail = Block.create(c.blk_size);
        last.next = c.blk_tail;
        last = last.next;
    }
}
*/

public fn void Context.report(const Context* c) {
    u32 num = c.blk_head.count();
    u32 total = c.blk_head.get_total();

    u32 avg = 0;
    if (c.num_allocs) avg = total / c.num_allocs;
    stdio.printf("context: %d allocs (avg %d bytes), %d blocks (%d), total %d Kb (%d)\n",
        c.num_allocs, avg, num, c.blk_size, (total / 1024) + 1, total);
}
