/* Copyright 2022-2025 Bas van den Berg
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

module string_buffer;

import stdio local;
import stdarg local;
import stdlib local;
import string local;

public type Buf struct @(opaque) {
    u32 capacity;
    u32 size_;
    u32 indent_step;
    char* data_;
    bool colors;
    bool own;       // note: does not work with resize
}

static_assert(32, sizeof(Buf));

public fn Buf* create(u32 capacity, bool colors, u32 indent_step) {
    Buf* buf = malloc(sizeof(Buf));
    buf.capacity = capacity;
    buf.size_ = 0;
    buf.indent_step = indent_step;
    buf.data_ = malloc(capacity);
    buf.colors = colors;
    buf.own = true;
    buf.data_[0] = 0;
    return buf;
}

// Note: no growing possible
public fn Buf* create_static(u32 capacity, bool colors, char* data) {
    Buf* buf = malloc(sizeof(Buf));
    buf.capacity = capacity;
    buf.size_ = 0;
    buf.data_ = data;
    buf.colors = colors;
    buf.own = false;
    buf.data_[0] = 0;
    return buf;
}

public fn void Buf.free(Buf* buf) {
    if (buf.own) free(buf.data_);
    free(buf);
}

public fn u32 Buf.size(const Buf* buf) {
    return buf.size_;
}

public fn const char* Buf.data(const Buf* buf) {
    return buf.data_;
}

public fn const u8* Buf.udata(const Buf* buf) {
    return cast<u8*>(buf.data_);
}

public fn void Buf.clear(Buf* buf) {
    buf.size_ = 0;
}

public fn void Buf.color(Buf* buf, const char* color) {
    if (!buf.colors) return;

    u32 len = cast<u32>(strlen(color));
    buf.add2(color, len);
}

public fn void Buf.add1(Buf* buf, char c) {
    if (buf.size_ + 2 > buf.capacity) {
        u32 new_cap = buf.capacity * 2;
        while (buf.size_ + 2 > new_cap) new_cap *= 2;
        buf.resize(new_cap);
    }
    buf.data_[buf.size_] = c;
    buf.size_ += 1;
    buf.data_[buf.size_] = 0;
}

public fn void Buf.add(Buf* buf, const char* text) {
    u32 len = cast<u32>(strlen(text));
    buf.add2(text, len);
}

// len = strlen(text)
public fn void Buf.add2(Buf* buf, const char* text, u32 len) {
    if (buf.size_ + len + 1 > buf.capacity) {
        u32 new_cap = buf.capacity * 2;
        while (buf.size_ + len + 1 > new_cap) new_cap *= 2;
        buf.resize(new_cap);
    }
    memcpy(&buf.data_[buf.size_], text, len);
    buf.size_ += len;
    buf.data_[buf.size_] = 0;
}

public fn void Buf.add_line(Buf* buf, const char* text) {
    assert(text);
    const char* end = text;
    while (*end) {
        if (*end == '\n' || *end == '\r') break;
        end++;
        if ((end - text) >= 256) break;
    }
    u32 len = cast<u32>(end - text);
    buf.add2(text, len);
}

public fn void Buf.newline(Buf* buf) {
    if (buf.size_ + 2 > buf.capacity) {
        u32 new_cap = buf.capacity * 2;
        while (buf.size_ + 2 > new_cap) new_cap *= 2;
        buf.resize(new_cap);
    }
    buf.data_[buf.size_] = '\n';
    buf.size_ += 1;
    buf.data_[buf.size_] = 0;
}

public fn void Buf.space(Buf* buf) { buf.add1(' '); }

public fn void Buf.lparen(Buf* buf) { buf.add1('('); }

public fn void Buf.rparen(Buf* buf) { buf.add1(')'); }

public fn void Buf.print(Buf* buf, const char* format @(printf_format), ...) {
    char[4096] tmp;
    // NOTE: no growing
    Va_list args;
    va_start(args, format);
    i32 len = vsnprintf(tmp, sizeof(tmp), format, args);
    assert(len < sizeof(tmp));
    buf.add2(tmp, cast<u32>(len));
    va_end(args);
}

public fn void Buf.indent(Buf* buf, u32 indent) {
    if (indent == 0) return;

    indent *= buf.indent_step;
    if (buf.size_ + indent + 1 > buf.capacity) {
        buf.resize(buf.capacity * 2);
    }

    char* cur = buf.data_ + buf.size_;
    memset(cur, ' ', indent);
    cur[indent] = 0;
    buf.size_ += indent;
}

public fn bool Buf.endsWith(const Buf* buf, char c) {
    if (buf.size_ && buf.data_[buf.size_-1] == c) return true;
    return false;
}

fn void Buf.resize(Buf* buf, u32 capacity) {
    assert(buf.own);
    buf.capacity = capacity;
    //if ((len + 1) >= (newcap - buf.size_)) newcap += buf.size_ + len + 1;
    char* data2 = malloc(buf.capacity);
    memcpy(data2, buf.data_, buf.size_);
    free(buf.data_);
    buf.data_ = data2;
}

public fn void Buf.stripNewline(Buf* buf) {
    if (buf.size_ == 0) return;
    if (buf.data_[buf.size_ -1] == '\n') {
        buf.data_[buf.size_ -1] = 0;
        buf.size_--;
    }
}

