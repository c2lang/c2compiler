121c121
< extern int* __errno_location(void);
---
> extern int* __error(void);
168c168
<    int64_t d_off;
---
>    uint64_t d_seekoff;
170a171,173
>    uint8_t d_pad0;
>    uint16_t d_namlen;
>    uint16_t d_pad1;
186,187c189,190
< #define O_CREAT 0100
< #define O_TRUNC 01000
---
> #define O_CREAT 01000
> #define O_TRUNC 02000
218c221
< extern FILE* stdout;
---
> extern FILE* __stdoutp;
220c223
< extern FILE* stderr;
---
> extern FILE* __stderrp;
299a303,307
> struct timespec {
>    int64_t tv_sec;
>    int64_t tv_nsec;
> };
> 
304c312,313
<    uint32_t st_mode;
---
>    uint16_t st_mode;
>    uint16_t st_padding0;
306a316
>    int32_t st_padding1;
308,317c318,327
<    int64_t st_size;
<    int64_t st_blksize;
<    int64_t st_blocks;
<    int64_t st_atime;
<    int64_t st_atime_nsec;
<    int64_t st_mtime;
<    int64_t st_mtime_nsec;
<    int64_t st_ctime;
<    int64_t st_ctime_nsec;
<    int64_t reserved[3];
---
>    struct timespec st_atimespec;
>    struct timespec st_mtimespec;
>    struct timespec st_ctimespec;
>    struct timespec st_birthtimespec;
>    uint64_t st_size;
>    uint64_t st_blocks;
>    uint32_t st_blksize;
>    uint32_t st_flags;
>    uint64_t st_gen;
>    uint64_t st_lspare[10];
353c363
< #define NAME_LEN 65
---
> #define NAME_LEN 256
355,360c365,370
<    char sysname[65];
<    char nodename[65];
<    char release[65];
<    char version[65];
<    char machine[65];
<    char domainname[65];
---
>    char sysname[256];
>    char nodename[256];
>    char release[256];
>    char version[256];
>    char machine[256];
>    char domainname[256];
363c373,379
< int32_t uname(utsname* buf);
---
> int32_t __xuname(int32_t len, void* _arg1);
> static inline 
> int32_t uname(utsname* name)
> {
>    return __xuname(NAME_LEN, name);
> }
> 
2222c2238
<       fprintf(stderr, "%swarning: %s%s\n", color_Yellow, buf, color_Normal);
---
>       fprintf(__stderrp, "%swarning: %s%s\n", color_Yellow, buf, color_Normal);
2224c2240
<       fprintf(stderr, "warning: %s\n", buf);
---
>       fprintf(__stderrp, "warning: %s\n", buf);
2237c2253
<       fprintf(stderr, "%serror: %s%s\n", color_Red, buf, color_Normal);
---
>       fprintf(__stderrp, "%serror: %s%s\n", color_Red, buf, color_Normal);
2239c2255
<       fprintf(stderr, "error: %s\n", buf);
---
>       fprintf(__stderrp, "error: %s\n", buf);
2252c2268
<       fprintf(stderr, "%s%s: error: %s%s\n", color_Red, loc, buf, color_Normal);
---
>       fprintf(__stderrp, "%s%s: error: %s%s\n", color_Red, loc, buf, color_Normal);
2254c2270
<       fprintf(stderr, "%s: error: %s\n", loc, buf);
---
>       fprintf(__stderrp, "%s: error: %s\n", loc, buf);
2330c2346
<       file->error = (*__errno_location());
---
>       file->error = (*__error());
2335c2351
<       file->error = (*__errno_location());
---
>       file->error = (*__error());
2352c2368
<          file->error = (*__errno_location());
---
>          file->error = (*__error());
2422c2438
<       writer->error = (*__errno_location());
---
>       writer->error = (*__error());
2427c2443
<       writer->error = (*__errno_location());
---
>       writer->error = (*__error());
2457c2473
<    if ((fd == -1)) return (*__errno_location());
---
>    if ((fd == -1)) return (*__error());
2464c2480
<       if (chdir("/")) errno_ = (*__errno_location());
---
>       if (chdir("/")) errno_ = (*__error());
2476,2477c2492,2493
<          if ((((mkdir(tmp, 0777) && ((*__errno_location()) != EEXIST))) || chdir(tmp))) {
<             errno_ = (*__errno_location());
---
>          if ((((mkdir(tmp, 0777) && ((*__error()) != EEXIST))) || chdir(tmp))) {
>             errno_ = (*__error());
2481c2497
<          if ((mkdir(cp, 0777) && ((*__errno_location()) != EEXIST))) errno_ = (*__errno_location());
---
>          if ((mkdir(cp, 0777) && ((*__error()) != EEXIST))) errno_ = (*__error());
2696,2697c2712,2713
<       fprintf(stderr, "[exec] %s\n", msg);
<       fflush(stderr);
---
>       fprintf(__stderrp, "[exec] %s\n", msg);
>       fflush(__stderrp);
2707c2723
<       fprintf(stderr, "pipe() failed: %s\n", strerror((*__errno_location())));
---
>       fprintf(__stderrp, "pipe() failed: %s\n", strerror((*__error())));
2711c2727
<       fprintf(stderr, "fcncl(FD_CLOEXEC) failed: %s\n", strerror((*__errno_location())));
---
>       fprintf(__stderrp, "fcncl(FD_CLOEXEC) failed: %s\n", strerror((*__error())));
2718c2734
<       fprintf(stderr, "fork() failed: %s\n", strerror((*__errno_location())));
---
>       fprintf(__stderrp, "fork() failed: %s\n", strerror((*__error())));
2730c2746
<          process_utils_child_error(error_pipe[1], "cannot open output '%s': %s", filename, strerror((*__errno_location())));
---
>          process_utils_child_error(error_pipe[1], "cannot open output '%s': %s", filename, strerror((*__error())));
2733c2749
<          if (((*__errno_location()) != EINTR)) process_utils_child_error(error_pipe[1], "dup2(): %s", strerror((*__errno_location())));
---
>          if (((*__error()) != EINTR)) process_utils_child_error(error_pipe[1], "dup2(): %s", strerror((*__error())));
2740c2756
<             process_utils_child_error(error_pipe[1], "cannot change to dir '%s': %s", path, strerror((*__errno_location())));
---
>             process_utils_child_error(error_pipe[1], "cannot change to dir '%s': %s", path, strerror((*__error())));
2757c2773
<       fflush(stdout);
---
>       fflush(__stdoutp);
2759,2760c2775,2776
<       int32_t lasterr = (*__errno_location());
<       fprintf(stderr, "failed to start %s: %s\n", cmd, strerror(lasterr));
---
>       int32_t lasterr = (*__error());
>       fprintf(__stderrp, "failed to start %s: %s\n", cmd, strerror(lasterr));
2769c2785
<          fprintf(stderr, "Error reading pipe\n");
---
>          fprintf(__stderrp, "Error reading pipe\n");
2781c2797
<          fprintf(stderr, "Error waiting for pid: %s\n", strerror((*__errno_location())));
---
>          fprintf(__stderrp, "Error waiting for pid: %s\n", strerror((*__error())));
2838c2854
<       fprintf(stderr, "pipe() failed: %s\n", strerror((*__errno_location())));
---
>       fprintf(__stderrp, "pipe() failed: %s\n", strerror((*__error())));
2842c2858
<       fprintf(stderr, "fcncl(FD_CLOEXEC) failed: %s\n", strerror((*__errno_location())));
---
>       fprintf(__stderrp, "fcncl(FD_CLOEXEC) failed: %s\n", strerror((*__error())));
2849c2865
<       fprintf(stderr, "pipe() failed: %s\n", strerror((*__errno_location())));
---
>       fprintf(__stderrp, "pipe() failed: %s\n", strerror((*__error())));
2856c2872
<       fprintf(stderr, "fork() failed: %s\n", strerror((*__errno_location())));
---
>       fprintf(__stderrp, "fork() failed: %s\n", strerror((*__error())));
2867c2883
<          if (((*__errno_location()) != EINTR)) process_utils_child_error(error_pipe[1], "dup(): %s", strerror((*__errno_location())));
---
>          if (((*__error()) != EINTR)) process_utils_child_error(error_pipe[1], "dup(): %s", strerror((*__error())));
2871c2887
<          if (((*__errno_location()) != EINTR)) process_utils_child_error(error_pipe[1], "dup2(): %s", strerror((*__errno_location())));
---
>          if (((*__error()) != EINTR)) process_utils_child_error(error_pipe[1], "dup2(): %s", strerror((*__error())));
2875c2891
<             process_utils_child_error(error_pipe[1], "cannot change to dir '%s': %s", path, strerror((*__errno_location())));
---
>             process_utils_child_error(error_pipe[1], "cannot change to dir '%s': %s", path, strerror((*__error())));
2891,2892c2907,2908
<       int32_t lasterr = (*__errno_location());
<       fprintf(stderr, "failed to start %s: %s\n", cmd, strerror(lasterr));
---
>       int32_t lasterr = (*__error());
>       fprintf(__stderrp, "failed to start %s: %s\n", cmd, strerror(lasterr));
2902c2918
<          fprintf(stderr, "Error reading pipe\n");
---
>          fprintf(__stderrp, "Error reading pipe\n");
2917c2933
<          fprintf(stderr, "Error waiting for pid: %s\n", strerror((*__errno_location())));
---
>          fprintf(__stderrp, "Error waiting for pid: %s\n", strerror((*__error())));
2931c2947
<             fprintf(stderr, "error reading process output\n");
---
>             fprintf(__stderrp, "error reading process output\n");
2944c2960
<          fprintf(stderr, "child exited ABNORMALLY\n");
---
>          fprintf(__stderrp, "child exited ABNORMALLY\n");
3174c3190
<          fprintf(stderr, "%s: %serror:%s cannot open %s: %s\n", source_mgr_SourceMgr_loc2str(sm, loc), color_Red, color_Normal, filename, file_utils_Reader_getError(&file));
---
>          fprintf(__stderrp, "%s: %serror:%s cannot open %s: %s\n", source_mgr_SourceMgr_loc2str(sm, loc), color_Red, color_Normal, filename, file_utils_Reader_getError(&file));
3176c3192
<          fprintf(stderr, "%serror%s: cannot open %s: %s\n", color_Red, color_Normal, filename, file_utils_Reader_getError(&file));
---
>          fprintf(__stderrp, "%serror%s: cannot open %s: %s\n", color_Red, color_Normal, filename, file_utils_Reader_getError(&file));
3230c3246
<          fprintf(stderr, "%serror%s: too many files open\n", color_Red, color_Normal);
---
>          fprintf(__stderrp, "%serror%s: too many files open\n", color_Red, color_Normal);
3276c3292
<          fprintf(stderr, "%serror%s: too many files open\n", color_Red, color_Normal);
---
>          fprintf(__stderrp, "%serror%s: too many files open\n", color_Red, color_Normal);
3723c3739
<          if (((*__errno_location()) != ENOENT)) {
---
>          if (((*__error()) != ENOENT)) {
3917c3933
<          fprintf(stderr, "[build-file] warning: environment variable '%s' not set!\n", (raw + 1));
---
>          fprintf(__stderrp, "[build-file] warning: environment variable '%s' not set!\n", (raw + 1));
3964c3980
<             fprintf(stderr, "[build-file] missing options for %s\n", name);
---
>             fprintf(__stderrp, "[build-file] missing options for %s\n", name);
3982c3998
<       fprintf(stderr, "Error: %s\n", yaml_Parser_getMessage(parser));
---
>       fprintf(__stderrp, "Error: %s\n", yaml_Parser_getMessage(parser));
4319c4335
<       console_error("error getting system info: %s", strerror((*__errno_location())));
---
>       console_error("error getting system info: %s", strerror((*__error())));
16930c16946
<    fputs(string_buffer_Buf_data(out), stdout);
---
>    fputs(string_buffer_Buf_data(out), __stdoutp);
17728c17744
<    fputs(string_buffer_Buf_data(out), stderr);
---
>    fputs(string_buffer_Buf_data(out), __stderrp);
17759c17775
<       fputs(string_buffer_Buf_data(out), stderr);
---
>       fputs(string_buffer_Buf_data(out), __stderrp);
19717c19733
<       fprintf(stderr, "%s: %serror:%s %s\n", source_mgr_SourceMgr_loc2str(p->sm, p->token.loc), color_Red, color_Normal, msg);
---
>       fprintf(__stderrp, "%s: %serror:%s %s\n", source_mgr_SourceMgr_loc2str(p->sm, p->token.loc), color_Red, color_Normal, msg);
19719c19735
<       fprintf(stderr, "%s: error: %s\n", source_mgr_SourceMgr_loc2str(p->sm, p->token.loc), msg);
---
>       fprintf(__stderrp, "%s: error: %s\n", source_mgr_SourceMgr_loc2str(p->sm, p->token.loc), msg);
30437c30453
<       fprintf(stderr, "error: missing node %s\n", path);
---
>       fprintf(__stderrp, "error: missing node %s\n", path);
30462c30478
<          fprintf(stderr, "error in manifest: invalid library kind '%s'\n", kind);
---
>          fprintf(__stderrp, "error in manifest: invalid library kind '%s'\n", kind);
30468c30484
<       fprintf(stderr, "error in manifest: a library must be dynamic and/or static\n");
---
>       fprintf(__stderrp, "error in manifest: a library must be dynamic and/or static\n");
30617c30633
<          console_warn("cannot read '%s': %s", path, strerror((*__errno_location())));
---
>          console_warn("cannot read '%s': %s", path, strerror((*__error())));
32044a32061
>    make = "gmake";
34352a34370
>    make = "gmake";
36221c36239
<    fputs(string_buffer_Buf_data(out), stdout);
---
>    fputs(string_buffer_Buf_data(out), __stdoutp);
45332c45350
<       console_error("cannot open library dir '%s': %s", dirname, strerror((*__errno_location())));
---
>       console_error("cannot open library dir '%s': %s", dirname, strerror((*__error())));
45730c45748
<          console_error("c2c: cannot chdir to %s: %s", c->opts.other_dir, strerror((*__errno_location())));
---
>          console_error("c2c: cannot chdir to %s: %s", c->opts.other_dir, strerror((*__error())));
