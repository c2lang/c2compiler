132c132
< int32_t* __errno_location(void);
---
> int32_t* __error(void);
174c174
<    int64_t d_off;
---
>    uint64_t d_seekoff;
175a176
>    uint16_t d_namlen;
177c178
<    char d_name[256];
---
>    char d_name[1024];
191,197c192,198
< #define O_CREAT 0100
< #define O_NOCTTY 0400
< #define O_TRUNC 01000
< #define O_NONBLOCK 04000
< #define O_DIRECTORY 0200000
< #define O_NOFOLLOW 0400000
< #define AT_FDCWD -100
---
> #define O_NONBLOCK 04
> #define O_NOFOLLOW 0400
> #define O_CREAT 01000
> #define O_TRUNC 02000
> #define O_NOCTTY 0400000
> #define O_DIRECTORY 04000000
> #define AT_FDCWD -2
220c221,222
< extern FILE* stdout;
---
> #define stdout __stdoutp
> extern FILE* __stdoutp;
222c224,225
< extern FILE* stderr;
---
> #define stderr __stderrp
> extern FILE* __stderrp;
297a301,305
> struct timespec {
>    int64_t tv_sec;
>    int64_t tv_nsec;
> };
> 
299c307,309
<    uint64_t st_dev;
---
>    int32_t st_dev;
>    uint16_t st_mode;
>    uint16_t st_nlink;
301,302d310
<    uint64_t st_nlink;
<    uint32_t st_mode;
305,317c313,324
<    uint64_t st_rdev;
<    int64_t st_size;
<    int64_t st_blksize;
<    int64_t st_blocks;
<    int64_t st_atime;
<    uint64_t st_atime_nsec;
<    uint64_t st_mtime;
<    uint64_t st_mtime_nsec;
<    uint64_t st_ctime;
<    uint64_t st_ctime_nsec;
<    uint32_t __unused4;
<    uint32_t __unused5;
<    int64_t reserved[2];
---
>    uint32_t st_rdev;
>    struct timespec st_atimespec;
>    struct timespec st_mtimespec;
>    struct timespec st_ctimespec;
>    struct timespec st_birthtimespec;
>    uint64_t st_size;
>    uint64_t st_blocks;
>    uint32_t st_blksize;
>    uint32_t st_flags;
>    uint32_t st_gen;
>    int32_t st_lspare;
>    int64_t st_qspare[2];
335c342
< typedef int64_t suseconds_t;
---
> typedef int32_t suseconds_t;
353c360
< #define NAME_LEN 65
---
> #define NAME_LEN 256
355,360c362,367
<    char sysname[65];
<    char nodename[65];
<    char release[65];
<    char version[65];
<    char machine[65];
<    char domainname[65];
---
>    char sysname[256];
>    char nodename[256];
>    char release[256];
>    char version[256];
>    char machine[256];
>    char domainname[256];
450c457
<       file->errno = *__errno_location();
---
>       file->errno = *__error();
456c463
<       file->errno = *__errno_location();
---
>       file->errno = *__error();
523c530
<    if ((err && (*__errno_location() != EEXIST))) return -1;
---
>    if ((err && (*__error() != EEXIST))) return -1;
528c535
<    if ((fd == -1)) return *__errno_location();
---
>    if ((fd == -1)) return *__error();
540c547
<    if ((fd == -1)) return *__errno_location();
---
>    if ((fd == -1)) return *__error();
561c568
<    if (err) errno_ = *__errno_location();
---
>    if (err) errno_ = *__error();
578c585
<       sprintf(writer->msg, "error opening %s: %s", filename, strerror(*__errno_location()));
---
>       sprintf(writer->msg, "error opening %s: %s", filename, strerror(*__error()));
583c590
<       sprintf(writer->msg, "error writing %s: %s", filename, strerror(*__errno_location()));
---
>       sprintf(writer->msg, "error writing %s: %s", filename, strerror(*__error()));
1932,1933c1939,1940
<    fprintf(stderr, "[exec] %s\n", msg);
<    fflush(stderr);
---
>    fprintf(__stderrp, "[exec] %s\n", msg);
>    fflush(__stderrp);
1941c1948
<       fprintf(stderr, "pipe() failed: %s\n", strerror(*__errno_location()));
---
>       fprintf(__stderrp, "pipe() failed: %s\n", strerror(*__error()));
1945c1952
<       fprintf(stderr, "fcncl(FD_CLOEXEC() failed: %s\n", strerror(*__errno_location()));
---
>       fprintf(__stderrp, "fcncl(FD_CLOEXEC() failed: %s\n", strerror(*__error()));
1949c1956
<       fprintf(stderr, "fcncl(FD_CLOEXEC) failed: %s\n", strerror(*__errno_location()));
---
>       fprintf(__stderrp, "fcncl(FD_CLOEXEC) failed: %s\n", strerror(*__error()));
1960c1967
<       fflush(stdout);
---
>       fflush(__stdoutp);
1964c1971
<          sprintf(errmsg, "cannot open output '%s': %s", output, strerror(*__errno_location()));
---
>          sprintf(errmsg, "cannot open output '%s': %s", output, strerror(*__error()));
1969c1976
<          sprintf(errmsg, "dup(): %s", strerror(*__errno_location()));
---
>          sprintf(errmsg, "dup(): %s", strerror(*__error()));
1974c1981
<          sprintf(errmsg, "cannot change to dir '%s': %s", path, strerror(*__errno_location()));
---
>          sprintf(errmsg, "cannot change to dir '%s': %s", path, strerror(*__error()));
1984,1985c1991,1992
<       int32_t lasterr = *__errno_location();
<       fprintf(stderr, "failed to start %s: %s\n", cmd, strerror(lasterr));
---
>       int32_t lasterr = *__error();
>       fprintf(__stderrp, "failed to start %s: %s\n", cmd, strerror(lasterr));
1996c2003
<          fprintf(stderr, "Error reading pipe\n");
---
>          fprintf(__stderrp, "Error reading pipe\n");
2006c2013
<          fprintf(stderr, "Error waiting for pid: %s\n", strerror(*__errno_location()));
---
>          fprintf(__stderrp, "Error waiting for pid: %s\n", strerror(*__error()));
2065c2072
<       fprintf(stderr, "pipe() failed: %s\n", strerror(*__errno_location()));
---
>       fprintf(__stderrp, "pipe() failed: %s\n", strerror(*__error()));
2069c2076
<       fprintf(stderr, "fcncl(FD_CLOEXEC() failed: %s\n", strerror(*__errno_location()));
---
>       fprintf(__stderrp, "fcncl(FD_CLOEXEC() failed: %s\n", strerror(*__error()));
2073c2080
<       fprintf(stderr, "fcncl(FD_CLOEXEC) failed: %s\n", strerror(*__errno_location()));
---
>       fprintf(__stderrp, "fcncl(FD_CLOEXEC) failed: %s\n", strerror(*__error()));
2084c2091
<       fflush(stdout);
---
>       fflush(__stdoutp);
2088c2095
<          sprintf(errmsg, "cannot open output '%s': %s", output, strerror(*__errno_location()));
---
>          sprintf(errmsg, "cannot open output '%s': %s", output, strerror(*__error()));
2093c2100
<          sprintf(errmsg, "dup(): %s", strerror(*__errno_location()));
---
>          sprintf(errmsg, "dup(): %s", strerror(*__error()));
2098c2105
<          sprintf(errmsg, "cannot change to dir '%s': %s", path, strerror(*__errno_location()));
---
>          sprintf(errmsg, "cannot change to dir '%s': %s", path, strerror(*__error()));
2111,2112c2118,2119
<       int32_t lasterr = *__errno_location();
<       fprintf(stderr, "failed to start %s: %s\n", cmd, strerror(lasterr));
---
>       int32_t lasterr = *__error();
>       fprintf(__stderrp, "failed to start %s: %s\n", cmd, strerror(lasterr));
2123c2130
<          fprintf(stderr, "Error reading pipe\n");
---
>          fprintf(__stderrp, "Error reading pipe\n");
2133c2140
<          fprintf(stderr, "Error waiting for pid: %s\n", strerror(*__errno_location()));
---
>          fprintf(__stderrp, "Error waiting for pid: %s\n", strerror(*__error()));
2325c2332
<          if ((*__errno_location() != ENOENT)) {
---
>          if ((*__error() != ENOENT)) {
3263c3270
<       fprintf(stderr, "%swarning: %s%s\n", color_Yellow, buf, color_Normal);
---
>       fprintf(__stderrp, "%swarning: %s%s\n", color_Yellow, buf, color_Normal);
3265c3272
<       fprintf(stderr, "warning: %s\n", buf);
---
>       fprintf(__stderrp, "warning: %s\n", buf);
3278c3285
<       fprintf(stderr, "%serror: %s%s\n", color_Red, buf, color_Normal);
---
>       fprintf(__stderrp, "%serror: %s%s\n", color_Red, buf, color_Normal);
3280c3287
<       fprintf(stderr, "error: %s\n", buf);
---
>       fprintf(__stderrp, "error: %s\n", buf);
3517c3524
<          fprintf(stderr, "%s: %serror:%s %s\n", source_mgr_SourceMgr_loc2str(sm, loc), color_Red, color_Normal, error_msg);
---
>          fprintf(__stderrp, "%s: %serror:%s %s\n", source_mgr_SourceMgr_loc2str(sm, loc), color_Red, color_Normal, error_msg);
3519c3526
<          fprintf(stderr, "%serror%s: %s\n", color_Red, color_Normal, error_msg);
---
>          fprintf(__stderrp, "%serror%s: %s\n", color_Red, color_Normal, error_msg);
3572c3579
<          fprintf(stderr, "%serror%s: too many files open\n", color_Red, color_Normal);
---
>          fprintf(__stderrp, "%serror%s: too many files open\n", color_Red, color_Normal);
3616c3623
<          fprintf(stderr, "%serror%s: too many files open\n", color_Red, color_Normal);
---
>          fprintf(__stderrp, "%serror%s: too many files open\n", color_Red, color_Normal);
3968c3975
<       console_error("error getting system info: %s", strerror(*__errno_location()));
---
>       console_error("error getting system info: %s", strerror(*__error()));
4927c4934
<          fprintf(stderr, "[build-file] warning: environment variable '%s' not set!\n", (raw + 1));
---
>          fprintf(__stderrp, "[build-file] warning: environment variable '%s' not set!\n", (raw + 1));
4974c4981
<             fprintf(stderr, "[build-file] missing options for %s\n", name);
---
>             fprintf(__stderrp, "[build-file] missing options for %s\n", name);
4991c4998
<       fprintf(stderr, "Error: %s\n", yaml_Parser_getMessage(parser));
---
>       fprintf(__stderrp, "Error: %s\n", yaml_Parser_getMessage(parser));
5620c5627
<    fprintf(stderr, "%s\n", string_buffer_Buf_data(out));
---
>    fprintf(__stderrp, "%s\n", string_buffer_Buf_data(out));
5651c5658
<       fputs(string_buffer_Buf_data(out), stderr);
---
>       fputs(string_buffer_Buf_data(out), __stderrp);
19369c19376
<       fprintf(stderr, "%s: %serror:%s %s\n", source_mgr_SourceMgr_loc2str(p->sm, p->token.loc), color_Red, color_Normal, msg);
---
>       fprintf(__stderrp, "%s: %serror:%s %s\n", source_mgr_SourceMgr_loc2str(p->sm, p->token.loc), color_Red, color_Normal, msg);
19371c19378
<       fprintf(stderr, "%s: error: %s\n", source_mgr_SourceMgr_loc2str(p->sm, p->token.loc), msg);
---
>       fprintf(__stderrp, "%s: error: %s\n", source_mgr_SourceMgr_loc2str(p->sm, p->token.loc), msg);
31582c31589
<       fprintf(stderr, "error: missing node %s\n", path);
---
>       fprintf(__stderrp, "error: missing node %s\n", path);
31606c31613
<             fprintf(stderr, "error in manifest: invalid library kind '%s'\n", kind);
---
>             fprintf(__stderrp, "error in manifest: invalid library kind '%s'\n", kind);
31613c31620
<       fprintf(stderr, "error in manifest: a library must be dynamic and/or static\n");
---
>       fprintf(__stderrp, "error in manifest: a library must be dynamic and/or static\n");
31677c31684
< static const char* plugin_mgr_lib_ext = ".so";
---
> static const char* plugin_mgr_lib_ext = ".dylib";
31755c31762
<          console_warn("cannot read '%s': %s", path, strerror(*__errno_location()));
---
>          console_warn("cannot read '%s': %s", path, strerror(*__error()));
36890c36897
<       console_error("cannot open library dir '%s': %s", dirname, strerror(*__errno_location()));
---
>       console_error("cannot open library dir '%s': %s", dirname, strerror(*__error()));
37252c37259
<          console_error("cannot chdir to %s: %s", opts.other_dir, strerror(*__errno_location()));
---
>          console_error("cannot chdir to %s: %s", opts.other_dir, strerror(*__error()));
