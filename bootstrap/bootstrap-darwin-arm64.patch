103c103
< int32_t* __errno_location(void);
---
> int32_t* __error(void);
145c145
<    int64_t d_off;
---
>    uint64_t d_seekoff;
146a147
>    uint16_t d_namlen;
148c149
<    char d_name[256];
---
>    char d_name[1024];
162,167c163,168
< #define O_CREAT 0100
< #define O_NOCTTY 0400
< #define O_TRUNC 01000
< #define O_NONBLOCK 04000
< #define O_DIRECTORY 0200000
< #define O_NOFOLLOW 0400000
---
> #define O_CREAT 01000
> #define O_NOCTTY 0400000
> #define O_TRUNC 02000
> #define O_NONBLOCK 04
> #define O_DIRECTORY 04000000
> #define O_NOFOLLOW 0400
169c170
< #define AT_FDCWD -100
---
> #define AT_FDCWD -2
191c192
< extern FILE* stdout;
---
> extern FILE* __stdoutp;
193c194
< extern FILE* stderr;
---
> extern FILE* __stderrp;
268a270,274
> struct timespec {
>    int64_t tv_sec;
>    int64_t tv_nsec;
> };
> 
270c276,278
<    uint64_t st_dev;
---
>    int32_t st_dev;
>    uint16_t st_mode;
>    uint16_t st_nlink;
272,273d279
<    uint64_t st_nlink;
<    uint32_t st_mode;
276,288c282,293
<    uint64_t st_rdev;
<    int64_t st_size;
<    int64_t st_blksize;
<    int64_t st_blocks;
<    int64_t st_atime;
<    uint64_t st_atime_nsec;
<    uint64_t st_mtime;
<    uint64_t st_mtime_nsec;
<    uint64_t st_ctime;
<    uint64_t st_ctime_nsec;
<    uint32_t __unused4;
<    uint32_t __unused5;
<    int64_t reserved[2];
---
>    uint32_t st_rdev;
>    struct timespec st_atimespec;
>    struct timespec st_mtimespec;
>    struct timespec st_ctimespec;
>    struct timespec st_birthtimespec;
>    uint64_t st_size;
>    uint64_t st_blocks;
>    uint32_t st_blksize;
>    uint32_t st_flags;
>    uint32_t st_gen;
>    int32_t st_lspare;
>    int64_t st_qspare[2];
324c329
< #define NAME_LEN 65
---
> #define NAME_LEN 256
326,331c331,336
<    char sysname[65];
<    char nodename[65];
<    char release[65];
<    char version[65];
<    char machine[65];
<    char domainname[65];
---
>    char sysname[256];
>    char nodename[256];
>    char release[256];
>    char version[256];
>    char machine[256];
>    char domainname[256];
421c426
<       file->errno = *__errno_location();
---
>       file->errno = *__error();
427c432
<       file->errno = *__errno_location();
---
>       file->errno = *__error();
494c499
<    if ((err && (*__errno_location() != EEXIST))) return -1;
---
>    if ((err && (*__error() != EEXIST))) return -1;
499c504
<    if ((fd == -1)) return *__errno_location();
---
>    if ((fd == -1)) return *__error();
511c516
<    if ((fd == -1)) return *__errno_location();
---
>    if ((fd == -1)) return *__error();
532c537
<    if (err) errno_ = *__errno_location();
---
>    if (err) errno_ = *__error();
549c554
<       sprintf(writer->msg, "error opening %s: %s", filename, strerror(*__errno_location()));
---
>       sprintf(writer->msg, "error opening %s: %s", filename, strerror(*__error()));
554c559
<       sprintf(writer->msg, "error writing %s: %s", filename, strerror(*__errno_location()));
---
>       sprintf(writer->msg, "error writing %s: %s", filename, strerror(*__error()));
1903,1904c1908,1909
<    fprintf(stderr, "[exec] %s\n", msg);
<    fflush(stderr);
---
>    fprintf(__stderrp, "[exec] %s\n", msg);
>    fflush(__stderrp);
1912c1917
<       fprintf(stderr, "pipe() failed: %s\n", strerror(*__errno_location()));
---
>       fprintf(__stderrp, "pipe() failed: %s\n", strerror(*__error()));
1916c1921
<       fprintf(stderr, "fcncl(FD_CLOEXEC() failed: %s\n", strerror(*__errno_location()));
---
>       fprintf(__stderrp, "fcncl(FD_CLOEXEC() failed: %s\n", strerror(*__error()));
1920c1925
<       fprintf(stderr, "fcncl(FD_CLOEXEC) failed: %s\n", strerror(*__errno_location()));
---
>       fprintf(__stderrp, "fcncl(FD_CLOEXEC) failed: %s\n", strerror(*__error()));
1931c1936
<       fflush(stdout);
---
>       fflush(__stdoutp);
1935c1940
<          sprintf(errmsg, "cannot open output '%s': %s", output, strerror(*__errno_location()));
---
>          sprintf(errmsg, "cannot open output '%s': %s", output, strerror(*__error()));
1940c1945
<          sprintf(errmsg, "dup(): %s", strerror(*__errno_location()));
---
>          sprintf(errmsg, "dup(): %s", strerror(*__error()));
1945c1950
<          sprintf(errmsg, "cannot change to dir '%s': %s", path, strerror(*__errno_location()));
---
>          sprintf(errmsg, "cannot change to dir '%s': %s", path, strerror(*__error()));
1955,1956c1960,1961
<       int32_t lasterr = *__errno_location();
<       fprintf(stderr, "failed to start %s: %s\n", cmd, strerror(lasterr));
---
>       int32_t lasterr = *__error();
>       fprintf(__stderrp, "failed to start %s: %s\n", cmd, strerror(lasterr));
1967c1972
<          fprintf(stderr, "Error reading pipe\n");
---
>          fprintf(__stderrp, "Error reading pipe\n");
1977c1982
<          fprintf(stderr, "Error waiting for pid: %s\n", strerror(*__errno_location()));
---
>          fprintf(__stderrp, "Error waiting for pid: %s\n", strerror(*__error()));
2036c2041
<       fprintf(stderr, "pipe() failed: %s\n", strerror(*__errno_location()));
---
>       fprintf(__stderrp, "pipe() failed: %s\n", strerror(*__error()));
2040c2045
<       fprintf(stderr, "fcncl(FD_CLOEXEC() failed: %s\n", strerror(*__errno_location()));
---
>       fprintf(__stderrp, "fcncl(FD_CLOEXEC() failed: %s\n", strerror(*__error()));
2044c2049
<       fprintf(stderr, "fcncl(FD_CLOEXEC) failed: %s\n", strerror(*__errno_location()));
---
>       fprintf(__stderrp, "fcncl(FD_CLOEXEC) failed: %s\n", strerror(*__error()));
2055c2060
<       fflush(stdout);
---
>       fflush(__stdoutp);
2059c2064
<          sprintf(errmsg, "cannot open output '%s': %s", output, strerror(*__errno_location()));
---
>          sprintf(errmsg, "cannot open output '%s': %s", output, strerror(*__error()));
2064c2069
<          sprintf(errmsg, "dup(): %s", strerror(*__errno_location()));
---
>          sprintf(errmsg, "dup(): %s", strerror(*__error()));
2069c2074
<          sprintf(errmsg, "cannot change to dir '%s': %s", path, strerror(*__errno_location()));
---
>          sprintf(errmsg, "cannot change to dir '%s': %s", path, strerror(*__error()));
2082,2083c2087,2088
<       int32_t lasterr = *__errno_location();
<       fprintf(stderr, "failed to start %s: %s\n", cmd, strerror(lasterr));
---
>       int32_t lasterr = *__error();
>       fprintf(__stderrp, "failed to start %s: %s\n", cmd, strerror(lasterr));
2094c2099
<          fprintf(stderr, "Error reading pipe\n");
---
>          fprintf(__stderrp, "Error reading pipe\n");
2104c2109
<          fprintf(stderr, "Error waiting for pid: %s\n", strerror(*__errno_location()));
---
>          fprintf(__stderrp, "Error waiting for pid: %s\n", strerror(*__error()));
2280c2285
<          if ((*__errno_location() != ENOENT)) {
---
>          if ((*__error() != ENOENT)) {
3212c3217
<       fprintf(stderr, "%swarning: %s%s\n", color_Yellow, buf, color_Normal);
---
>       fprintf(__stderrp, "%swarning: %s%s\n", color_Yellow, buf, color_Normal);
3214c3219
<       fprintf(stderr, "warning: %s\n", buf);
---
>       fprintf(__stderrp, "warning: %s\n", buf);
3227c3232
<       fprintf(stderr, "%serror: %s%s\n", color_Red, buf, color_Normal);
---
>       fprintf(__stderrp, "%serror: %s%s\n", color_Red, buf, color_Normal);
3229c3234
<       fprintf(stderr, "error: %s\n", buf);
---
>       fprintf(__stderrp, "error: %s\n", buf);
3465c3470
<          fprintf(stderr, "%s: %serror:%s %s\n", source_mgr_SourceMgr_loc2str(sm, loc), color_Red, color_Normal, error_msg);
---
>          fprintf(__stderrp, "%s: %serror:%s %s\n", source_mgr_SourceMgr_loc2str(sm, loc), color_Red, color_Normal, error_msg);
3467c3472
<          fprintf(stderr, "%serror%s: %s\n", color_Red, color_Normal, error_msg);
---
>          fprintf(__stderrp, "%serror%s: %s\n", color_Red, color_Normal, error_msg);
3520c3525
<          fprintf(stderr, "%serror%s: too many files open\n", color_Red, color_Normal);
---
>          fprintf(__stderrp, "%serror%s: too many files open\n", color_Red, color_Normal);
3564c3569
<          fprintf(stderr, "%serror%s: too many files open\n", color_Red, color_Normal);
---
>          fprintf(__stderrp, "%serror%s: too many files open\n", color_Red, color_Normal);
3918c3923
<       console_error("error getting system info: %s", strerror(*__errno_location()));
---
>       console_error("error getting system info: %s", strerror(*__error()));
4881c4886
<          fprintf(stderr, "[build-file] warning: environment variable '%s' not set!\n", (raw + 1));
---
>          fprintf(__stderrp, "[build-file] warning: environment variable '%s' not set!\n", (raw + 1));
4928c4933
<             fprintf(stderr, "[build-file] missing options for %s\n", name);
---
>             fprintf(__stderrp, "[build-file] missing options for %s\n", name);
4945c4950
<       fprintf(stderr, "Error: %s\n", yaml_Parser_getMessage(parser));
---
>       fprintf(__stderrp, "Error: %s\n", yaml_Parser_getMessage(parser));
5569c5574
<    fprintf(stderr, "%s\n", string_buffer_Buf_data(out));
---
>    fprintf(__stderrp, "%s\n", string_buffer_Buf_data(out));
5600c5605
<       fputs(string_buffer_Buf_data(out), stderr);
---
>       fputs(string_buffer_Buf_data(out), __stderrp);
19287c19292
<       fprintf(stderr, "%s: %serror:%s %s\n", source_mgr_SourceMgr_loc2str(p->sm, p->token.loc), color_Red, color_Normal, msg);
---
>       fprintf(__stderrp, "%s: %serror:%s %s\n", source_mgr_SourceMgr_loc2str(p->sm, p->token.loc), color_Red, color_Normal, msg);
19289c19294
<       fprintf(stderr, "%s: error: %s\n", source_mgr_SourceMgr_loc2str(p->sm, p->token.loc), msg);
---
>       fprintf(__stderrp, "%s: error: %s\n", source_mgr_SourceMgr_loc2str(p->sm, p->token.loc), msg);
31435c31440
<       fprintf(stderr, "error: missing node %s\n", path);
---
>       fprintf(__stderrp, "error: missing node %s\n", path);
31459c31464
<             fprintf(stderr, "error in manifest: invalid library kind '%s'\n", kind);
---
>             fprintf(__stderrp, "error in manifest: invalid library kind '%s'\n", kind);
31466c31471
<       fprintf(stderr, "error in manifest: a library must be dynamic and/or static\n");
---
>       fprintf(__stderrp, "error in manifest: a library must be dynamic and/or static\n");
31530c31535
< static const char* plugin_mgr_lib_ext = ".so";
---
> static const char* plugin_mgr_lib_ext = ".dylib";
31613c31618
<          console_warn("cannot read '%s': %s", path, strerror(*__errno_location()));
---
>          console_warn("cannot read '%s': %s", path, strerror(*__error()));
36711c36716
<       console_error("cannot open library dir '%s': %s", dirname, strerror(*__errno_location()));
---
>       console_error("cannot open library dir '%s': %s", dirname, strerror(*__error()));
37086c37091
<          console_error("cannot chdir to %s: %s", opts.other_dir, strerror(*__errno_location()));
---
>          console_error("cannot chdir to %s: %s", opts.other_dir, strerror(*__error()));
