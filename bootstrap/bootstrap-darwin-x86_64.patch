121c121
< extern int* __errno_location(void);
---
> extern int* __error(void);
168c168
<    int64_t d_off;
---
>    uint64_t d_seekoff;
169a170
>    uint16_t d_namlen;
171c172
<    char d_name[256];
---
>    char d_name[1024];
178c179
< dirent* readdir(DIR* dirp);
---
> dirent* readdir$INODE64(DIR* dirp);
186,188c187,189
< #define O_CREAT 0100
< #define O_TRUNC 01000
< #define AT_FDCWD -100
---
> #define O_CREAT 01000
> #define O_TRUNC 02000
> #define AT_FDCWD -2
218c219
< extern FILE* stdout;
---
> extern FILE* __stdoutp;
220c221
< extern FILE* stderr;
---
> extern FILE* __stderrp;
299a301,305
> struct timespec {
>    int64_t tv_sec;
>    int64_t tv_nsec;
> };
> 
301c307,309
<    uint64_t st_dev;
---
>    int32_t st_dev;
>    uint16_t st_mode;
>    uint16_t st_nlink;
303,304d310
<    uint64_t st_nlink;
<    uint32_t st_mode;
307,317c313,324
<    uint64_t st_rdev;
<    int64_t st_size;
<    int64_t st_blksize;
<    int64_t st_blocks;
<    int64_t st_atime;
<    int64_t st_atime_nsec;
<    int64_t st_mtime;
<    int64_t st_mtime_nsec;
<    int64_t st_ctime;
<    int64_t st_ctime_nsec;
<    int64_t reserved[3];
---
>    uint32_t st_rdev;
>    struct timespec st_atimespec;
>    struct timespec st_mtimespec;
>    struct timespec st_ctimespec;
>    struct timespec st_birthtimespec;
>    uint64_t st_size;
>    uint64_t st_blocks;
>    uint32_t st_blksize;
>    uint32_t st_flags;
>    uint32_t st_gen;
>    int32_t st_lspare;
>    int64_t st_qspare[2];
324,325c331,332
< int32_t fstat(int32_t fd, struct stat* buf);
< int32_t stat(const char* pathname, struct stat* buf);
---
> int32_t fstat64(int32_t fd, struct stat* buf);
> int32_t stat64(const char* pathname, struct stat* buf);
335c342
< typedef int64_t suseconds_t;
---
> typedef int32_t suseconds_t;
353c360
< #define NAME_LEN 65
---
> #define NAME_LEN 256
355,360c362,367
<    char sysname[65];
<    char nodename[65];
<    char release[65];
<    char version[65];
<    char machine[65];
<    char domainname[65];
---
>    char sysname[256];
>    char nodename[256];
>    char release[256];
>    char version[256];
>    char machine[256];
>    char domainname[256];
2222c2229
<       fprintf(stderr, "%swarning: %s%s\n", color_Yellow, buf, color_Normal);
---
>       fprintf(__stderrp, "%swarning: %s%s\n", color_Yellow, buf, color_Normal);
2224c2231
<       fprintf(stderr, "warning: %s\n", buf);
---
>       fprintf(__stderrp, "warning: %s\n", buf);
2237c2244
<       fprintf(stderr, "%serror: %s%s\n", color_Red, buf, color_Normal);
---
>       fprintf(__stderrp, "%serror: %s%s\n", color_Red, buf, color_Normal);
2239c2246
<       fprintf(stderr, "error: %s\n", buf);
---
>       fprintf(__stderrp, "error: %s\n", buf);
2252c2259
<       fprintf(stderr, "%s%s: error: %s%s\n", color_Red, loc, buf, color_Normal);
---
>       fprintf(__stderrp, "%s%s: error: %s%s\n", color_Red, loc, buf, color_Normal);
2254c2261
<       fprintf(stderr, "%s: error: %s\n", loc, buf);
---
>       fprintf(__stderrp, "%s: error: %s\n", loc, buf);
2330c2337
<       file->error = (*__errno_location());
---
>       file->error = (*__error());
2334,2335c2341,2342
<    if (fstat(fd, &statbuf)) {
<       file->error = (*__errno_location());
---
>    if (fstat64(fd, &statbuf)) {
>       file->error = (*__error());
2352c2359
<          file->error = (*__errno_location());
---
>          file->error = (*__error());
2422c2429
<       writer->error = (*__errno_location());
---
>       writer->error = (*__error());
2427c2434
<       writer->error = (*__errno_location());
---
>       writer->error = (*__error());
2457c2464
<    if ((fd == -1)) return (*__errno_location());
---
>    if ((fd == -1)) return (*__error());
2464c2471
<       if (chdir("/")) errno_ = (*__errno_location());
---
>       if (chdir("/")) errno_ = (*__error());
2476,2477c2483,2484
<          if ((((mkdir(tmp, 0777) && ((*__errno_location()) != EEXIST))) || chdir(tmp))) {
<             errno_ = (*__errno_location());
---
>          if ((((mkdir(tmp, 0777) && ((*__error()) != EEXIST))) || chdir(tmp))) {
>             errno_ = (*__error());
2481c2488
<          if ((mkdir(cp, 0777) && ((*__errno_location()) != EEXIST))) errno_ = (*__errno_location());
---
>          if ((mkdir(cp, 0777) && ((*__error()) != EEXIST))) errno_ = (*__error());
2493c2500
<    return ((stat(filename, &statbuf) == 0));
---
>    return ((stat64(filename, &statbuf) == 0));
2696,2697c2703,2704
<       fprintf(stderr, "[exec] %s\n", msg);
<       fflush(stderr);
---
>       fprintf(__stderrp, "[exec] %s\n", msg);
>       fflush(__stderrp);
2707c2714
<       fprintf(stderr, "pipe() failed: %s\n", strerror((*__errno_location())));
---
>       fprintf(__stderrp, "pipe() failed: %s\n", strerror((*__error())));
2711c2718
<       fprintf(stderr, "fcncl(FD_CLOEXEC) failed: %s\n", strerror((*__errno_location())));
---
>       fprintf(__stderrp, "fcncl(FD_CLOEXEC) failed: %s\n", strerror((*__error())));
2718c2725
<       fprintf(stderr, "fork() failed: %s\n", strerror((*__errno_location())));
---
>       fprintf(__stderrp, "fork() failed: %s\n", strerror((*__error())));
2730c2737
<          process_utils_child_error(error_pipe[1], "cannot open output '%s': %s", filename, strerror((*__errno_location())));
---
>          process_utils_child_error(error_pipe[1], "cannot open output '%s': %s", filename, strerror((*__error())));
2733c2740
<          if (((*__errno_location()) != EINTR)) process_utils_child_error(error_pipe[1], "dup2(): %s", strerror((*__errno_location())));
---
>          if (((*__error()) != EINTR)) process_utils_child_error(error_pipe[1], "dup2(): %s", strerror((*__error())));
2740c2747
<             process_utils_child_error(error_pipe[1], "cannot change to dir '%s': %s", path, strerror((*__errno_location())));
---
>             process_utils_child_error(error_pipe[1], "cannot change to dir '%s': %s", path, strerror((*__error())));
2757c2764
<       fflush(stdout);
---
>       fflush(__stdoutp);
2759,2760c2766,2767
<       int32_t lasterr = (*__errno_location());
<       fprintf(stderr, "failed to start %s: %s\n", cmd, strerror(lasterr));
---
>       int32_t lasterr = (*__error());
>       fprintf(__stderrp, "failed to start %s: %s\n", cmd, strerror(lasterr));
2769c2776
<          fprintf(stderr, "Error reading pipe\n");
---
>          fprintf(__stderrp, "Error reading pipe\n");
2781c2788
<          fprintf(stderr, "Error waiting for pid: %s\n", strerror((*__errno_location())));
---
>          fprintf(__stderrp, "Error waiting for pid: %s\n", strerror((*__error())));
2824c2831
<       if (((((size_t)(len3)) < size) && (stat(dest, &statbuf) == 0))) return dest;
---
>       if (((((size_t)(len3)) < size) && (stat64(dest, &statbuf) == 0))) return dest;
2838c2845
<       fprintf(stderr, "pipe() failed: %s\n", strerror((*__errno_location())));
---
>       fprintf(__stderrp, "pipe() failed: %s\n", strerror((*__error())));
2842c2849
<       fprintf(stderr, "fcncl(FD_CLOEXEC) failed: %s\n", strerror((*__errno_location())));
---
>       fprintf(__stderrp, "fcncl(FD_CLOEXEC) failed: %s\n", strerror((*__error())));
2849c2856
<       fprintf(stderr, "pipe() failed: %s\n", strerror((*__errno_location())));
---
>       fprintf(__stderrp, "pipe() failed: %s\n", strerror((*__error())));
2856c2863
<       fprintf(stderr, "fork() failed: %s\n", strerror((*__errno_location())));
---
>       fprintf(__stderrp, "fork() failed: %s\n", strerror((*__error())));
2867c2874
<          if (((*__errno_location()) != EINTR)) process_utils_child_error(error_pipe[1], "dup(): %s", strerror((*__errno_location())));
---
>          if (((*__error()) != EINTR)) process_utils_child_error(error_pipe[1], "dup(): %s", strerror((*__error())));
2871c2878
<          if (((*__errno_location()) != EINTR)) process_utils_child_error(error_pipe[1], "dup2(): %s", strerror((*__errno_location())));
---
>          if (((*__error()) != EINTR)) process_utils_child_error(error_pipe[1], "dup2(): %s", strerror((*__error())));
2875c2882
<             process_utils_child_error(error_pipe[1], "cannot change to dir '%s': %s", path, strerror((*__errno_location())));
---
>             process_utils_child_error(error_pipe[1], "cannot change to dir '%s': %s", path, strerror((*__error())));
2891,2892c2898,2899
<       int32_t lasterr = (*__errno_location());
<       fprintf(stderr, "failed to start %s: %s\n", cmd, strerror(lasterr));
---
>       int32_t lasterr = (*__error());
>       fprintf(__stderrp, "failed to start %s: %s\n", cmd, strerror(lasterr));
2902c2909
<          fprintf(stderr, "Error reading pipe\n");
---
>          fprintf(__stderrp, "Error reading pipe\n");
2917c2924
<          fprintf(stderr, "Error waiting for pid: %s\n", strerror((*__errno_location())));
---
>          fprintf(__stderrp, "Error waiting for pid: %s\n", strerror((*__error())));
2931c2938
<             fprintf(stderr, "error reading process output\n");
---
>             fprintf(__stderrp, "error reading process output\n");
2944c2951
<          fprintf(stderr, "child exited ABNORMALLY\n");
---
>          fprintf(__stderrp, "child exited ABNORMALLY\n");
3174c3181
<          fprintf(stderr, "%s: %serror:%s cannot open %s: %s\n", source_mgr_SourceMgr_loc2str(sm, loc), color_Red, color_Normal, filename, file_utils_Reader_getError(&file));
---
>          fprintf(__stderrp, "%s: %serror:%s cannot open %s: %s\n", source_mgr_SourceMgr_loc2str(sm, loc), color_Red, color_Normal, filename, file_utils_Reader_getError(&file));
3176c3183
<          fprintf(stderr, "%serror%s: cannot open %s: %s\n", color_Red, color_Normal, filename, file_utils_Reader_getError(&file));
---
>          fprintf(__stderrp, "%serror%s: cannot open %s: %s\n", color_Red, color_Normal, filename, file_utils_Reader_getError(&file));
3230c3237
<          fprintf(stderr, "%serror%s: too many files open\n", color_Red, color_Normal);
---
>          fprintf(__stderrp, "%serror%s: too many files open\n", color_Red, color_Normal);
3276c3283
<          fprintf(stderr, "%serror%s: too many files open\n", color_Red, color_Normal);
---
>          fprintf(__stderrp, "%serror%s: too many files open\n", color_Red, color_Normal);
3719c3726
<       int32_t error = stat(constants_recipe_name, &buf);
---
>       int32_t error = stat64(constants_recipe_name, &buf);
3723c3730
<          if (((*__errno_location()) != ENOENT)) {
---
>          if (((*__error()) != ENOENT)) {
3751c3758
<    int32_t error = stat(constants_buildfile_name, &buf);
---
>    int32_t error = stat64(constants_buildfile_name, &buf);
3917c3924
<          fprintf(stderr, "[build-file] warning: environment variable '%s' not set!\n", (raw + 1));
---
>          fprintf(__stderrp, "[build-file] warning: environment variable '%s' not set!\n", (raw + 1));
3964c3971
<             fprintf(stderr, "[build-file] missing options for %s\n", name);
---
>             fprintf(__stderrp, "[build-file] missing options for %s\n", name);
3982c3989
<       fprintf(stderr, "Error: %s\n", yaml_Parser_getMessage(parser));
---
>       fprintf(__stderrp, "Error: %s\n", yaml_Parser_getMessage(parser));
4319c4326
<       console_error("error getting system info: %s", strerror((*__errno_location())));
---
>       console_error("error getting system info: %s", strerror((*__error())));
16930c16937
<    fputs(string_buffer_Buf_data(out), stdout);
---
>    fputs(string_buffer_Buf_data(out), __stdoutp);
17728c17735
<    fputs(string_buffer_Buf_data(out), stderr);
---
>    fputs(string_buffer_Buf_data(out), __stderrp);
17759c17766
<       fputs(string_buffer_Buf_data(out), stderr);
---
>       fputs(string_buffer_Buf_data(out), __stderrp);
19717c19724
<       fprintf(stderr, "%s: %serror:%s %s\n", source_mgr_SourceMgr_loc2str(p->sm, p->token.loc), color_Red, color_Normal, msg);
---
>       fprintf(__stderrp, "%s: %serror:%s %s\n", source_mgr_SourceMgr_loc2str(p->sm, p->token.loc), color_Red, color_Normal, msg);
19719c19726
<       fprintf(stderr, "%s: error: %s\n", source_mgr_SourceMgr_loc2str(p->sm, p->token.loc), msg);
---
>       fprintf(__stderrp, "%s: error: %s\n", source_mgr_SourceMgr_loc2str(p->sm, p->token.loc), msg);
30437c30444
<       fprintf(stderr, "error: missing node %s\n", path);
---
>       fprintf(__stderrp, "error: missing node %s\n", path);
30462c30469
<          fprintf(stderr, "error in manifest: invalid library kind '%s'\n", kind);
---
>          fprintf(__stderrp, "error in manifest: invalid library kind '%s'\n", kind);
30468c30475
<       fprintf(stderr, "error in manifest: a library must be dynamic and/or static\n");
---
>       fprintf(__stderrp, "error in manifest: a library must be dynamic and/or static\n");
30533c30540
< static const char* plugin_mgr_lib_ext = ".so";
---
> static const char* plugin_mgr_lib_ext = ".dylib";
30617c30624
<          console_warn("cannot read '%s': %s", path, strerror((*__errno_location())));
---
>          console_warn("cannot read '%s': %s", path, strerror((*__error())));
30620c30627
<       dirent* entry = readdir(dir);
---
>       dirent* entry = readdir$INODE64(dir);
30625c30632
<          entry = readdir(dir);
---
>          entry = readdir$INODE64(dir);
36221c36228
<    fputs(string_buffer_Buf_data(out), stdout);
---
>    fputs(string_buffer_Buf_data(out), __stdoutp);
45260c45267
<       int32_t err = stat(fullpath, &statbuf);
---
>       int32_t err = stat64(fullpath, &statbuf);
45332c45339
<       console_error("cannot open library dir '%s': %s", dirname, strerror((*__errno_location())));
---
>       console_error("cannot open library dir '%s': %s", dirname, strerror((*__error())));
45338c45345
<       while ((entry = readdir(dir))) {
---
>       while ((entry = readdir$INODE64(dir))) {
45345c45352
<             int32_t err = stat(fullname, &statbuf);
---
>             int32_t err = stat64(fullname, &statbuf);
45730c45737
<          console_error("c2c: cannot chdir to %s: %s", c->opts.other_dir, strerror((*__errno_location())));
---
>          console_error("c2c: cannot chdir to %s: %s", c->opts.other_dir, strerror((*__error())));
