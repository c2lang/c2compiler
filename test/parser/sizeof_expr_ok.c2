// @warnings{no-unused}
module test;

type Handle i32;

type Foo struct {
  i32 a;
  i64 b;
  union {
     i32 c;
     f64 d;
  }
}

fn void test1() {
    Handle[2] hh;

    i32 a = sizeof(i32*);
    i32 b = sizeof(a);
    i32 c = sizeof(Handle);
    i32 d = sizeof(Handle*);
    i32 e = sizeof(hh);
    i32 f = sizeof(Foo);
    i32 g = sizeof(Foo.a);
    i32 h = sizeof(Foo.d);
    i32 i = sizeof(test.Foo);
    i32 j = sizeof(test.Foo.a);
    i32 k = sizeof(test.Foo.d);
}

type MyStruct struct {
    u8[16] def;
    u8* p;
    usize size;
}

MyStruct s;
MyStruct* sp = &s;

// Try various combinations that caused a crash with ma.scope == nil
static_assert(sizeof(char[8]), 8);
static_assert(sizeof(char*), sizeof(usize));
static_assert(sizeof(MyStruct), 16 + 2 * sizeof(usize));
static_assert(sizeof(MyStruct), sizeof(s.def) + sizeof(s.p) + sizeof(s.size));
static_assert(sizeof(MyStruct), sizeof(MyStruct) + sizeof(s) - sizeof(MyStruct));
static_assert(sizeof(MyStruct), sizeof(s));
static_assert(sizeof(MyStruct*), sizeof(usize));
static_assert(sizeof(MyStruct*), sizeof(sp));
static_assert(sizeof(sp), sizeof(MyStruct*));
static_assert(sizeof(sp), sizeof(sp));
static_assert(sizeof(const MyStruct[10]), sizeof(MyStruct) * 10);
static_assert(sizeof(MyStruct[10]), sizeof(MyStruct) * 10);
static_assert(sizeof(s), 32);
static_assert(sizeof(*&s), 32);
static_assert(sizeof(s), sizeof(s));
static_assert(sizeof(s), sizeof(MyStruct));
static_assert(sizeof(s), sizeof(MyStruct[1]));
static_assert(sizeof(MyStruct), sizeof(s));
static_assert(sizeof(MyStruct), sizeof(MyStruct));
static_assert(32, sizeof(MyStruct));
static_assert(sizeof(s.p), sizeof(usize));
static_assert(sizeof(s.def), 16);
static_assert(sizeof(*s.def), 1);
static_assert(sizeof(s.def[1]), 1);

i32[20] aa;

static_assert(sizeof(aa), 80);
static_assert(sizeof(aa[0]), 4);
static_assert(sizeof(*aa), 4);

i32 cond = 1;

static_assert(sizeof(cond), 4);
static_assert(sizeof(cond + cond), 4);

const char[] Error = "error";

static_assert(sizeof(Error), 6);
static_assert(sizeof(*Error), 1);
