// @recipe bin
    $warnings no-unused
    $backend c

// @file{file1}
module test;

import stdio local;

type State enum u8 { OFF, ON, OTHER }

State s0 = ON;

public fn i32 main() {
    State s1 = ON;
    if (s1 > OFF && s1 >= ON && s1 <= ON && s1 < OTHER && s1 == ON && s1 != OFF) s1 = OFF;
    printf("State s0 is %d\n", s0);
    printf("State s1 is %d\n", s1);
    return 0;
}

// @expect{atleast, cgen/build.c}

static test_State test_s0 = test_State_ON;

int32_t main(void)
{
    test_State s1 = test_State_ON;
    if (((((((s1 > test_State_OFF) && (s1 >= test_State_ON)) && (s1 <= test_State_ON)) && (s1 < test_State_OTHER)) && (s1 == test_State_ON)) && (s1 != test_State_OFF))) s1 = test_State_OFF;
    printf("State s0 is %u\n", test_s0);
    printf("State s1 is %u\n", s1);
    return 0;
}
