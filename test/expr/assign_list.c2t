// @recipe bin
    $warnings no-unused
    $backend c

// @file{file1}
module test;

import stdio local;

type Point struct {
    i32 x;
    i32 y;
}

Point p0;

fn void print_point(const char* name, Point p) {
    printf("%s={ %d, %d }\n", name, p.x, p.y);
}

fn Point new_point(i32 x, i32 y) {
    return { x, y }
}

public fn i32 main() {
    printf("p0={ %d, %d }\n", p0.x, p0.y);
    Point p1;
    p1 = { 3, 4 }
    printf("p1={ %d, %d }\n", p1.x, p1.y);
    print_point("p2", { 5, 6 });
    Point p3 = new_point(7, 8);
    print_point("p3", p3);
    print_point("p4", new_point(9, 10));
    return 0;
}

// @expect{atleast, cgen/build.c}

static test_Point test_new_point(int32_t x, int32_t y)
{
    return (test_Point){ x, y };
}

int32_t main(void)
{
    printf("p0={ %d, %d }\n", test_p0.x, test_p0.y);
    test_Point p1;
    p1 = (test_Point){ 3, 4 };
    printf("p1={ %d, %d }\n", p1.x, p1.y);
    test_print_point("p2", (test_Point){ 5, 6 });
    test_Point p3 = test_new_point(7, 8);
    test_print_point("p3", p3);
    test_print_point("p4", test_new_point(9, 10));
    return 0;
}
