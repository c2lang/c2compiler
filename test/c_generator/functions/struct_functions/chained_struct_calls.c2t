// @recipe bin
    $warnings no-unused
    $backend c

// @file{file1}
module test;

type A struct {
    i32 x;
}

fn u32 A.run(A* a) {
    return 10;
}

type B struct {
    A a;
}

fn A* B.getA(B* b) {
    return &b.a;
}

type C struct {
    B b;
}

fn B* C.getB(C* c) {
    return &c.b;
}

fn void test1() {
    C c;
    u32 n = c.getB().getA().run();
}

// @expect{atleast, cgen/build.c}
typedef struct test_A_ test_A;
typedef struct test_B_ test_B;
typedef struct test_C_ test_C;

struct test_A_ {
    int32_t x;
};

struct test_B_ {
  test_A a;
};

struct test_C_ {
  test_B b;
};

static uint32_t test_A_run(test_A* a);
static test_A* test_B_getA(test_B* b);
static test_B* test_C_getB(test_C* c);
static void test_test1(void);

static uint32_t test_A_run(test_A* a)
{
  return 10;
}

static test_A* test_B_getA(test_B* b)
{
  return &b->a;
}

static test_B* test_C_getB(test_C* c)
{
  return &c->b;
}

static void test_test1(void)
{
  test_C c = { 0 };
  uint32_t n = test_A_run(test_B_getA(test_C_getB(&c)));
}

