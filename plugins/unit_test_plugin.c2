/* Copyright 2022-2025 Bas van den Berg
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

module plugin_main;

import ast local;
import attr;
import console;
import plugin_info;
import string_buffer;
import utils;

import stdlib local;
import string;

public plugin_info.Plugin handle @(export) = {
    .load = load,
    .unload = unload,
    .init = plugin_init,
    .post_parse = generate_tests,
    .post_analysis = nil,
    .name = "UnitTest 1.0",
}

type Plugin struct {
    plugin_info.Info* info;
    u32 attr_name;
    u32 setup_name;
    u32 teardown_name;
    DeclList decls;
    u32 cur_prefix;

    FunctionDeclList tests;
    bool setup;
    bool teardown;
}

fn void* load(const char* options, bool show_timing, bool show_debug) {
    Plugin* p = calloc(1, sizeof(Plugin));
    p.decls.init();
    p.tests.init();

    console.init();
    console.setTiming(show_timing);
    console.setDebug(show_debug);

    return p;
}

fn void unload(void* arg) {
    Plugin* p = arg;
    p.decls.free();
    p.tests.free();
    free(arg);
}

fn void plugin_init(void* arg, plugin_info.Info* info) {
    Plugin* p = arg;
    p.info = info;
    p.decls.clear();
    ast.setGlobals(info.ast_globals);
    ast.builtins = info.ast_builtins;

    p.attr_name = info.astPool.addStr("unittest", true);
    info.registerAttr(p.attr_name, handle_attr, p);

    p.setup_name = info.astPool.addStr("setup", true);
    p.teardown_name = info.astPool.addStr("teardown", true);

    generate_types(p);
}

const char[] Content =
    "module c2test;\n\n"
    "import stdarg local;\n"
    "import string;\n\n"

    "public type TestFn fn void(void* t);\n\n"

    "public type C2Test struct {\n"
    "   const char* name;\n"
    "   TestFn func;\n"
    "}\n\n"

    "public type Group struct {\n"
    "   const char* name;\n"
    "   u32 fixture_size;\n"
    "   TestFn setup;\n"
    "   TestFn teardown;\n"
    "   u32 num_tests;\n"
    "   const C2Test* tests;\n"
    "}\n\n"

    // For c2test_main, not for tests themselves
    "public type ErrorFn fn void (const char* fmt @(printf_format), ...);\n"
    "public type LogFn fn void (const char* fmt, va_list args);\n\n"

    "public type Config struct {\n"
    "  ErrorFn on_error;\n"
    "  LogFn on_log;\n"
    "  \n"
    "  \n"
    "}\n\n"

    "Config g_cfg;\n\n"

    "public fn void init(const Config* cfg) {\n"
    "  string.memcpy(&g_cfg, cfg, sizeof(Config));\n"
    "}\n\n"

    // ---- integer checks ----
    "public fn void check_eq(const char* file @(auto_file), u32 line @(auto_line), i64 expected, i64 real) {\n"
    "  if (real != expected) {\n"
    "    g_cfg.on_error(\"%s:%d  assertion failed, expected %d, got %d\", file, line, expected, real);\n"
    "  }\n"
    "}\n\n"

    "public fn void check_eq_u(const char* file @(auto_file), u32 line @(auto_line), u64 expected, u64 real) {\n"
    "  if (real != expected) {\n"
    "    g_cfg.on_error(\"%s:%d  assertion failed, expected %d, got %d\", file, line, expected, real);\n"
    "  }\n"
    "}\n\n"

    "public fn void check_not_eq(const char* file @(auto_file), u32 line @(auto_line), i64 expected, i64 real) {\n"
    "  if (real == expected) {\n"
    "    g_cfg.on_error(\"%s:%d  assertion failed, expected not %d, got %d\", file, line, expected, real);\n"
    "  }\n"
    "}\n\n"

    "public fn void check_lt(const char* file @(auto_file), u32 line @(auto_line), i64 expected, i64 real) {\n"
    "  if (real >= expected) {\n"
    "    g_cfg.on_error(\"%s:%d  assertion failed, expected less than %d, got %d\", file, line, expected, real);\n"
    "  }\n"
    "}\n\n"

    "public fn void check_le(const char* file @(auto_file), u32 line @(auto_line), i64 expected, i64 real) {\n"
    "  if (real > expected) {\n"
    "    g_cfg.on_error(\"%s:%d  assertion failed, expected less/equal than %d, got %d\", file, line, expected, real);\n"
    "  }\n"
    "}\n\n"

    "public fn void check_gt(const char* file @(auto_file), u32 line @(auto_line), i64 expected, i64 real) {\n"
    "  if (real <= expected) {\n"
    "    g_cfg.on_error(\"%s:%d  assertion failed, expected greater than %d, got %d\", file, line, expected, real);\n"
    "  }\n"
    "}\n\n"

    "public fn void check_ge(const char* file @(auto_file), u32 line @(auto_line), i64 expected, i64 real) {\n"
    "  if (real < expected) {\n"
    "    g_cfg.on_error(\"%s:%d  assertion failed, expected greater/equal than %d, got %d\", file, line, expected, real);\n"
    "  }\n"
    "}\n\n"

    // ---- interval checks ----
    "public fn void check_between(const char* file @(auto_file), u32 line @(auto_line), i64 left, i64 right, i32 real) {\n"
    "  if (real <= left || real >= right) {\n"
    "    g_cfg.on_error(\"%s:%d  assertion failed, expected interval <%d,%d>, got %d\", file, line, left, right, real);\n"
    "  }\n"
    "}\n\n"

    "public fn void check_between_eq(const char* file @(auto_file), u32 line @(auto_line), i64 left, i64 right, i32 real) {\n"
    "  if (real < left || real > right) {\n"
    "    g_cfg.on_error(\"%s:%d  assertion failed, expected interval [%d,%d], got %d\", file, line, left, right, real);\n"
    "  }\n"
    "}\n\n"

    // ---- string checks ----
    "public fn void check_str(const char* file @(auto_file), u32 line @(auto_line), const char* expected, const char* real) {\n"
    "  if (string.strcmp(real, expected) != 0) {\n"
    "    g_cfg.on_error(\"%s:%d  assertion failed, expected '%s', got '%s'\", file, line, expected, real);\n"
    "  }\n"
    "}\n\n"

    "public fn void check_not_str(const char* file @(auto_file), u32 line @(auto_line), const char* expected, const char* real) {\n"
    "  if (string.strcmp(real, expected) == 0) {\n"
    "    g_cfg.on_error(\"%s:%d  assertion failed, expected not '%s', got '%s'\", file, line, expected, real);\n"
    "  }\n"
    "}\n\n"

    "public fn void check_str_contains(const char* file @(auto_file), u32 line @(auto_line), const char* str, const char* sub) {\n"
    "  if (string.strstr(str, sub) == nil) {\n"
    "    g_cfg.on_error(\"%s:%d  assertion failed, '%s' does not contain '%s'\", file, line, str, sub);\n"
    "  }\n"
    "}\n\n"

    "public fn void check_str_not_contains(const char* file @(auto_file), u32 line @(auto_line), const char* str, const char* sub) {\n"
    "  if (string.strstr(str, sub) != nil) {\n"
    "    g_cfg.on_error(\"%s:%d  assertion failed, '%s' should not contain '%s'\", file, line, str, sub);\n"
    "  }\n"
    "}\n\n"

    // ---- data checks ----
    "public fn void check_data(const char* file @(auto_file), u32 line @(auto_line), const u8* exp, u32 expsize, const u8* real, u32 realsize) {\n"
    "  if (expsize != realsize) {\n"
    "    g_cfg.on_error(\"%s:%d  assertion failed, expected %d bytes, real %d b\", file, line, expsize, realsize);\n"
    "  }\n"
    "  for (u32 i=0; i<expsize; i++) {\n"
    "    if (exp[i] != real[i]) {\n"
    "      g_cfg.on_error(\"%s:%d  expected 0x%02x at offset %d, got 0x%02x\", file, line, exp[i], i, real[i]);\n"
    "    }\n"
    "  }\n"
    "}\n\n"

    // ---- pointer checks ----
    "public fn void check_nil(const char* file @(auto_file), u32 line @(auto_line), void* real) {\n"
    "  if (real != nil) {\n"
    "    g_cfg.on_error(\"%s:%d  assertion failed, expected nil, got %p\", file, line, real);\n"
    "  }\n"
    "}\n\n"

    "public fn void check_not_nil(const char* file @(auto_file), u32 line @(auto_line), void* real) {\n"
    "  if (real == nil) {\n"
    "    g_cfg.on_error(\"%s:%d  assertion failed, expected not nil, got nil\", file, line);\n"
    "  }\n"
    "}\n\n"

    // ---- boolean checks ----
    "public fn void check_true(const char* file @(auto_file), u32 line @(auto_line), bool real) {\n"
    "  if (real != true) {\n"
    "    g_cfg.on_error(\"%s:%d  assertion failed, expected true, got false\", file, line);\n"
    "  }\n"
    "}\n\n"

    "public fn void check_false(const char* file @(auto_file), u32 line @(auto_line), bool real) {\n"
    "  if (real != false) {\n"
    "    g_cfg.on_error(\"%s:%d  assertion failed, expected false, got true\", file, line);\n"
    "  }\n"
    "}\n\n"

    // ---- fail check ----
    "public fn void check_fail(const char* file @(auto_file), u32 line @(auto_line)) {\n"
    "  g_cfg.on_error(\"%s:%d  shouldn't come here\", file, line);\n"
    "}\n\n"

    "public fn void log(const char* fmt @(printf_format), ...) {\n"
    "  va_list args;\n"
    "  va_start(args, fmt);\n"
    "  g_cfg.on_log(fmt, args);\n"
    "  va_end(args);\n"
    "}\n\n";

fn void generate_types(Plugin *p) {
    string_buffer.Buf* out = string_buffer.create(4096, false, 2);

    out.add(Content);
    p.info.addSource(p.info.fn_arg, "generated", out);
}

fn bool handle_attr(void* arg, Decl* d, const attr.Attr* a) {
    Plugin* p = arg;
    assert(a.name  == p.attr_name);

    if (!d.isStructType()) {
        p.info.diags.error(a.loc, "attribute 'unittest' can only be applied to structs");
        return false;
    }

    p.decls.add(d);
    return true;
}

fn void Plugin.handleTypeFunc(void* arg, FunctionDecl* fd) {
    Plugin* p = arg;

    Ref* prefix = fd.getPrefix();
    assert(prefix);
    Decl* d = cast<Decl*>(fd);

    if (prefix.name_idx != p.cur_prefix) return;

    if (d.getNameIdx() == p.setup_name) {
        p.setup = true;
        return;
    }

    if (d.getNameIdx() == p.teardown_name) {
        p.teardown = true;
        return;
    }

    const char* name = d.getName();
    if (string.strncmp("test", name, 4) != 0) return;

    p.tests.add(fd);
}

fn void generate_tests(void* arg) {
    Plugin* p = arg;
    console.debug("unittest: generating tests");
    u64 t1 = utils.now();

    Decl** decls = p.decls.getDecls();
    for (u32 i=0; i<p.decls.size(); i++) {
        Decl* d = decls[i];
        Module* m = d.getModule();
        p.cur_prefix = d.getNameIdx();

        p.tests.clear();
        p.setup = false;
        p.teardown = false;
        string_buffer.Buf* out = string_buffer.create(512, false, 2);

        // TODO multiple test-groups in single module
        m.visitTypeFunctions(Plugin.handleTypeFunc, p);

        out.print("module %s;\n\n", m.getName());
        out.add("import c2test as ct;\n\n");

        out.add("public const ct.C2Test[] Test_functions = {\n");
        FunctionDecl** tests = p.tests.getDecls();
        for (u32 j=0; j<p.tests.size(); j++) {
            Decl* func = cast<Decl*>(tests[j]);
            // TODO dont use fullName since we dont need the module prefix
            out.print("   { \"%s\", cast<ct.TestFn>(%s) },\n", func.getName(), func.getFullName());
        }
        out.add("}\n\n");

        out.add("public const ct.Group TestGroup = {\n");
        out.print("  .name = \"%s\",\n", m.getName());
        out.print("  .fixture_size = sizeof(%s),\n", d.getName());
        out.add("  .setup = ");
        if (p.setup) {
            out.print("cast<ct.TestFn>(%s.setup),\n", d.getName());
        } else {
            out.add("nil,\n");
        }

        out.add("  .teardown = ");
        if (p.teardown) {
            out.print("cast<ct.TestFn>(%s.teardown),\n", d.getName());
        } else {
            out.add("nil,\n");
        }
        out.add("  .num_tests = elemsof(Test_functions),\n");
        out.add("  .tests = Test_functions,\n");
        out.add("}\n\n");

        p.info.addSource(p.info.fn_arg, "generated", out);
    }

    p.generate_c2test_main();

    u64 t2 = utils.now();
    console.log_time("unit_test generation", t2 - t1);
}

fn void Plugin.generate_c2test_main(Plugin* p) {
    Decl** decls = p.decls.getDecls();

    string_buffer.Buf* out = string_buffer.create(1024, false, 2);

    // Note: this would be so much easier if we used the load_file plugin. But that
    // would make the build process a lot more complicated.
    out.add("module c2test_main;\n\n");
    out.add("import c2test local;\n\n");
    for (u32 i=0; i<p.decls.size(); i++) {
        Module* m = decls[i].getModule();
        out.print("import %s;\n", m.getName());
    }
    out.add("import csetjmp local;\n\n");
    out.add("import stdarg local;\n\n");
    out.add("import stdio local;\n\n");
    out.add("import sys_time;\n\n");
    out.add("import unistd;\n\n");

    out.add("public const char[] Red      = \"\\033[0;31m\";\n");
    out.add("public const char[] Green    = \"\\033[0;32m\";\n");
    out.add("public const char[] Yellow   = \"\\033[0;33m\";\n");
    out.add("public const char[] Blue     = \"\\033[0;34m\";\n");
    out.add("public const char[] Normal   = \"\\033[0m\";\n");

    out.add("bool color_output;\n\n");
    out.add("JmpBufTag jmpbuf;\n\n");
    out.add("char[4096] error_buffer;\n");
    out.add("char* error_msg;\n");
    out.add("u32 error_size;\n");

    out.add("public fn u64 now() {\n");
    out.add("  sys_time.Timeval tv;\n");
    out.add("  sys_time.gettimeofday(&tv, nil);\n");
    out.add("  u64 now64 = cast<u64>(tv.tv_sec);\n");
    out.add("  now64 *= 1000000;\n");
    out.add("  now64 += tv.tv_usec;\n");
    out.add("  return now64;\n");
    out.add("}\n");

    out.add("fn void color_print(const char* color, const char* text) {\n");
    out.add("  if (color_output) {\n");
    out.add("    printf(\"%s%s%s\\n\", color, text, Normal);\n");
    out.add("  } else {\n");
    out.add("    printf(\"%s\\n\", text);\n");
    out.add("  }\n");
    out.add("}\n\n");

    out.add("fn void run_group(const Group* g, Stats* stats) {\n");
    out.add("  u8[256] fixture;\n");
    out.add("  for (u32 i=0; i<g.num_tests; i++) {\n");
    out.add("    const C2Test* t = &g.tests[i];\n");
    // TODO add skip feature? (@skip?)
    out.add("    error_size = sizeof(error_buffer) -1;\n");
    out.add("    error_msg = error_buffer;\n");
    out.add("    printf(\"TEST [%d/%d] %s.%s \", i+1+stats.done, stats.total, g.name, t.name);\n");
    out.add("    fflush(stdout);\n");
    out.add("    i32 result = setjmp(&jmpbuf);\n");
    out.add("    if (result == 0) {\n");
    out.add("      if (g.setup) g.setup(&fixture);\n");
    out.add("      t.func(&fixture);\n");
    out.add("      if (g.teardown) g.teardown(&fixture);\n");
    out.add("      printf(\"[OK]\\n\");\n");
    out.add("      stats.ok++;\n");
    out.add("    } else {\n");
    out.add("      color_print(Red, \"[FAIL]\");\n");
    out.add("      stats.failed++;\n");
    out.add("    }\n");
    out.add("    if (error_msg != error_buffer) printf(\"%s\", error_buffer);\n");
    out.add("  }\n");
    out.add("}\n\n");

    out.add("fn void vprint_errormsg(const char* fmt, va_list ap) {\n");
    out.add("  i32 ret = vsnprintf(error_msg, error_size, fmt, ap);\n");
    out.add("  if (ret < 0) {\n");
    out.add("    error_msg[0] = 0;\n");
    out.add("  } else {\n");
    out.add("    const usize size = cast<usize>(ret);\n");
    out.add("    const usize s = (error_size <= size) ? size - error_size : size;\n");
    // error_size may overflow at this point
    out.add("    error_size -= s;\n");
    out.add("    error_msg += s;\n");
    out.add("  }\n");
    out.add("}\n\n");

    out.add("fn void print_errormsg(const char* fmt @(printf_format), ...) {\n");
    out.add("  va_list args;\n");
    out.add("  va_start(args, fmt);\n");
    out.add("  vprint_errormsg(fmt, args);\n");
    out.add("  va_end(args);\n");
    out.add("}\n\n");

    out.add("fn void msg_start(const char* color, const char* title) {\n");
    out.add("  if (color_output) {\n");
    out.add("    print_errormsg(\"%s\", color);\n");
    out.add("  }\n");
    out.add("  print_errormsg(\"  %s: \", title);\n");
    out.add("}\n\n");

    out.add("fn void msg_end() {\n");
    out.add("  if (color_output) print_errormsg(Normal);\n");
    out.add("  print_errormsg(\"\\n\");\n");
    out.add("}\n\n");

    out.add("fn void on_error(const char* fmt @(printf_format), ...) {\n");
    out.add("  va_list args;\n");
    out.add("  msg_start(Yellow, \"ERR\");\n");
    out.add("  va_start(args, fmt);\n");
    out.add("  vprint_errormsg(fmt, args);\n");
    out.add("  va_end(args);\n");
    out.add("  msg_end();\n");
    out.add("  longjmp(&jmpbuf, 1);\n");
    out.add("}\n\n");

    out.add("public fn void on_log(const char* fmt, va_list args) {\n");
    out.add("  msg_start(Blue, \"LOG\");\n");
    out.add("  vprint_errormsg(fmt, args);\n");
    out.add("  msg_end();\n");
    out.add("}\n\n");

    out.add("public type Stats struct {\n");
    out.add("  u32 done;\n");
    out.add("  u32 total;\n");
    out.add("  u32 ok;\n");
    out.add("  u32 failed;\n");
    out.add("  u32 skipped;\n");
    out.add("}\n\n");

    out.add("public fn i32 run_tests() {\n");
    out.add("  color_output = unistd.isatty(1);\n");
    out.add("  Config cfg = {\n");
    out.add("    .on_error = on_error,\n");
    out.add("    .on_log = on_log,\n");
    out.add("  };\n");
    out.add("  c2test.init(&cfg);\n");

    out.add("  Stats stats = { };\n");
    out.add("  for(u32 i=0; i<elemsof(groups); i++) {\n");
    out.add("    stats.total += groups[i].num_tests;\n");
    out.add("  }\n");

    out.add("  u64 t1 = now();\n");
    out.add("  for(u32 i=0; i<elemsof(groups); i++) {\n");
    out.add("    const Group* g = groups[i];\n");
    out.add("    run_group(g, &stats);\n");
    out.add("    stats.done += g.num_tests;\n");
    out.add("  }\n");
    out.add("  u64 t2 = now();\n");

    out.add("  const char* color = stats.failed ? Red : Green;\n");
    out.add("  char[80] results;\n");
    out.add("  sprintf(results, \"RESULT: %d tests (%d ok, %d failed, %d skipped) ran in %d ms\", \n");
    out.add("    stats.total, stats.ok, stats.failed, stats.skipped, (t2 - t1) / 1000);\n");
    out.add("  color_print(color, results);\n");
    out.add("  return 0;\n");
    out.add("}\n\n");

    out.add("public fn void show_tests() {\n");
    out.add("  for(u32 i=0; i<elemsof(groups); i++) {\n");
    out.add("    const Group* g = groups[i];\n");
    out.add("    for(u32 t=0; t<g.num_tests; t++) {\n");
    out.add("      printf(\"%s.%s\\n\", g.name, g.tests[t].name);\n");
    out.add("    }\n");
    out.add("  }\n");
    out.add("}\n\n");

    out.add("const Group*[] groups = {\n");
    for (u32 i=0; i<p.decls.size(); i++) {
        Module* m = decls[i].getModule();
        out.print("  &%s.TestGroup,\n", m.getName());
    }
    out.add("}\n\n");

    p.info.addSource(p.info.fn_arg, "generated c2test_main", out);
}

