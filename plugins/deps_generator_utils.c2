/* Copyright 2022-2025 Bas van den Berg
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

module deps_generator_utils;

import ast local;

import std;

public fn const char* getPrefixedName(const Decl* d) {
    switch (d.getKind()) {
    case Function:
        const FunctionDecl* fd = cast<FunctionDecl*>(d);
        if (fd.hasPrefix()) {
            local char[64] fullname;
            std.sprintf(fullname, "%s.%s", fd.getPrefixName(), d.getName());
            return fullname;
        }
        break;
    case Import:
        break;
    case StructType:
        break;
    case EnumType:
        break;
    case EnumConstant:
        // TODO
        break;
    case FunctionType:
        break;
    case AliasType:
        break;
    case Variable:
        break;
    }
    return d.getName();
}

public fn bool isGlobal(const Decl* d) @(unused) {
    switch (d.getKind()) {
    case Function:
        break;
    case Import:
        return false;
    case StructType:
        const StructTypeDecl* sd = cast<StructTypeDecl*>(d);
        return sd.isGlobal();
    case EnumType:
        break;
    case EnumConstant:
        break;
    case FunctionType:
        break;
    case AliasType:
        break;
    case Variable:
        const VarDecl* vd = cast<VarDecl*>(d);
        return vd.isGlobal();
    }
    return true;
}

