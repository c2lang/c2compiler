/* Copyright 2022-2025 Bas van den Berg
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

module plugin_main;

import ast;
import component;
import console;
import plugin_info;
import process_utils;

import std local;

public plugin_info.Plugin handle @(export) = {
    .load = load,
    .unload = unload,
    .init = init,
    .post_parse = generate_module,
    .post_analysis = nil,
    .name = "Git Version 1.0",
}

type Plugin struct {
    plugin_info.Info* info;
    char[128] version;
}

fn void* load(const char* options, bool show_timing, bool show_debug) {
    Plugin* p = calloc(1, sizeof(Plugin));
    console.init();
    console.setTiming(show_timing);
    console.setDebug(show_debug);
    // TODO handle options
    strcpy(p.version, "unknown");

    i32 retval = process_utils.run2(".", "git", "describe --tags --always --dirty",
                                    p.version, sizeof(p.version));
    if (retval == 0) {
        console.debug("gitversion: version '%s'", p.version);
    } else {
        console.warn("gitversion: no git archive?");
    }

    return p;
}

fn void unload(void* arg) {
    free(arg);
}

fn void init(void* arg, plugin_info.Info* info) {
    Plugin* p = arg;
    p.info = info;
}

fn void generate_module(void* arg) {
    Plugin* p = arg;
    ast.setGlobals(p.info.ast_globals);
    ast.builtins = p.info.ast_builtins;

    // create module git_version
    u32 mod_name = p.info.astPool.addStr("git_version", true);
    component.Component* mainComp = p.info.components.get(p.info.components.size()-1);
    ast.Module* mod = mainComp.createModule(mod_name);
    if (!mod) {
        console.error("git_version: module 'git_version' already exists");
        exit(EXIT_FAILURE);
    }

    // add AST to module
    ast.AST* a = mod.add(p.info.auxPool, p.info.auxPool.addStr("<generated>", false), false, true);

    // add equivalent of: const char[] Describe = "version";
    u32 var_name = p.info.astPool.addStr("Describe", true);

    // create type
    ast.TypeRefHolder ref.init();
    ref.setConst();
    ref.addArray(nil);
    ref.setBuiltin(ast.BuiltinKind.Char, 0);

    // create variable
    u32 version = p.info.astPool.addStr(p.version, false);
    u32 len = cast<u32>(strlen(p.version));
    ast.StringLiteral* str = ast.StringLiteral.create(p.info.context, 0, len, version, len);
    ast.Expr* initExpr = cast<ast.Expr*>(str);
    ast.VarDecl* vd = ast.VarDecl.create(p.info.context, ast.VarDeclKind.GlobalVar, var_name, 0, true, &ref, a.getIdx(), 0, false, initExpr);
    ast.Decl* d = vd.asDecl();

    // add to ast + module-symbols
    a.addVarDecl(d);
    mod.addSymbol(var_name, d);
}

