/* Copyright 2022-2025 Bas van den Berg
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

module refs_generator;

import ast local;
import component;
import console;
import c2refs as refs;
import source_mgr;
import ast_visitor;

import string;
import stdio;

type Generator struct {
    source_mgr.SourceMgr* sm;
    refs.Refs* refs;
    const char* curfile;
    ast_visitor.Visitor* visitor;
}

fn void Generator.on_decl(void* arg, Decl* d, bool global) {
    Generator* gen = arg;

    if (d.isImport()) return;

    const char* name = d.getName();
    if (name && global) {
        source_mgr.Location loc = gen.sm.locate(d.getLoc());
        refs.Dest dest = { gen.curfile, loc.line, cast<u16>(loc.column) };
        gen.refs.add_symbol(d.getFullName(), &dest);
    }

    switch (d.getKind()) {
    case Function:
        break;
    case Import:
        break;
    case StructType:
        break;
    case EnumType:
        EnumTypeDecl* etd = cast<EnumTypeDecl*>(d);
        EnumConstantDecl** constants = etd.getConstants();
        for (u32 i=0; i<etd.getNumConstants(); i++) {
            Decl* ecd = cast<Decl*>(constants[i]);
            // NOTE: we add the symbol here, since we have the EnumDecl here
            source_mgr.Location loc = gen.sm.locate(ecd.getLoc());
            refs.Dest dest = { gen.curfile, loc.line, cast<u16>(loc.column) };
            gen.refs.add_symbol(ecd.getFullName(), &dest);
            Generator.on_decl(arg, ecd, false);
        }
        return;
    case EnumConstant:
        break;
    case FunctionType:
        break;
    case AliasType:
        break;
    case Variable:
        break;
    }

    gen.visitor.handle(d);
}

fn void Generator.handleTypeRef(Generator* gen, const TypeRef* ref) {
    const Ref* prefix = ref.getPrefix();
    if (prefix) gen.handleRef(prefix);

    const Ref* user = ref.getUser();
    if (user) gen.handleRef(user);
}

fn void Generator.handleRef(Generator* gen, const Ref* ref) {
    if (!ref.decl) {
        console.warn("refs: Type Decl not set!");
        return;
    }

    const source_mgr.Location dst_loc = gen.sm.locate(ref.decl.getLoc());
    // TODO filter out generated destinations
    source_mgr.Location src_loc = gen.sm.locate(ref.loc);
    u16 len = cast<u16>(string.strlen(idx2name(ref.name_idx)));
    refs.RefSrc src = { src_loc.line, cast<u16>(src_loc.column), len };
    refs.Dest dest = { dst_loc.filename, dst_loc.line, cast<u16>(dst_loc.column) };
    gen.refs.add_tag(&src, &dest);
}

fn void Generator.on_global_decl(void* arg, Decl* d) {
    Generator.on_decl(arg, d, true);
}

fn void Generator.on_static_assert(void* arg, StaticAssert* d) {
    Generator* gen = arg;
    gen.visitor.handleAssert(d);
}

fn void Generator.on_ast(void* arg, AST* a) {
    if (a.isGenerated()) return;

    Generator* gen = arg;
    gen.curfile = a.getFilename();
    gen.refs.add_file(a.getFilename());
    a.visitDecls(Generator.on_global_decl, arg); // globals
    a.visitStaticAsserts(Generator.on_static_assert, arg);
}

fn void Generator.on_module(void* arg, Module* m) {
    if (!m.isUsed()) return;
    m.visitASTs(Generator.on_ast, arg);
}

fn void Generator.on_ref(void* arg, const Ref* ref) {
    Generator* gen = arg;
    gen.handleRef(ref);
}

public fn void generate(source_mgr.SourceMgr* sm, const char* output_dir, component.List* comps, const char* filename) {
    Generator gen = { sm, refs.Refs.create(), nil };
    gen.visitor = ast_visitor.create(&gen, Generator.on_ref);

    for (u32 i=0; i<comps.size(); i++) {
        comps.get(i).visitModules(Generator.on_module, &gen);
    }

    char[128] outfile;
    stdio.sprintf(outfile, "%s/%s", output_dir, filename);
    gen.refs.write(outfile);
    gen.refs.free();

    gen.visitor.free();
}

