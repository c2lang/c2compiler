/* Copyright 2022-2025 Bas van den Berg
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

module plugin_info;

import ast;
import ast_builder;
import ast_context;
import build_target;
import component;
import diagnostics;
import source_mgr;
import string_pool;
import string_buffer;

public type RegisterAttrFn fn bool (void* arg, u32 name, ast.AttrHandlerFn func, void* arg2);

public type AddSourceFn fn void (void* arg, const char* name, string_buffer.Buf* content);

public type Info struct {
    source_mgr.SourceMgr* sm;    // no ownership
    diagnostics.Diags* diags;    // no ownership
    build_target.Target* target;

    component.List* components;
    string_pool.Pool* astPool;
    string_pool.Pool* auxPool;
    ast_context.Context* context;
    ast_builder.Builder* builder;
    ast.Globals* ast_globals;
    ast.QualType* ast_builtins;

    AddSourceFn addSource;
    RegisterAttrFn register_attr;
    void* fn_arg;

    char[32] target_name;
    char[256] output_dir;
}

// only used by plugins
public fn bool Info.registerAttr(Info* info,
                                 u32 name,
                                 ast.AttrHandlerFn func,
                                 void* arg) @(unused) {
    return info.register_attr(info.fn_arg, name, func, arg);
}

public type LoadFn fn void*(const char* options, bool console_timing, bool console_debug);
public type UnloadFn fn void(void* arg);
public type InitFn fn void(void* arg, plugin_info.Info* info);
public type PostParseFn fn void(void* arg);
public type PostAnalysisFn fn void(void* arg);

public type Plugin struct @(unused) {
    LoadFn load;
    UnloadFn unload;
    InitFn init;
    PostParseFn post_parse;
    PostAnalysisFn post_analysis;
    const char* name;
    const char* version;
}

