/* Copyright 2022-2025 Bas van den Berg
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

module dep_finder;

import ast local;

public type OnDecl fn void (void* arg, Decl* d);

public type Finder struct {
    Module* mod;    // the current module
    void* arg;
    OnDecl on_decl;
    Decl* current;
}

public fn void Finder.init(Finder* f, Module* mod, void* arg, OnDecl on_decl) {
    f.mod = mod;
    f.arg = arg;
    f.on_decl = on_decl;
    f.current = nil;
}

public fn void Finder.check(Finder* s, Decl* d) {
    s.current = d;
    switch (d.getKind()) {
    case Function:
        s.handleFunction((FunctionDecl*)d);
        break;
    case Import:
        break;
    case StructType:
        s.handleStruct((StructTypeDecl*)d);
        break;
    case EnumType:
        s.handleEnumType((EnumTypeDecl*)d);
        break;
    case EnumConstant:
        d.dump();
        assert(0); // TODO
        break;
    case FunctionType:
        FunctionTypeDecl* ftd = (FunctionTypeDecl*)d;
        s.handleFunction(ftd.getDecl());
        break;
    case AliasType:
        AliasTypeDecl* at = (AliasTypeDecl*)d;
        s.handleTypeRef(at.getTypeRef());
        break;
    case Variable:
        s.handleVarDecl((VarDecl*)d);
        break;
    }
}

/*
fn void Finder.handleFunctionType(Finder* s, FunctionTypeDecl* ftd) {
    s.handleFunction(ftd.getDecl());
}
*/

fn void Finder.handleFunction(Finder* s, FunctionDecl* d) {
    if (d.isTemplate()) return; // TODO skip template functions for now

    s.handleTypeRef(d.getReturnTypeRef());

    // struct prefix
    //if (d.hasPrefix()) {
        // doesn't matter, will be in args
    //}

    // args
    u32 num_params = d.getNumParams();
    VarDecl** args = d.getParams();
    for (u32 i=0; i<num_params; i++) s.handleVarDecl(args[i]);

    // body
    //CompoundStmt* body = d.getBody();
    //if (body) s.handleCompoundStmt(body);
}

fn void Finder.handleStruct(Finder* s, StructTypeDecl* d) {
    // TODO if opaque, only check members in full(non-interface) mode
    u32 num_members = d.getNumMembers();
    Decl** members = d.getMembers();
    for (u32 i=0; i<num_members; i++) {
        Decl* m = members[i];
        if (m.isStructType()) {
            s.handleStruct((StructTypeDecl*)m);
        } else {
            assert(m.isVariable());
            // TODO for pointer members, dont count, since forward decl is already done!
            s.handleVarDecl((VarDecl*)m);
        }
    }
}

fn void Finder.handleEnumType(Finder* s, EnumTypeDecl* etd) {
    u32 num_constants = etd.getNumConstants();
    EnumConstantDecl** constants = etd.getConstants();
    for (u32 i=0; i<num_constants; i++) {
        EnumConstantDecl* c = constants[i];
        Expr* initExpr = c.getInit();
        if (initExpr) s.handleExpr(initExpr);
    }
}

fn void Finder.handleTypeRef(Finder* f, TypeRef* r) {
    const Decl* refDecl = r.getUserDecl();
    if (refDecl) {
        if (r.isPointer() && refDecl.isStructType()) {
            // if pointing to another struct, dont add dep, since we already have a forward decl
            // note: this also filters 'self' pointers
        } else {
            f.onDep(refDecl, !r.isPointer());
        }
    }

    u32 num_arrays = r.getNumArrays();
    for (u32 i=0; i<num_arrays; i++) {
        Expr* e = r.getArray(i);
        if (e) f.handleExpr(e); // could be foo[]
    }
}

fn void Finder.handleVarDecl(Finder* s, VarDecl* d) {
    s.handleTypeRef(d.getTypeRef());

    Expr* init_expr = d.getInit();
    if (init_expr) s.handleExpr(init_expr);
}

fn void Finder.handleExpr(Finder* s, Expr* e) {
    switch (e.getKind()) {
    case IntegerLiteral:
        break;
    case FloatLiteral:
        break;
    case BooleanLiteral:
        break;
    case CharLiteral:
        break;
    case StringLiteral:
        break;
    case Nil:
        break;
    case Identifier:
        IdentifierExpr* i = (IdentifierExpr*)e;
        Decl* d = i.getDecl();
        s.onDep(d, true);
        break;
    case Type:
        TypeExpr* t = (TypeExpr*)e;
        s.handleTypeRef(t.getTypeRef());
        break;
    case Call:
        break;
    case InitList:
        s.handleInitList((InitListExpr*)e);
        break;
    case FieldDesignatedInit:
        FieldDesignatedInitExpr* i = (FieldDesignatedInitExpr*)e;
        s.handleExpr(i.getInit());
        break;
    case ArrayDesignatedInit:
        ArrayDesignatedInitExpr* a = (ArrayDesignatedInitExpr*)e;
        s.handleExpr(a.getDesignator());
        s.handleExpr(a.getInit());
        break;
    case BinaryOperator:
        BinaryOperator* b = (BinaryOperator*)e;
        s.handleExpr(b.getLHS());
        s.handleExpr(b.getRHS());
        break;
    case UnaryOperator:
        UnaryOperator* u = (UnaryOperator*)e;
        s.handleExpr(u.getInner());
        break;
    case ConditionalOperator:
        ConditionalOperator* c = (ConditionalOperator*)e;
        s.handleExpr(c.getCond());
        s.handleExpr(c.getLHS());
        s.handleExpr(c.getRHS());
        break;
    case Builtin:
        BuiltinExpr* b = (BuiltinExpr*)e;
        s.handleExpr(b.getInner());
        break;
    case ArraySubscript:
        ArraySubscriptExpr* a = (ArraySubscriptExpr*)e;
        s.handleExpr(a.getBase());
        s.handleExpr(a.getIndex());
        break;
    case Member:
        s.handleMemberExpr((MemberExpr*)e);
        break;
    case Paren:
        ParenExpr* p = (ParenExpr*)e;
        s.handleExpr(p.getInner());
        break;
    case BitOffset:
        break;
    case ExplicitCast:
        ExplicitCastExpr* c = (ExplicitCastExpr*)e;
        s.handleExpr(c.getInner());
        s.handleTypeRef(c.getTypeRef());
        break;
    case ImplicitCast:
        ImplicitCastExpr* c = (ImplicitCastExpr*)e;
        s.handleExpr(c.getInner());
        break;
    case Range:
        RangeExpr* b = (RangeExpr*)e;
        s.handleExpr(b.getLHS());
        s.handleExpr(b.getRHS());
        break;
    case NamedArgument:
        NamedArgument* n = (NamedArgument*)e;
        s.handleExpr(n.getInner());
        break;
    }
}

fn void Finder.handleInitList(Finder* s, InitListExpr* ile) {
    u32 count = ile.getNumValues();
    Expr** exprs = ile.getValues();
    for (u32 i=0; i<count; i++) {
        s.handleExpr(exprs[i]);
    }
}

fn void Finder.handleMemberExpr(Finder* s, MemberExpr* m) {
    Decl* d = m.getFullDecl();
    if (d.isEnumConstant()) {
        // change Constant -> Enum
        d = m.getPrevLastDecl();
        assert(d.isEnum());
    }
    // TODO also add dep to struct for (static)type-functions
    s.onDep(d, true);
    // NOTE: when pointing to EnumConstant, use Enum instead!
}

fn void Finder.onDep(Finder* s, const Decl* d, bool full) {
    if (d.getModule() != s.mod) return; // we're only interested in same module dependencies
    if (d.isGenerated()) return;
    if (d == s.current) return; // self

    s.on_decl(s.arg, (Decl*)d);
}

