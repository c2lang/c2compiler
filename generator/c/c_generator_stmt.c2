/* Copyright 2022-2025 Bas van den Berg
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

module c_generator;

import ast local;
import source_mgr;
import string_buffer;

fn void Generator.emitVarDecl(Generator* gen, VarDecl* vd, string_buffer.Buf* out, bool emit_init, bool first) {
    Decl* d = (Decl*)vd;
    if (first) {
        if (vd.hasLocalQualifier()) out.add("static ");
        gen.emitTypePre(out, d.getType());
    } else {
        out.add1(',');
    }
    out.space();
    out.add(d.getName());
    gen.emitTypePost(out, d.getType());
    d.setGenerated();
    Expr* ie = vd.getInit();
    if (ie && emit_init) {
        if (vd.hasInitCall()) {
            assert(first);
            out.add("; ");
        } else {
            out.add(" = ");
        }
        gen.emitExpr(out, ie);
    } else {
        if (!vd.hasAttrNoInit()) {
            out.add(" = { 0 }");
        }
    }
}

fn void Generator.emitStmt(Generator* gen, Stmt* s, u32 indent, bool newline) {
    string_buffer.Buf* out = gen.out;

    if (newline) out.indent(indent);

    switch (s.getKind()) {
    case Return:
        out.add("return");
        ReturnStmt* r = (ReturnStmt*)s;
        ast.Expr* val = r.getValue();
        if (val) {
            out.space();
            if (val.isInitList()) {
                gen.emitCast(out, gen.cur_function.getRType(), true);
            }
            gen.emitExpr2(out, val, Comma);
        }
        out.add(";\n");
        break;
    case Expr:
        gen.emitExpr(out, (Expr*)s);
        if (newline) out.add(";\n");
        break;
    case If:
        IfStmt* i = (IfStmt*)s;
        Stmt* cond = i.getCond();
        bool is_decl = cond.isDecl();
        if (is_decl) {
            out.add("{\n");
            indent++;
            gen.emitStmt(cond, indent, true);
            out.indent(indent);
            out.add("if (");
            DeclStmt* ds = (DeclStmt*)cond;
            VarDecl* vd = ds.getDecl(0);
            out.add(vd.asDecl().getName());
        } else {
            assert(cond.isExpr());
            out.add("if (");
            gen.emitExpr(out, (Expr*)cond);
        }
        out.add(") ");
        Stmt* thenStmt = i.getThen();
        gen.emitStmt(thenStmt, indent, false);
        if (!thenStmt.isCompound()) {
            if (!out.endsWith('\n')) out.add1(';');
        }

        Stmt* elseStmt = i.getElse();
        if (elseStmt) {
            if (thenStmt.isCompound()) {
                out.space();
            } else {
                if (!out.endsWith('\n')) out.newline();
                out.indent(indent);
            }
            out.add("else ");
            gen.emitStmt(elseStmt, indent, false);
            if (!elseStmt.isCompound()) {
                if (!out.endsWith('\n')) out.add1(';');
            }
        }
        if (!out.endsWith('\n')) out.newline();
        if (is_decl) {
            indent--;
            out.indent(indent);
            out.add("}\n");
        }
        break;
    case While:
        WhileStmt* w = (WhileStmt*)s;
        Stmt* cond = w.getCond();
        bool is_decl = cond.isDecl();
        if (is_decl) {
            out.add("{\n");
            indent++;
            DeclStmt* ds = (DeclStmt*)cond;
            VarDecl* vd = ds.getDecl(0);
            out.indent(indent);
            gen.emitVarDecl(vd, out, false, true);
            out.add(";\n");
            out.indent(indent);
            out.add("while ((");
            out.add(vd.asDecl().getName());
            // add init part
            out.add(" = ");
            Expr* ie = vd.getInit();
            assert(ie);
            gen.emitExpr(out, ie);
            out.add(")) ");
        } else {
            assert(cond.isExpr());
            out.add("while (");
            gen.emitExpr(out, (Expr*)cond);
            out.add(") ");
        }
        Stmt* body = w.getBody();
        gen.emitStmt(body, indent, false);
        if (!body.isCompound()) {
            if (!out.endsWith('\n')) out.add1(';');
        }
        out.newline();
        if (is_decl) {
            indent--;
            out.indent(indent);
            out.add("}\n");
        }
        break;
    case For:
        ForStmt* f = (ForStmt*)s;
        out.add("for (");
        Stmt* initStmt = f.getInit();
        if (initStmt) {
            gen.emitStmt(initStmt, 0, false);
        }
        out.add1(';');
        if (f.getCond()) {
            out.space();
            gen.emitExpr(out, f.getCond());
        }
        out.add1(';');
        Expr* cont = f.getCont();
        if (cont) {
            out.space();
            gen.emitExpr(out, cont);
        }
        out.add(") ");
        Stmt* body = f.getBody();
        gen.emitStmt(body, indent, false);
        if (!body.isCompound()) {
            if (!out.endsWith('\n')) out.add1(';');
        }
        out.newline();
        break;
    case Switch:
        gen.emitSwitchStmt((SwitchStmt*)s, indent);
        break;
    case Break:
        out.add("break;\n");
        break;
    case Continue:
        out.add("continue;\n");
        break;
    case Fallthrough:
        out.add("fallthrough;\n");
        break;
    case Label:
        out.unindent();
        LabelStmt* ls = (LabelStmt*)s;
        Stmt* stmt = ls.getStmt();
        out.add(ls.getName());
        out.add1(':');
        if (!stmt || stmt.isDecl()) {
            out.add1(';');
        }
        out.newline();
        if (stmt) {
            gen.emitStmt(stmt, indent, true);
        }
        break;
    case Goto:
        GotoStmt* g = (GotoStmt*)s;
        out.add("goto ");
        out.add(g.getName());
        out.add(";\n");
        break;
    case Compound:
        CompoundStmt* c = (CompoundStmt*)s;
        out.add("{\n");
        u32 count = c.getCount();
        Stmt** stmts = c.getStmts();
        for (u32 i=0; i<count; i++) {
            gen.emitStmt(stmts[i], indent+1, true);
        }

        out.indent(indent);
        out.add1('}');
        if (newline) out.newline();
        break;
    case Decl:
        DeclStmt* ds = (DeclStmt*)s;
        u32 count = ds.getDeclCount();
        bool first = true;
        for (u32 i = 0; i < count; i++) {
            VarDecl* vd = ds.getDecl(i);
            gen.emitVarDecl(vd, out, true, first);
            first = false;
        }
        if (newline) out.add(";\n");
        break;
    case Asm:
        gen.emitAsmStmt((AsmStmt*)s, indent);
        break;
    case Assert:
        if (!gen.enable_asserts) out.print(";//assert");
        AssertStmt* a = (AssertStmt*)s;
        out.add1('(');
        Expr* inner = a.getInner();
        gen.emitExpr(out, inner);
        out.add1(')');
        if (gen.enable_asserts) {
            source_mgr.Location loc = gen.sm.locate(s.getLoc());
            const char* funcname = gen.cur_function.asDecl().getFullName();
            out.print(" || c2_assert(\"%s\", %d, \"%s\", \"", loc.filename, loc.line, funcname);
            // encode expression as a string
            string_buffer.Buf* str = string_buffer.create(128, false, 0);
            inner.printLiteral(str);
            out.encodeBytes(str.data(), str.size(), '"');
            str.free();
            out.add("\")");
        }
        out.add(";\n");
        break;
    }
}

fn void emitAsmPart(string_buffer.Buf* out, bool multi_line, u32 indent) {
    if (multi_line) {
        out.newline();
        out.indent(indent);
    } else {
        out.space();
    }
    out.add(": ");
}

fn void Generator.emitAsmOperand(Generator* gen, u32 name, const Expr* c, Expr* e) {
    string_buffer.Buf* out = gen.out;
    if (name) {
        out.print("[%s] ", ast.idx2name(name));
    }
    const StringLiteral* cs = (StringLiteral*)c;
    cs.printLiteral(out);
    out.add(" (");
    gen.emitExpr(out, e);
    out.rparen();
}

fn void Generator.emitAsmStmt(Generator* gen, AsmStmt* a, u32 indent) {
    string_buffer.Buf* out = gen.out;

    out.add("__asm__ ");
    if (a.isVolatile()) out.add("volatile ");

    out.lparen();
    StringLiteral* str = a.getString();
    str.printLiteral(out);

    u32 num_outputs = a.getNumOutputs();
    u32 num_inputs = a.getNumInputs();
    u32 num_clobbers = a.getNumClobbers();
    bool multi_line = false;
    if ((num_outputs + num_inputs + num_clobbers) > 4 || num_clobbers != 0) multi_line = true;

    if (num_outputs + num_inputs + num_clobbers) {
        u32* names = a.getNames();
        const Expr** constraints = a.getConstraints();
        Expr** exprs = a.getExprs();
        // outputs
        emitAsmPart(out, multi_line, indent);
        for (u32 i=0; i<num_outputs; i++) {
            if (i!=0) out.add(", ");
            gen.emitAsmOperand(names[i], constraints[i], exprs[i]);
        }
        // inputs
        if (num_inputs | num_clobbers) {
            emitAsmPart(out, multi_line, indent);
            for (u32 i=0; i<num_inputs; i++) {
                if (i!=0) out.add(", ");
                u32 idx = i + num_outputs;
                gen.emitAsmOperand(names[idx], constraints[idx], exprs[idx]);
            }
        }
        // clobbers
        if (num_clobbers) {
            Expr** clobbers = a.getClobbers();
            emitAsmPart(out, multi_line, indent);
            for (u32 i=0; i<num_clobbers; i++) {
                if (i!=0) out.add(", ");
                StringLiteral* l = (StringLiteral*)clobbers[i];
                l.printLiteral(out);
            }
        }
    }

    out.rparen();
    out.add(";\n");
}

fn void Generator.emitSwitchStmt(Generator* gen, SwitchStmt* sw, u32 indent) {
    string_buffer.Buf* out = gen.out;

    const u32 num_cases = sw.getNumCases();
    SwitchCase** cases = sw.getCases();

    if (sw.isString()) {
        out.add("switch (c2_strswitch(");
        gen.emitExpr(out, sw.getCond());
        out.add1(',');
        bool has_s2 = false;
        for (u32 i = 0; i < num_cases; i++) {
            SwitchCase* c = cases[i];
            if (c.isDefault())
                continue;
            Expr* e = c.getCond(0);
            if (e.isImplicitCast()) {
                const ImplicitCastExpr* ic = (ImplicitCastExpr*)e;
                e = ic.getInner();
            }
            if (e.isNil())
                continue;
            if (e.isStringLiteral()) {
                StringLiteral* lit = (StringLiteral*)e;
                const char *str = lit.getText();
                u32 slen = (lit.getSize() - 1) & 0xFF;
                if (slen) {
                    // only encode non emty strings, empty string has index 1
                    out.print(" \"\\%03o", slen);
                    out.encodeBytes(str, slen, '"');
                    out.add1('"');
                    has_s2 = true;
                }
            } else {
                e.dump();
                assert(0);
            }
        }
        if (!has_s2) out.add(" \"\"");
        out.add(")) {\n");

        u32 lab = 2;
        for (u32 i = 0; i < num_cases; i++) {
            gen.emitCase(cases[i], indent, &lab);
        }
        out.indent(indent);
        out.add("}\n");
    } else {
        out.add("switch (");
        gen.emitExpr(out, sw.getCond());
        out.add(") {\n");

        for (u32 i = 0; i < num_cases; i++) {
            gen.emitCase(cases[i], indent, nil);
        }
        out.indent(indent);
        out.add("}\n");
    }
}

fn void Generator.emitCase(Generator* gen, SwitchCase* c, u32 indent, u32 *lab) {
    string_buffer.Buf* out = gen.out;
    const char* brace = c.hasDecls() ? " {" : "";

    out.indent(indent);
    if (c.isDefault()) {
        out.print("default:%s\n", brace);
    } else {
        out.add("case ");
        if (lab) {  /* string case */
            Expr* e = c.getCond(0);
            if (e.isImplicitCast()) {
                const ImplicitCastExpr* ic = (ImplicitCastExpr*)e;
                e = ic.getInner();
            }
            if (e.isNil()) {
                out.print("0:%s // nil\n", brace);
            } else
            if (e.isStringLiteral()) {
                StringLiteral* lit = (StringLiteral*)e;
                const char *str = lit.getText();
                u32 slen = (lit.getSize() - 1) & 0xFF;
                u32 num = 1;
                if (slen) {
                    num = *lab;
                    *lab += 1;
                }
                out.print("%d:%s // \"", num, brace);
                out.encodeBytes(str, slen, '"');
                out.add("\"\n");
            } else {
                e.dump();
                assert(0);
            }
        } else {
            u32 num_conds = c.getNumConds();
            for (u32 i = 0; i < num_conds; i++) {
                if (i) {
                    out.add(":\n");
                    out.indent(indent);
                    out.add("case ");
                }
                // TODO: if compiler does not handle case ranges, expand as
                //       individual cases or generate alternative code
                gen.emitExpr(out, c.getCond(i));
            }
            out.print(":%s\n", brace);
        }
    }

    const u32 num_stmts = c.getNumStmts();
    if (num_stmts == 0) {
        out.indent(indent+1);
        out.add("fallthrough;\n");
    } else {
        Stmt** stmts = c.getStmts();
        for (u32 i=0; i<num_stmts; i++) {
            gen.emitStmt(stmts[i], indent+1, true);
        }
    }

    if (c.hasDecls()) {
        out.indent(indent);
        out.add("}\n");
    }
}
