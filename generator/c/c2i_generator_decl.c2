/* Copyright 2022-2025 Bas van den Berg
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

module c2i_generator;

import ast local;
import string_buffer;

fn void Generator.emitDecl(Generator* gen, Decl* d) {
    string_buffer.Buf* out = gen.out;

    switch (d.getKind()) {
    case Function:
        gen.emitFunctionDecl(d, false);
        break;
    case Import:
        break;
    case StructType:
        gen.emitStructTypeDecl(d, 0);
        break;
    case EnumType:
        gen.emitEnumType(d);
        break;
    case EnumConstant:
        assert(0);
        break;
    case FunctionType:
        gen.emitFunctionTypeDecl(d);
        break;
    case AliasType:
        gen.emitAliasTypeDecl(d);
        break;
    case Variable:
        gen.emitVarDecl(d, 0);
        out.add(";\n");
        break;
    }
    out.newline();
}

fn void Generator.emitVarDecl(Generator* gen, const Decl* d, u32 indent) {
    string_buffer.Buf* out = gen.out;
    VarDecl* v = cast<VarDecl*>(d);

    out.indent(indent);
    gen.emitTypeRef(v.getTypeRef());
    out.space();
    if (d.getName()) out.add(d.getName());

    QualType qt = d.getType();
    if (qt.isConst() && v.getInit()) {
        Expr* initExpr = v.getInit();
        out.add(" = ");
        gen.emitExpr(initExpr);
    }

    if (v.hasAutoAttr()) {
        if (v.hasAttrAutoFile()) out.add(" @(auto_file)");
        if (v.hasAttrAutoLine()) out.add(" @(auto_line)");
    }
    // Note: dont add ';' because it could also be a function argument
}

fn void Generator.emitTypeRef(Generator* gen, const TypeRef* ref) {
    // Note: arrays are converted to pointers
    const Decl* d = ref.getUserDecl();
    bool is_external = false;
    if (d) is_external = (d.getModule() != gen.mod);

    // On globals print arrays as pointers, on inline function bodies, print as [..]
    if (gen.in_body) {
        ref.printLiteral2(gen.out, is_external, print_expr, gen);
    } else {
        ref.printLiteral(gen.out, is_external, true);
    }
}

fn void print_expr(void* arg, const Expr* e, string_buffer.Buf* out) {
    Generator* gen = arg;
    gen.emitExpr(e);
}

fn void Generator.emitEnumType(Generator* gen, const Decl* d) {
    string_buffer.Buf* out = gen.out;
    EnumTypeDecl* etd = cast<EnumTypeDecl*>(d);

    out.print("type %s enum ", d.getName());
    QualType implType = etd.getImplType();
    implType.print(out);
    out.add(" {\n");

    EnumConstantDecl** constants = etd.getConstants();
    for (u32 i=0; i<etd.getNumConstants(); i++) {
        EnumConstantDecl* ecd = constants[i];
        out.indent(1);
        out.add(ecd.asDecl().getName());
        Expr* initExpr = ecd.getInit();
        if (initExpr) {
            out.add (" = ");
            gen.emitExpr(initExpr);
        }
        out.add(",\n");
    }
    out.add("}\n");
}

fn void Generator.emitFunctionDecl(Generator* gen, const Decl* d, bool as_type) {
    string_buffer.Buf* out = gen.out;
    FunctionDecl* fd = cast<FunctionDecl*>(d);

    if (!as_type) out.add("fn ");
    gen.emitTypeRef(fd.getReturnTypeRef());
    if (!as_type) {
        out.space();
        const char* prefix = fd.getPrefixName();
        if (prefix) {
            out.add(prefix);
            out.add1('.');
        }
        out.add(d.getName());
    }
    out.lparen();

    VarDecl** params = fd.getParams();
    u32 num_params = fd.getNumParams();
    for (u32 i=0; i<num_params; i++) {
        if (i != 0) out.add(", ");
        gen.emitVarDecl(cast<Decl*>(params[i]), 0);
    }
    if (fd.isVariadic()) {
        if (num_params) out.add(", ");
        out.add("...");
    }
    out.add1(')');

    if (fd.isInline()) {
        out.space();
        gen.in_body = true;
        gen.emitStmt(cast<ast.Stmt*>(fd.getBody()), 0, true);
        gen.in_body = false;
        out.newline();
    } else {
        out.add(";\n");
    }
}

fn void Generator.emitFunctionTypeDecl(Generator* gen, const Decl* d) {
    string_buffer.Buf* out = gen.out;
    const FunctionTypeDecl* ftd = cast<FunctionTypeDecl*>(d);
    out.print("type %s fn ", d.getName());
    gen.emitFunctionDecl(cast<Decl*>(ftd.getDecl()), true);
}

fn void Generator.emitAliasTypeDecl(Generator* gen, const Decl* d) {
    string_buffer.Buf* out = gen.out;
    AliasTypeDecl* a = cast<AliasTypeDecl*>(d);
    out.print("type %s ", d.getName());
    gen.emitTypeRef(a.getTypeRef());
    out.add(";\n");
}

fn void Generator.emitStructTypeDecl(Generator* gen, const Decl* d, u32 indent) {
    string_buffer.Buf* out = gen.out;
    StructTypeDecl* std = cast<StructTypeDecl*>(d);
    out.indent(indent);
    if (indent == 0) {
        out.add("type ");
        out.add(d.getName());
        if (std.isStruct()) out.add(" struct");
        else out.add(" union");
    } else {
        if (std.isStruct()) out.add("struct");
        else out.add("union");
        if (d.getNameIdx()) out.print(" %s", d.getName());
    }
    if (std.isOpaque()) {
        out.add(" @(opaque) {}\n");
    } else {
        out.add(" {\n");

        Decl** members = std.getMembers();
        for (u32 i=0; i<std.getNumMembers(); i++) {
            const Decl* m = members[i];
            if (m.isStructType()) {
                gen.emitStructTypeDecl(m, indent+1);
            } else {
                assert(m.isVariable());
                gen.emitVarDecl(m, indent+1);
                out.add(";\n");
            }
        }

        out.indent(indent);
        out.add("}\n");
    }
}

fn void Generator.emitMember(Generator* gen, const Expr* e) {
    string_buffer.Buf* out = gen.out;
    const MemberExpr* m = cast<MemberExpr*>(e);
    const Expr* base = m.getExprBase();
    if (base) {
        gen.emitExpr(base);
    }
    for (u32 i=0; i<m.getNumRefs(); i++) {
        if (i != 0 || base) out.add1('.');
        Ref r = m.getRef(i);
        if (i == 0 && r.decl.getModule() != gen.mod) {
            out.add(r.decl.getFullName());
        } else {
            out.add(r.decl.getName());
        }
    }
}

#if 0
fn void Generator.emitCtv(Generator* /*gen*/, string_buffer.Buf* out, const Expr* e) {
    Value val = ctv_analyser.get_value(e);
    out.print("%s", val.str());
}
#endif

#if 0
fn void Generator.emitDeclName(Generator* gen, string_buffer.Buf* out, const Decl* d) {
    if (d.isVariable()) {
        VarDecl* vd = cast<VarDecl*>(d);
        if (!vd.isGlobal()) {
            out.add(d.getName());
            return;
        }
    }
    //gen.emitCNameMod(out, d, d.getModule());
}

fn void Generator.emitEnum(Generator* gen, Decl* d) {
    EnumTypeDecl* etd = cast<EnumTypeDecl*>(d);
    out.add("typedef enum {\n");
    u32 num_constants = etd.getNumConstants();
    EnumConstantDecl** decls = etd.getConstants();
    for (u32 i=0; i<num_constants; i++) {
        EnumConstantDecl* ecd = decls[i];
        out.indent(1);
        out.add(gen.mod_name);
        out.add1('_');
        out.add(d.getName());
        out.add1('_');
        out.add(ecd.asDecl().getName());
        Expr* ie = ecd.getInit();
        ecd.asDecl().setGenerated();
        if (ie) {
            out.add(" = ");
            gen.emitExpr(out, ie);
        }
        out.add(",\n");
    }
    // add max to ensure size is ok
    QualType implType = etd.getImplType();
    const BuiltinType* bi = implType.getBuiltin();
    out.indent(1);
    out.print("_%s_%s_max = ", gen.mod_name, d.getName());
    switch (bi.getAlignment()) {
    case 1:
        out.add("255");
        break;
    case 2:
        out.add("65535");
        break;
    case 4:
        out.add("4294967295");
        break;
    case 8:
        out.add("18446744073709551615");
        break;
    }
    out.newline();

    out.add("} __attribute__((packed)) ");
    //gen.emitCName(out, d);
    out.add(";\n\n");
}
#endif

