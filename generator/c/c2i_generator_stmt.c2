/* Copyright 2022-2025 Bas van den Berg
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

module c2i_generator;

import ast local;
import string_buffer;

fn void Generator.emitStmt(Generator* gen, ast.Stmt* s, u32 indent, bool newline) {
    string_buffer.Buf* out = gen.out;

    if (newline) {
        if (s.getKind() == StmtKind.Label)
            out.indent(indent - 1);
        else
            out.indent(indent);
    }

    switch (s.getKind()) {
    case Return:
        out.add("return");
        ReturnStmt* r = cast<ReturnStmt*>(s);
        ast.Expr* val = r.getValue();
        if (val) {
            out.space();
            gen.emitExpr(val);
        }
        out.add(";\n");
        break;
    case Expr:
        gen.emitExpr(cast<Expr*>(s));
        if (newline) out.add(";\n");
        break;
    case If:
        IfStmt* i = cast<IfStmt*>(s);
        Stmt* cond = i.getCond();
        bool is_decl = cond.isDecl();
        if (is_decl) {
            // TODO leave out init part
            gen.emitStmt(cond, 0, true);
            out.indent(indent);
            out.add("if (");
            DeclStmt* ds = cast<DeclStmt*>(cond);
            VarDecl* vd = ds.getDecl();
            out.add(vd.asDecl().getName());
            // TODO also add init part
        } else {
            out.add("if (");
            gen.emitStmt(cond, 0, false);
        }
        out.add(") ");
        Stmt* thenStmt = i.getThen();
        gen.emitStmt(thenStmt, indent, false);
        if (!thenStmt.isCompound()) {
            if (!out.endsWith('\n')) out.add1(';');
        }

        Stmt* elseStmt =  i.getElse();
        if (elseStmt) {
            if (thenStmt.isCompound()) {
                out.space();
            } else {
                if (!out.endsWith('\n')) out.newline();
                out.indent(indent);
            }
            out.add("else ");
            gen.emitStmt(elseStmt, indent, false);
            if (!elseStmt.isCompound()) {
                if (!out.endsWith('\n')) out.add1(';');
            }
        }
        out.newline();
        break;
    case While:
        WhileStmt* w = cast<WhileStmt*>(s);
        Stmt* cond = w.getCond();
        bool is_decl = cond.isDecl();
        if (is_decl) {
            // TODO leave out init part
            gen.emitStmt(cond, 0, true);
            out.indent(indent);
            out.add("while (");
            DeclStmt* ds = cast<DeclStmt*>(cond);
            VarDecl* vd = ds.getDecl();
            out.add(vd.asDecl().getName());
            // TODO also add init part
        } else {
            out.add("while (");
            gen.emitStmt(cond, 0, false);
        }
        out.add(") ");
        Stmt* body = w.getBody();
        gen.emitStmt(body, indent, false);
        if (!body.isCompound()) {
            out.add1(';');
        }
        out.newline();
        break;
    case For:
        ForStmt* f = cast<ForStmt*>(s);
        out.add("for (");
        Stmt* initStmt = f.getInit();
        if (initStmt) {
            gen.emitStmt(initStmt, 0, false);
        }
        out.add1(';');
        if (f.getCond()) {
            out.space();
            gen.emitExpr(f.getCond());
        }
        out.add1(';');
        Expr* cont = f.getCont();
        if (cont) {
            out.space();
            gen.emitExpr(cont);
        }
        out.add(") ");
        Stmt* body = f.getBody();
        gen.emitStmt(body, indent, false);
        if (!body.isCompound()) {
            out.add1(';');
        }
        out.newline();
        break;
    case Switch:
        gen.emitSwitchStmt(s, indent);
        break;
    case Break:
        out.add("break;\n");
        break;
    case Continue:
        out.add("continue;\n");
        break;
    case Fallthrough:
        out.add("fallthrough;\n");
        break;
    case Label:
        LabelStmt* ls = cast<LabelStmt*>(s);
        ast.Stmt* stmt = ls.getStmt();
        out.add(ls.getName());
        out.add1(':');
        if (!stmt || stmt.isDecl()) {
            out.add1(';');
        }
        out.newline();
        if (stmt) {
            gen.emitStmt(stmt, indent, true);
        }
        break;
    case Goto:
        GotoStmt* g = cast<GotoStmt*>(s);
        out.add("goto ");
        out.add(g.getName());
        out.add(";\n");
        break;
    case Compound:
        CompoundStmt* c = cast<CompoundStmt*>(s);

        out.add("{\n");

        u32 count = c.getCount();
        Stmt** stmts = c.getStmts();
        for (u32 i=0; i<count; i++) {
            gen.emitStmt(stmts[i], indent+1, true);
        }

        out.indent(indent);
        out.add1('}');
        if (newline) out.newline();
        break;
    case Decl:
        DeclStmt* ds = cast<DeclStmt*>(s);
        VarDecl* vd = ds.getDecl();
        Decl* d = cast<Decl*>(vd);

        //if (vd.hasLocalQualifier()) out.add("local ");
        gen.emitTypeRef(vd.getTypeRef());
        out.space();
        out.add(d.getName());
        const Expr* ie = vd.getInit();
        if (ie) {
            out.add(" = ");
            gen.emitExpr(ie);
        }
        if (newline) out.add(";\n");
        break;
    case Asm:
        //gen.emitAsmStmt(cast<AsmStmt*>(s), indent);
        break;
    case Assert:
#if 0
        // TODO: generate actual assert statement?
        AssertStmt* a = cast<AssertStmt*>(s);
        source_mgr.Location loc = gen.sm.getLocation(a.getLoc());
        const char* funcname = gen.cur_function.asDecl().getFullName();

        out.add("(");
        Expr* inner = a.getInner();
        gen.emitExpr(out, inner);
        out.print(") || c2_assert(\"%s\", %d, \"%s\", \"", loc.filename, loc.line, funcname);
        // encode expression as a string
        string_buffer.Buf* str = string_buffer.create(128, false, 0);
        inner.printLiteral(str);
        out.encodeBytes(str.data(), str.size(), '"');
        str.free();
        out.add("\");\n");
#endif
        break;
    }
}

fn void Generator.emitSwitchStmt(Generator* gen, Stmt* s, u32 indent) {
/*
    string_buffer.Buf* out = gen.out;

    SwitchStmt* sw = cast<SwitchStmt*>(s);
    const u32 num_cases = sw.getNumCases();
    SwitchCase** cases = sw.getCases();
*/
    // TODO
}

