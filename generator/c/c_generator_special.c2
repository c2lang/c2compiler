/* Copyright 2022-2025 Bas van den Berg
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

module c_generator;

import ast;
import build_file;
import build_target;
import component;
import console;
import constants;
import file_utils;
import module_list;
import string_buffer;
import string_list;
import target_info;

import string;
import stdio;

fn void Generator.createMakefile(Generator* gen,
                                 const char* output_dir,
                                 component.List* comps,
                                 const module_list.List* allmodules,
                                 string_list.List* asm_files,
                                 bool enable_asserts,
                                 u32 libc_name)
{
    string_buffer.Buf* out = gen.out;
    out.clear();
    out.add("# This makefile is auto-generated, any modifications will be lost\n\n");

    const char* cc = "gcc";
    const char* cflags = nil;
    const char* ldflags = "";
    const char* ldflags2 = "";
    const char* asmflags = "";

    if (gen.targetInfo.sys == target_info.System.FreeBSD
    ||  gen.targetInfo.sys == target_info.System.OpenBSD) {
        cc = "clang";
    }
    if (gen.build_info) {
        const build_file.Info* info = gen.build_info;
        if (info.getCC()) cc = info.getCC();
        if (info.getCFlags()) cflags = info.getCFlags();
        if (info.getLdFlags()) ldflags = info.getLdFlags();
        if (info.getLdFlags2()) ldflags2 = info.getLdFlags2();
        if (info.getAsmFlags()) asmflags = info.getAsmFlags();
    }

    out.print("CC=%s\n", cc);

    out.add("CFLAGS=-Wall -Wextra -Wno-unused -Wno-switch\n");
    out.add("CFLAGS+=-Wno-unused-parameter -Wno-missing-field-initializers -Wno-format-zero-length\n");
    out.add("CFLAGS+=-pipe -std=c99 -funsigned-char\n");
    if (gen.fast_build)
        out.add("CFLAGS+=-O0 -g\n");
    else
        out.add("CFLAGS+=-O2 -g\n");

    if (!enable_asserts) out.add("CFLAGS+=-DNDEBUG\n");
    if (cflags) out.print("CFLAGS+=%s\n", cflags);

    out.newline();

    out.print("ASMFLAGS=%s\n", asmflags ? asmflags : "");
    out.print("LDFLAGS=%s\n", ldflags ? ldflags : "");
    out.print("LDFLAGS2=%s\n", ldflags2 ? ldflags2 : "");
    out.newline();

    if (gen.asan) {
        out.add("CFLAGS+=-fsanitize=address -D__ASAN__ -O0\n");
        out.add("LDFLAGS+=-fsanitize=address\n");
    }
    if (gen.msan) {
        out.add("CFLAGS+=-fsanitize=memory -D__MSAN__ -O0\n");
        out.add("LDFLAGS+=-fsanitize=memory\n");
    }
    if (gen.ubsan) {
        out.add("CFLAGS+=-fsanitize=undefined -D__UBSAN__ -O0\n");
        out.add("LDFLAGS+=-fsanitize=undefined\n");
    }

    char[128] target_name;

    if (gen.fast_build) {
        // dont add *.c, but add (handy for switching between fast/normal build
        //out.add("objects := $(patsubst %.c,%.o,$(wildcard *.c))\n");
        out.add("objects := ");
        for (u32 i=0; i<allmodules.length(); i++) {
            const ast.Module* m = allmodules.at(i);
            if (!m.isExternal() && m.isUsed()) out.print(" %s.o", m.getName());
        }
        out.newline();
    } else {
        out.add("objects := build.o\n");
    }
    out.add("headers := $(wildcard *.h)\n\n");

    out.add("%.o: %.c\n");
    out.print("\t\t$(CC) $(CFLAGS) -o $@ -c $<\n\n");

    switch (gen.target_kind) {
    case Image:
    case Executable:
        string.strcpy(target_name, gen.target);
        out.print("all: ../%s\n\n", target_name);

        out.print("../%s: $(objects) $(headers)\n", target_name);

        for (u32 i=0; i<asm_files.length(); i++) {
            const char* filename = asm_files.get(i);
            // TODO use same way as above, add $(asm_objs) to $(objects)
            // TODO use $(AS)
            // TODO strip filepath
            out.print("\t\t$(CC) $(ASMFLAGS) -o %s.o -c ../../../%s\n", filename, filename);
        }

        out.print("\t\t$(CC) $(LDFLAGS) -o ../%s $(objects)", target_name);

        // TODO solve in Makefile, just add to asm_objects (also fixed for Static/Dynamic libs then)
        for (u32 i=0; i<asm_files.length(); i++) {
            const char* filename = asm_files.get(i);
            out.print(" %s.o", filename);
        }

        const char* triplet = gen.targetInfo.str();

        // interate Components in reverse order
        for (u32 i=comps.size(); i != 0; i--) {
            component.Component* c = comps.get(i-1);
            if (!c.isExternal()) continue;
            const char* linkname = c.getLinkName();
            if (gen.targetInfo.sys == target_info.System.FreeBSD
            ||  gen.targetInfo.sys == target_info.System.OpenBSD) {
                // ignore "dl" library on BSD systems: libc handles dlopen etc.
                if (linkname && !string.strcmp(linkname, "dl"))
                    continue;
            }
            if (c.isStaticLib()) {
                out.print(" -L%s/%s", c.getPath(), triplet);
                // special case for static libc
                if (c.getNameIdx() == libc_name) out.add(" --static");
            }
            if (linkname) out.print(" -l%s", linkname);
        }
        out.add(" $(LDFLAGS2)\n");
        out.newline();
        break;
    case StaticLibrary:
        stdio.sprintf(target_name, "lib%s.a", gen.target);
        out.print("all: ../%s\n\n", target_name);

        out.print("../%s: $(objects) $(headers)\n", target_name);
        out.print("\t\tar rcs ../%s $(objects)\n", target_name);
        break;
    case DynamicLibrary:
        out.add("CFLAGS+=-fPIC\n");
        if (gen.targetInfo.sys == target_info.System.Darwin) {
            stdio.sprintf(target_name, "lib%s.dylib", gen.target);
        } else {
            stdio.sprintf(target_name, "lib%s.so", gen.target);
        }
        out.print("all: ../%s\n\n", target_name);

        out.print("../%s: $(objects) $(headers)\n", target_name);

        if (gen.targetInfo.sys == target_info.System.Darwin) {
            out.print("\t\t$(CC) $(LDFLAGS) $(objects) -shared -o ../%s $(LDFLAGS2)\n", target_name);
        } else {
            out.print("\t\t$(CC) $(LDFLAGS) $(objects) -shared -o ../%s -Wl,-soname,%s.1 -Wl,--version-script=exports.version $(LDFLAGS2)\n",
                target_name, target_name);
        }
        break;
    }

    out.newline();
    out.add("symbols:\n");
    out.add("\t\tnm -g");
    if (build_target.has_dynamic(gen.target_kind)) out.add(" -D");
    out.print(" -C --defined-only ../%s\n\n", target_name);

    out.add("clean:\n");
    out.print("\t\trm -f *.o *.a ../%s\n\n", target_name);

    gen.write(output_dir, "Makefile", gen.out);
}

fn void Generator.createExportsFile(Generator* gen, const char* output_dir, component.Component* mainComp) {
    if (gen.target_kind != build_target.Kind.DynamicLibrary) return;

    string_buffer.Buf* out = gen.out;
    out.clear();

    out.add("LIB_1.0 {\n");
    out.add("\tglobal:\n");

    // iterate all mods in main Component
    module_list.List* mods = mainComp.getModules();
    u32 count = mods.length();

    for (u32 i=0; i<count; i++) {
        const ast.SymbolTable* symbols = mods.at(i).getSymbols();
        ast.Decl** decls = symbols.getDecls();
        u32 num_symbols = symbols.size();
        for (u32 j=0; j<num_symbols; j++) {
            ast.Decl* d = decls[j];
            if (!d.isExported()) continue;
            if (!d.isFunction() && !d.isVariable()) continue;
            out.add("\t\t");
            gen.emitCNameMod(out, d, d.getModule());
            out.add(";\n");
        }
    }

    out.add("\tlocal:\n\t\t*;\n");
    out.add("};\n");

    gen.write(output_dir, "exports.version", gen.out);
}

fn void Generator.generateC2TypesHeader(Generator* gen) {
    string_buffer.Buf* out = gen.header;
    out.clear();
    out.add("// WARNING: this file is auto-generated by the C2 compiler.\n");
    out.add("// Any changes you make might be lost!\n\n");

    out.add("#ifndef C2TYPES_H\n");
    out.add("#define C2TYPES_H\n");

    out.newline();
    out.add("#ifdef __cplusplus\nextern \"C\" {\n#endif\n\n");
    out.add("#define NULL ((void*)0)\n");
#if 1
    // __builtin_offsetof is supported by gcc and clang and is necessary
    // for -fsanitary=undefined to prevent null pointer arithmetics warnings.
    out.add("#define offsetof(type, member) __builtin_offsetof(type, member)\n");
#else
    out.add("#define offsetof(type, member) ((unsigned long) &((type *)0)->member)\n");
#endif
    out.add("#define to_container(type, member, ptr) ((type *)((char *)(ptr)-offsetof(type, member)))\n\n");

    out.newline();
    // NOTE: 64-bit only for now
    out.add("typedef signed char int8_t;\n");
    out.add("typedef unsigned char uint8_t;\n");
    out.add("typedef signed short int int16_t;\n");
    out.add("typedef unsigned short int uint16_t;\n");
    out.add("typedef signed int int32_t;\n");
    out.add("typedef unsigned int uint32_t;\n");
    out.add("typedef signed long int64_t;\n");
    out.add("typedef unsigned long uint64_t;\n");
    out.newline();
    out.add("#ifdef __cplusplus\n}\n#endif\n\n");

    out.add("#endif\n");

    char[constants.Max_path] fullname;
    stdio.snprintf(fullname, elemsof(fullname), "%s/c2types.h", gen.results_dir);
    file_utils.Writer writer;
    if (!writer.write(fullname, out.data(), out.size())) {
        console.error("cannot write to %s: %s", fullname, writer.getError());
    }
    out.clear();
}

