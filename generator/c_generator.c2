/* Copyright 2022-2025 Bas van den Berg
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

module c_generator;

import ast local;
import build_file;
import build_target;
import c2i_generator;
import component;
import constants;
import console;
import ctv_analyser;
import dep_finder;
import file_utils;
import linked_list;
import manifest_writer;
import module_list;
import process_utils;
import source_mgr;
import string_buffer;
import string_list;
import string_pool;
import string_utils;
import target_info;

import string;
import stdlib;
import stdio;

type Fragment struct {
    string_buffer.Buf* buf;
    linked_list.Element list;
}

fn Fragment* Fragment.create() {
    Fragment* f = stdlib.malloc(sizeof(Fragment));
    f.buf = string_buffer.create(128, false, 3);
    return f;
}

fn void Fragment.clear(Fragment* f) {
    f.buf.clear();
}

fn void Fragment.free(Fragment* f) {
    f.buf.free();
    stdlib.free(f);
}


type Generator struct {
    string_buffer.Buf* out;
    const char* target;
    build_target.Kind target_kind;
    const char* results_dir;
    const char* output_dir;     // output/<target>
    const char* cgen_dir;       // output/<target>/cgen
    source_mgr.SourceMgr* sm;
    const build_file.Info* build_info;
    const target_info.Info* targetInfo;
    bool enable_asserts;
    bool fast_build;

    // set during generation
    bool cur_external;  // whether current component is external
    FunctionDecl* cur_function; // needed for assert
    const char* mod_name; // set per module
    string_list.List imports;  // used to filter out duplicate imports (from different ASTs)
    DeclList decls;
    dep_finder.Finder deps;

    Decl* mainFunc;

    // to filter exceptions
    u32 stdargName;
    bool isDarwinStdio;
    u32 stdioName;
    u32 stdinName;
    u32 stdoutName;
    u32 stderrName;

    Module* mod;

    string_buffer.Buf* header;

    // list of fragments
    linked_list.Element free_list;
    linked_list.Element used_list;  // for c-file
    linked_list.Element header_fragments; // for header-file (if used)
}


const char[] Dir = "cgen";
const char[] LogFile = "build.log";

fn string_buffer.Buf* Generator.getBuf(Generator* gen, bool is_public) {
    // TODO just have 2 pointers, one for publics, one for non-publics. Might point to same buffer?
    string_buffer.Buf* out = gen.out;
    if (gen.fast_build && (is_public || gen.cur_external)) out = gen.header;
    return out;
}

fn Fragment* Generator.getFragment(Generator* gen) {
    if (gen.free_list.isEmpty()) {
        return Fragment.create();
    }

    linked_list.Element* e = gen.free_list.popFront();
    Fragment* f = to_container(Fragment, list, e);
    f.clear();
    return f;
}

fn void Generator.addFragment(Generator* gen, Fragment* f, bool is_public) {
    if (gen.fast_build && (is_public || gen.cur_external)) {
        gen.header_fragments.addTail(&f.list);
    } else {
        gen.used_list.addTail(&f.list);
    }
}

fn void Generator.freeFragment(Generator* gen, Fragment* f) {
    gen.free_list.addTail(&f.list);
}


fn void Generator.emitCtv(Generator* /*gen*/, string_buffer.Buf* out, const Expr* e) {
    Value val = ctv_analyser.get_value(e);
    switch (val.kind) {
    case SignedDecimal:
        out.print("%d", val.svalue);
        break;
    case UnsignedDecimal:
        out.print("%d", val.uvalue);
        break;
    case Float:
        out.print("%f", val.fvalue);
        break;
    }
}

fn void Generator.emitCName(Generator* gen, string_buffer.Buf* out, const Decl* d) {
    gen.emitCNameMod(out, d, gen.mod);
}

fn void Generator.emitCNameMod(Generator* /*gen*/, string_buffer.Buf* out, const Decl* d, Module* mod) {
    if (d.isExternal()) {
        const char* cname = d.getCName();
        if (cname) {
            out.add(cname);
        } else {
            out.add(d.getName());
        }
        return;
    }
    out.add(mod.getName());
    out.add1('_');
    if (d.isFunction()) {
        FunctionDecl* fd = cast<FunctionDecl*>(d);
        Ref* prefix = fd.getPrefix();
        if (prefix) {
            out.add(ast.idx2name(prefix.name_idx));
            out.add1('_');
        }
    }
    if (d.isEnumConstant()) {
        QualType qt = d.getType();
        EnumType* et = cast<EnumType*>(qt.getType());
        out.add(et.getName());
        out.add1('_');
    }
    out.add(d.getName());
}

fn void Generator.emitDeclName(Generator* gen, string_buffer.Buf* out, const Decl* d) {
    if (d.isVariable()) {
        VarDecl* vd = cast<VarDecl*>(d);
        if (!vd.isGlobal()) {
            out.add(d.getName());
            return;
        }
    }
    gen.emitCNameMod(out, d, d.getModule());
}

fn void Generator.emitEnum(Generator* gen, string_buffer.Buf* out, Decl* d) {
    EnumTypeDecl* etd = cast<EnumTypeDecl*>(d);
    out.add("typedef enum {\n");
    // set generated, otherwise constant self-ref goes wrong
    d.setGenerated();
    u32 num_constants = etd.getNumConstants();
    EnumConstantDecl** decls = etd.getConstants();
    for (u32 i=0; i<num_constants; i++) {
        EnumConstantDecl* ecd = decls[i];
        out.indent(1);
        out.add(gen.mod_name);
        out.add1('_');
        out.add(d.getName());
        out.add1('_');
        out.add(ecd.asDecl().getName());
        Expr* ie = ecd.getInit();
        ecd.asDecl().setGenerated();
        if (ie) {
            out.add(" = ");
            gen.emitExpr(out, ie);
        }
        out.add(",\n");
    }
    // add max to ensure size is ok
    QualType implType = etd.getImplType();
    const BuiltinType* bi = implType.getBuiltin();
    out.indent(1);
    out.print("_%s_%s_max = ", gen.mod_name, d.getName());
    switch (bi.getAlignment()) {
    case 1:
        out.add("255");
        break;
    case 2:
        out.add("65535");
        break;
    case 4:
        out.add("4294967295");
        break;
    case 8:
        out.add("18446744073709551615");
        break;
    }
    out.newline();

    out.add("} __attribute__((packed)) ");
    gen.emitCName(out, d);
    out.add(";\n\n");
}

const char*[] builtinType_cnames = {
    "char",
    "int8_t",
    "int16_t",
    "int32_t",
    "int64_t",
    "uint8_t",
    "uint16_t",
    "uint32_t",
    "uint64_t",
    "float",
    "double",
    "ssize_t",
    "size_t",
    "bool",
    "void",
}

static_assert(elemsof(BuiltinKind), elemsof(builtinType_cnames));

fn void Generator.emitGlobalVarTypePre(Generator* gen, string_buffer.Buf* out, QualType qt) {
    if (gen.cur_external && qt.isArray()) {
        // convert to pointer
        ArrayType* at = cast<ArrayType*>(qt.getType());
        gen.emitGlobalVarTypePre(out, at.getElemType());
        out.add1('*');
    } else {
        gen.emitTypePre(out, qt);
    }
}

fn void Generator.emitTypePre(Generator* gen, string_buffer.Buf* out, QualType qt) {
    Decl* decl = nil;

    if (qt.isConst()) out.add("const ");
    if (qt.isVolatile()) out.add("volatile ");

    switch (qt.getKind()) {
    case Builtin:
        BuiltinType* bt = cast<BuiltinType*>(qt.getType());
        out.add(builtinType_cnames[bt.getKind()]);
        return;
    case Pointer:
        PointerType* pt = cast<PointerType*>(qt.getType());
        gen.emitTypePre(out, pt.getInner());
        out.add1('*');
        return;
    case Array:
        ArrayType* at = cast<ArrayType*>(qt.getType());
        gen.emitTypePre(out, at.getElemType());
        return;
    case Struct:
        StructType* st = cast<StructType*>(qt.getType());
        StructTypeDecl* std = st.getDecl();
        if (std.hasAttrNoTypeDef()) {
            out.add(std.isStruct() ? "struct " : "union ");
        }

        decl = cast<Decl*>(st.getDecl());
        break;
    case Enum:
        EnumType* et = cast<EnumType*>(qt.getType());
        decl = cast<Decl*>(et.getDecl());
        break;
    case Function:
        FunctionType* ft = cast<FunctionType*>(qt.getType());
        decl = cast<Decl*>(ft.getDecl());
        break;
    case Alias:
        AliasType* at = cast<AliasType*>(qt.getType());
        decl = cast<Decl*>(at.getDecl());
        break;
    case Module:
        assert(0);
        return;
    }

    gen.emitCNameMod(out, decl, decl.getModule());
}

fn void Generator.emitGlobalVarTypePost(Generator* gen, string_buffer.Buf* out, QualType qt) {
    if (!qt.isArray()) return;
    if (gen.cur_external) return;
    gen.emitTypePost(out, qt);
}

fn void Generator.emitTypePost(Generator* gen, string_buffer.Buf* out, QualType qt) {
    if (!qt.isArray()) return;
    ArrayType* at = cast<ArrayType*>(qt.getType());

    out.add1('[');
    if (at.hasSize()) out.print("%d", at.getSize());
    out.add1(']');
    gen.emitTypePost(out, at.getElemType());
}

fn void Generator.genDeclIfNeeded(Generator* gen, Decl* d) {
    if (d.isGenerated()) return;

    if (d.isVariable()) {
        VarDecl* vd = cast<VarDecl*>(d);
        if (!vd.isGlobal()) return;
    }

    gen.emitGlobalDecl(d);
}

fn void Generator.genTypeIfNeeded(Generator* gen, QualType qt, bool full) {
    Decl* d = nil;

    switch (qt.getKind()) {
    case Builtin:
        return;
    case Pointer:
        PointerType* pt = cast<PointerType*>(qt.getType());
        gen.genTypeIfNeeded(pt.getInner(), false);
        return;
    case Array:
        ArrayType* at = cast<ArrayType*>(qt.getType());
        gen.genTypeIfNeeded(at.getElemType(), true);
        return;
    case Struct:
        StructType* st = cast<StructType*>(qt.getType());
        if (!full) return;
        d = cast<Decl*>(st.getDecl());
        break;
    case Enum:
        EnumType* et = cast<EnumType*>(qt.getType());
        d = cast<Decl*>(et.getDecl());
        break;
    case Function:
        FunctionType* et = cast<FunctionType*>(qt.getType());
        d = cast<Decl*>(et.getDecl());
        break;
    case Alias:
        AliasType* at = cast<AliasType*>(qt.getType());
        d = cast<Decl*>(at.getDecl());
        break;
    case Module:
        assert(0);
        return;
    }

    if (!d.isGenerated()) gen.emitGlobalDecl(d);
}

fn void Generator.emitStructMember(Generator* gen, string_buffer.Buf* out, Decl* d, u32 indent) {
    if (d.isVariable()) {
        // check if full/pointer dep
        //QualType qt = d.getType();
        // TODO canon for AliasType
        gen.genTypeIfNeeded(d.getType(), true);

        out.indent(indent);
        gen.emitTypePre(out, d.getType());
        out.space();
        if (d.getNameIdx()) out.add(d.getName());
        gen.emitTypePost(out, d.getType());

        VarDecl* vd = cast<VarDecl*>(d);
        Expr* bitfield = vd.getBitfield();
        if (bitfield) {
            out.add(" : ");
            // C does not allow using constants here, so generate CTV Value
            gen.emitCtv(out, bitfield);
        }
        out.add(";\n");
    } else {
        assert(d.isStructType());
        gen.emitStruct(out, d, indent);
    }
}

fn void Generator.emitStruct(Generator* gen, string_buffer.Buf* out, Decl* d, u32 indent) {
    StructTypeDecl* std = cast<StructTypeDecl*>(d);
    if (std.isGlobal()) {
        if (std.isStruct()) out.add("struct ");
        else out.add("union ");
        gen.emitCName(out, d);
        if (!std.hasAttrNoTypeDef()) out.add1('_'); // either generate 'struct stat_' or 'struct stat'
        out.add(" {\n");
    } else {
        out.indent(indent);
        if (std.isStruct()) out.add("struct");
        else out.add("union");
        out.add(" {\n");
    }

    u32 num_members = std.getNumMembers();
    Decl** members = std.getMembers();
    for (u32 i=0; i<num_members; i++) {
        gen.emitStructMember(out, members[i], indent+1);
    }

    if (std.isGlobal()) {
        out.add("}");
        if (std.isPacked()) out.add(" __attribute__((packed))");
        out.add(";\n\n");
    } else {
        out.indent(indent);
        out.add1('}');
        if (d.getNameIdx()) {
            out.space();
            out.add(d.getName());
        }
        out.add(";\n");
    }
}

fn void Generator.emitFunctionType(Generator* gen, string_buffer.Buf* out, Decl* d) {
    FunctionTypeDecl* ftd = cast<FunctionTypeDecl*>(d);
    FunctionDecl* fd = ftd.getDecl();
    fd.asDecl().setGenerated();

    out.add("typedef ");
    gen.emitTypePre(out, fd.getRType());
    out.add(" (*");
    gen.emitCName(out, d);
    out.add(")(");
    u32 num_params = fd.getNumParams();
    VarDecl** params = fd.getParams();
    for (u32 i=0; i<num_params; i++) {
        Decl* arg = cast<Decl*>(params[i]);
        if (i != 0) out.add(", ");
        gen.emitTypePre(out, arg.getType());
        const char* name = arg.getName();
        out.space();
        if (name) out.add(name);
        else out.print("_arg%d", i);
    }
    if (fd.isVariadic()) {
        if (num_params) out.add(", ");
        out.add("...");
    }
    if (num_params == 0 && !fd.isVariadic()) out.add("void");
    out.add(")");
    if (d.hasAttrUnused()) out.add(" __attribute__((unused))");
    out.add(";\n\n");
}

fn void Generator.emitAliasType(Generator* gen, string_buffer.Buf* out, Decl* d) {
    // For now, just generate canonicalType as RHS
    QualType qt = d.getType();
    qt = qt.getCanonicalType(); // just generate final type
    out.add("typedef ");
    gen.emitTypePre(out, qt);
    gen.emitTypePost(out, qt);
    out.space();
    gen.emitCName(out, d);
    out.add(";\n\n");
}

fn bool emitAsDefine(const VarDecl* vd) {
    const Decl* d = cast<Decl*>(vd);
    QualType qt = d.getType();
    QualType canon = qt.getCanonicalType();
    if (vd.isAddrUsed()) return false;

    const Expr* initExpr = vd.getInit();
    if (!initExpr) return false;

    if (canon.isArray()) {
        ArrayType* at = canon.getArrayType();
        QualType et = at.getElemType();
        if (!et.isBuiltin()) return false;
        if (et.isVolatile()) return false;
        if (!et.isConst()) return false;

        if (initExpr.isStringLiteral()) return true;
    } else {
        if (!qt.isConst()) return false;
        if (qt.isVolatile()) return false;
        if (canon.isBuiltin()) return true;
    }
    return false;
}

fn bool Generator.emitGlobalVarDecl(Generator* gen, string_buffer.Buf* out, Decl* d) {
    VarDecl* vd = cast<VarDecl*>(d);

    QualType qt = d.getType();

    if (gen.isDarwinStdio) {
        // Darwin workaround, since it defines stdin/out/err as #define stdin __stdinp, etc
        u32 name = d.getNameIdx();
        if (name == gen.stdinName) {
            out.add("#define stdin __stdinp\n");
            out.add("extern FILE* __stdinp;\n");
            out.newline();
            return true;
        }
        if (name == gen.stdoutName) {
            out.add("#define stdout __stdoutp\n");
            out.add("extern FILE* __stdoutp;\n");
            out.newline();
            return true;
        }
        if (name == gen.stderrName) {
            out.add("#define stderr __stderrp\n");
            out.add("extern FILE* __stderrp;\n");
            out.newline();
            return true;
        }
    }

    // emit 'simple'-constants as a defines
    if (emitAsDefine(vd)) {
        out.add("#define ");
        gen.emitCName(out, d);
        out.space();
        Expr* ie = vd.getInit();
        if (ie.isCall()) {
            gen.emitPureFunctionCall(out, ie);
        } else {
            gen.emitExpr(out, ie);
        }
        out.newline();
        return true;
    }

    /*
        Normal build:
        - cur_external -> extern (in .c)
        - !exported -> static (in .c)
        - else _ (in .c)

        Fast build:
        - cur_external -> extern (in .h)
        - non-public: static in .c
        - public: _ in .c, extern in .h
    */

    bool emit_header = gen.fast_build && d.isPublic();

    if (gen.cur_external) {
        out.add("extern ");
    } else {
        if (!d.isExported() && !emit_header) out.add("static ");
    }

    gen.emitGlobalVarTypePre(out, qt);
    out.space();
    gen.emitCName(out, d);
    gen.emitGlobalVarTypePost(out, qt);

    if (vd.hasAttrWeak()) out.add(" __attribute__((weak))");

    const char* section = d.getSection();
    if (section) {
        out.space();
        gen.emitSectionAttr(out, section);
    }

    Expr* ie = vd.getInit();
    if (!gen.cur_external) {
        out.add(" = ");
        if (ie) {
            if (ie.isCall()) {
                gen.emitPureFunctionCall(out, ie);
            } else {
                gen.emitExpr(out, ie);
            }
        } else {
            // auto-initialize
            gen.emitAutoInit(out, qt);
        }
    }
    out.add(";\n\n");

    if (emit_header) {
        Fragment* f = gen.getFragment();
        out = f.buf;

        out.add("extern ");
        gen.emitGlobalVarTypePre(out, qt);
        out.space();
        gen.emitCName(out, d);
        gen.emitGlobalVarTypePost(out, qt);

        if (vd.hasAttrWeak()) out.add(" __attribute__((weak))");

        if (section) {
            out.space();
            gen.emitSectionAttr(out, section);
        }
        out.add(";\n");
        gen.addFragment(f, true);
    }

    return false;    // put this part in .c file
}

fn void Generator.emitSectionAttr(Generator* gen, string_buffer.Buf* out, const char* name) {
    out.print("__attribute__((section(\"%s\")))", name);
}

fn void Generator.emitAutoInit(Generator* gen, string_buffer.Buf* out, QualType qt) {
    qt = qt.getCanonicalType();
    if (qt.isArray() || qt.isStruct()) {
        out.add("{ }");
    } else if (qt.isPointer()) {
        out.add("NULL");
    } else {
        out.add1('0');
    }
}

fn void Generator.on_forward_structs(void* arg, Decl* d) {
    Generator* gen = arg;

    if (!d.isStructType()) return;
    if (gen.cur_external && !d.isUsed()) return;

    gen.emitForwardStructDecl(d, gen.getBuf(d.isPublic()));
}

fn void Generator.emitForwardStructDecl(Generator* gen, Decl* d, string_buffer.Buf* out) {
    StructTypeDecl* std = cast<StructTypeDecl*>(d);
    if (std.hasAttrNoTypeDef()) return;

    out.add("typedef ");
    if (std.isStruct()) out.add("struct");
    else out.add("union");
    out.space();
    gen.emitCName(out, d);
    out.add("_ ");
    gen.emitCName(out, d);
    out.add(";\n");
}

fn void Generator.emitGlobalDecl(Generator* gen, Decl* d) {
    assert(!d.isGenerated());

    // dont generate unused external decls
    if (gen.cur_external && !d.isUsed()) {
        d.setGenerated();
        return;
    }

    switch (d.getKind()) {
    case Function:
        FunctionDecl* fd = cast<FunctionDecl*>(d);
        if (fd.isTemplate()) break;

        string_buffer.Buf* out = gen.getBuf(d.isPublic());
        gen.gen_func_proto(fd, out);
        if (fd.isInline()) {
            out.newline();
            string_buffer.Buf* saved = gen.out;
            gen.out = out;
            gen.emitStmt(cast<ast.Stmt*>(fd.getBody()), 0, true);
            gen.out = saved;
            out.newline();
        } else {
            out.add(";\n");
        }
        break;
    case Import:
        assert(gen.fast_build);
        ImportDecl* id = cast<ImportDecl*>(d);
        Module* dest = id.getDest();

        // put self include in .c file, otherwise put in header if used publicly
        string_buffer.Buf* out = gen.getBuf(dest != gen.mod && d.isUsedPublic());
        out.print("#include \"%s.h\"\n", dest.getName());
        break;
    case StructType:
        StructTypeDecl* std = cast<StructTypeDecl*>(d);
        Fragment* f = gen.getFragment();
        gen.emitStruct(f.buf, d, 0);
        gen.addFragment(f, d.isPublic() && !std.isOpaque());
        break;
    case EnumType:
        Fragment* f = gen.getFragment();
        gen.emitEnum(f.buf, d);
        gen.addFragment(f, d.isPublic());
        break;
    case EnumConstant:
        // Can happen, we need to generate the containing enum then
        // TODO
        console.warn("TODO gen enum %d", d.isGenerated());
/*
        // Q: move this part to enum_constant_decl.c2? or ast_utils?
        QualType qt = d.getType();
        EnumType* et = qt.getEnumTypeOrNil();
        EnumTypeDecl* etd = et.getDecl();
*/
        break;
    case FunctionType:
        Fragment* f = gen.getFragment();
        gen.emitFunctionType(f.buf, d);
        gen.addFragment(f, d.isPublic());
        break;
    case AliasType:
        Fragment* f = gen.getFragment();
        gen.emitAliasType(f.buf, d);
        gen.addFragment(f, d.isPublic());
        break;
    case Variable:
        Fragment* f = gen.getFragment();
        bool in_header = gen.emitGlobalVarDecl(f.buf, d);
        gen.addFragment(f, in_header);
        break;
    }

    d.setGenerated();
    gen.flattenFragments();
}

fn void Generator.flattenFragments(Generator* gen) {
    while (!gen.used_list.isEmpty()) {
        linked_list.Element* e = gen.used_list.popFront();
        Fragment* f = to_container(Fragment, list, e);
        gen.out.add2(f.buf.data(), f.buf.size());
        gen.freeFragment(f);
    }

    if (!gen.fast_build) {
        assert(gen.header_fragments.isEmpty());
    }

    while (!gen.header_fragments.isEmpty()) {
        linked_list.Element* e = gen.header_fragments.popFront();
        Fragment* f = to_container(Fragment, list, e);
        gen.header.add2(f.buf.data(), f.buf.size());
        gen.freeFragment(f);
    }
}

fn void Generator.on_decl(void* arg, Decl* d) {
    if (d.isGenerated()) return;

    Generator* gen = arg;

    if (d.isImport()) {
        // no need to generate includes in normal build since everything is in a single file
        if (!gen.fast_build) return;
        // dont generate include "x.h" in x.h
        ImportDecl* id = cast<ImportDecl*>(d);
        if (gen.cur_external && gen.mod == id.getDest()) return;
    }

    gen.deps.check(d);  // generate dependencies first

    gen.emitGlobalDecl(d);
}

fn void Generator.on_ast_decl(void* arg, AST* a) {
    a.visitDecls(Generator.on_decl, arg);
}

fn void Generator.gen_func_proto(Generator* gen, FunctionDecl* fd, string_buffer.Buf* out) {
    Decl* d = cast<Decl*>(fd);

    // template are generated as late as possible, since the Type might not be known yet
    if (fd.isTemplate()) return;

    VarDecl** params = fd.getParams();
    u32 num_params = fd.getNumParams();

    bool has_attr = false;
    const char* section = d.getSection();
    if (section) {
        has_attr = true;
        gen.emitSectionAttr(out, section);
        out.space();
    }
    if (fd.hasAttrInline()) {
        if (has_attr) out.space();
        // Note: inline functions are always static
        //out.add("__inline__ ");
        out.add("static inline ");
        has_attr = true;
    }
    if (fd.hasAttrWeak()) {
        //if (has_attr) out.space();
        out.add("__attribute__((weak)) ");
        has_attr = true;
    }
    if (fd.hasAttrConstructor()) {
        //if (has_attr) out.space();
        out.add("__attribute__((constructor)) ");
        has_attr = true;
    }
    if (fd.hasAttrDestructor()) {
        //if (has_attr) out.space();
        out.add("__attribute__((destructor)) ");
        has_attr = true;
    }

    u8 printf_arg = fd.getAttrPrintf();
    if (printf_arg) {
        //if (has_attr) out.space();
        out.print("__attribute__((__format__(printf, %d, %d))) ", printf_arg, num_params +1);
        has_attr = true;
    }
    if (has_attr) out.newline();

    if (d == gen.mainFunc) {
        out.add("int32_t main");
    } else {
        // 2 options:
        // - external .c2i files
        // - exported .c2 function that is public and inline
        // also:
        // - generate lib.h for library
        // - generate module.h in cgen
        if (!fd.hasAttrInline() && !gen.cur_external && !d.isExported() && !(gen.fast_build && d.isPublic())) out.add("static ");
        gen.emitTypePre(out, fd.getRType());
        out.space();
        gen.emitCName(out, d);
    }
    out.lparen();
    for (u32 i=0; i<num_params; i++) {
        Decl* argx = cast<Decl*>(params[i]);
        if (i != 0) out.add(", ");
        gen.emitTypePre(out, argx.getType());
        out.space();
        const char* name = argx.getName();
        if (name) out.add(name);
        else out.print("_arg%d", i);
    }
    if (fd.isVariadic()) {
        if (num_params) out.add(", ");
        out.add("...");
    } else {
        if (num_params == 0) out.add("void");
    }
    out.rparen();
}

fn void Generator.emitFunction(Generator* gen, FunctionDecl* fd) {
    Fragment* f = gen.getFragment();
    string_buffer.Buf* out = f.buf;

    gen.gen_func_proto(fd, out);
    out.newline();

    // work-around Stmts using gen.out
    string_buffer.Buf* saved = gen.out;
    gen.out = out;

    gen.emitStmt(cast<ast.Stmt*>(fd.getBody()), 0, true);
    out.newline();

    gen.out = saved;    // restore saved gen.out
    gen.addFragment(f, false);
}

fn void Generator.gen_full_func(void* arg, FunctionDecl* fd) {
    if (!fd.getBody()) return;

    Generator* gen = arg;
    // Note: there could be template functions that need to be generated, so generate full function in fragment

    // template are generated as late as possible, since the Type might not be known yet
    if (fd.isTemplate()) return;
    if (fd.isInline()) return;

    gen.cur_function = fd;

    gen.emitFunction(fd);

    gen.cur_function = nil;

    gen.flattenFragments();
}

fn void Generator.gen_full_funcs(void* arg, AST* a) {
    a.visitFunctions(Generator.gen_full_func, arg);
}

fn void Generator.on_interface_import(void* arg, ImportDecl* i) {
    Generator* gen = arg;
    Decl* d = cast<Decl*>(i);

    if (!d.isUsedPublic()) return;

    // filter duplicate imports between different ASTs
    u32 name_idx = d.getNameIdx();
    if (gen.imports.contains_idx(name_idx)) return;
    gen.imports.add(name_idx);

    gen.header.print("#include \"%s.h\"\n", d.getName());
}

fn void Generator.create_interface_imports(void* arg, AST* a) {
    a.visitImports(Generator.on_interface_import, arg);
}

fn void Generator.on_interface_decl(void* arg, Decl* d) {
    Generator* gen = arg;

    if (!d.isExported()) return;
    if (d.isImport()) return;

    // create forward decl for structs
    if (d.isStructType()) {
        gen.emitForwardStructDecl(d, gen.header);
        gen.header.newline();
        StructTypeDecl* std = cast<StructTypeDecl*>(d);
        if (std.isOpaque()) return; // dont add
    }
    // For C header we need to sort the decls, just collect all decls first
    gen.decls.add(d);
}

fn void Generator.create_interface_decls(void* arg, AST* a) {
    a.visitDecls(Generator.on_interface_decl, arg);
}

fn void Generator.on_ast_structs(void* arg, AST* a) {
    Generator* gen = arg;
    a.visitTypeDecls(Generator.on_forward_structs, arg);
}

fn void Generator.decl_mark_generated(void* /*arg*/, Decl* d) {
    d.setGenerated();
}

fn void Generator.decl_clear_generated(void* /*arg*/, Decl* d) {
    d.clearGenerated();
}

fn void Generator.ast_mark_generated(void* arg, AST* a) {
    a.visitDecls(Generator.decl_mark_generated, arg);
}

fn void Generator.ast_clear_generated(void* arg, AST* a) {
    a.visitDecls(Generator.decl_clear_generated, arg);
}


fn void Generator.on_header_decl(void* arg, Decl* d) {
    if (d.isGenerated()) return;

    Generator* gen = arg;
    gen.deps.check(d);  // generate dependencies first

    gen.emitHeaderDecl(d);
    d.setGenerated();
}

fn void Generator.emitHeaderDecl(Generator* gen, Decl* d) {
    string_buffer.Buf* out = gen.header;

    // TODO refactor to common code with normal C generation (currently uses fragments)
    switch (d.getKind()) {
    case Function:
        FunctionDecl* fd = cast<FunctionDecl*>(d);
        if (fd.isTemplate()) break;
        gen.gen_func_proto(fd, out);
        if (fd.isInline()) {
            out.newline();
            gen.emitStmt(cast<ast.Stmt*>(fd.getBody()), 0, true);
            out.newline();
        } else {
            out.add(";\n");
        }
        out.newline();
        break;
    case Import:
        assert(0); // cannot happen
        return;
    case StructType:
        gen.emitStruct(out, d, 0);
        break;
    case EnumType:
        gen.emitEnum(out, d);
        break;
    case EnumConstant:
        assert(0);
        return;
    case FunctionType:
        gen.emitFunctionType(out, d);
        break;
    case AliasType:
        gen.emitAliasType(out, d);
        break;
    case Variable:
        gen.emitGlobalVarDecl(out, d);
        break;
    }
}

fn void add_gen_warning(string_buffer.Buf* out) {
    out.add("// WARNING: this file is auto-generated by the C2 compiler.\n");
    out.add("// Any changes you make might be lost!\n\n");
}

fn void Generator.generateInterfaceFiles(Generator* gen, Module* m) {
    gen.imports.clear();
    gen.header.clear();
    gen.decls.clear();

    c2i_generator.generate(gen.results_dir, m);

    string_buffer.Buf* hdr = gen.header;
    add_gen_warning(hdr);
    char[32] upper_name;
    string_utils.toUpper(m.getName(), upper_name);
    hdr.print("#ifndef %s_H\n", upper_name);
    hdr.print("#define %s_H\n\n", upper_name);
    hdr.add("#include \"c2types.h\"\n\n");
    hdr.add("#ifdef __cplusplus\nextern \"C\" {\n#endif\n");

    gen.cur_external = true;
    m.visitASTs(Generator.ast_clear_generated, gen);
    m.visitASTs(Generator.create_interface_imports, gen);
    hdr.newline();
    m.visitASTs(Generator.create_interface_decls, gen);

    gen.deps.init(m, gen, Generator.on_header_decl);
    string_buffer.Buf* saved = gen.out;
    gen.out = hdr;
    string_buffer.Buf* out = gen.out;
    for (u32 i=0; i<gen.decls.size(); i++) {
        Generator.on_header_decl(gen, gen.decls.get(i));
    }
    gen.out = saved;

    hdr.add("#ifdef __cplusplus\n}\n#endif\n\n");
    hdr.add("#endif\n");

    file_utils.Writer writer;
    char[constants.Max_path] fullname;
    stdio.sprintf(fullname, "%s/%s.h", gen.results_dir, m.getName());
    if (!writer.write(fullname, cast<u8*>(hdr.data()), hdr.size())) {
        console.error("%s", writer.getError());
    }
    gen.cur_external = false;
}

fn void Generator.on_module(void* arg, Module* m) {
    if (!m.isUsed()) return;

    Generator* gen = arg;
    string_buffer.Buf* out = gen.out;

    gen.mod_name = m.getName();
    gen.mod = m;

    if (gen.fast_build) {
        out.clear();
        gen.header.clear();
        add_gen_warning(gen.header);
        char[32] upper_name;
        string_utils.toUpper(gen.mod_name, upper_name);
        gen.header.print("#ifndef %s_H\n", upper_name);
        gen.header.print("#define %s_H\n\n", upper_name);
        gen.header.add("#include \"external.h\"\n\n");

        add_gen_warning(out);
    } else {
        out.print("\n// --- module %s ---\n", gen.mod_name);
    }

    gen.isDarwinStdio = (m.getNameIdx() == gen.stdioName) && gen.targetInfo.sys == target_info.System.Darwin;

    // Note: special case for stdarg.h va_list
    if (m.getNameIdx() == gen.stdargName) {
        if (gen.fast_build) out = gen.header;
        out.add("// Note: this module is a special case and is custom generated\n\n");
        out.add("#define va_list __builtin_va_list\n");
        out.add("#define va_start __builtin_va_start\n");
        out.add("#define va_end __builtin_va_end\n");
        out.newline();
        out.add("int32_t vdprintf(int32_t __fd, const char* __fmt, va_list __arg);\n");
        out.add("int32_t vsprintf(char* str, const char* format, va_list __ap);\n");
        out.add("int32_t vsnprintf(char* str, uint64_t size, const char* format, va_list __ap);\n");
        out.newline();

        // set all decls to generated
        m.visitASTs(Generator.ast_mark_generated, arg);

        if (gen.fast_build) gen.write_files();
        return;
    }

    m.visitASTs(Generator.ast_clear_generated, gen);
    // generate forward decls of structs
    m.visitASTs(Generator.on_ast_structs, arg);
    gen.out.newline();

    gen.deps.init(m, gen, Generator.on_decl);
    m.visitASTs(Generator.on_ast_decl, arg);

    gen.out.newline();
    m.visitASTs(Generator.gen_full_funcs, arg);

    if (gen.fast_build) gen.write_files();

    if (m.isExported()) gen.generateInterfaceFiles(m);
}

fn void Generator.write_files(Generator* gen) {
    assert(gen.fast_build);
    gen.header.add("\n#endif\n\n");

    char[64] outfile;
    if (!gen.cur_external) {
        stdio.sprintf(outfile, "%s.c", gen.mod_name);
        gen.write(gen.cgen_dir, outfile, gen.out);
    }

    stdio.sprintf(outfile, "%s.h", gen.mod_name);
    gen.write(gen.cgen_dir, outfile, gen.header);

    gen.out.clear();
    gen.header.clear();
}

fn void Generator.init(Generator* gen,
                       string_pool.Pool* astPool,
                       const char* target,
                       build_target.Kind kind,
                       const char* results_dir,       // output/<target>/
                       const char* output_dir,        // output/<target>/cgen/
                       source_mgr.SourceMgr* sm,
                       const build_file.Info* build_info,
                       Decl* mainFunc)
{
    string.memset(gen, 0, sizeof(Generator));
    gen.out = string_buffer.create(256*1024, false, 3);
    gen.target = target;
    gen.target_kind = kind;
    gen.results_dir = results_dir;
    gen.output_dir = output_dir;
    gen.sm = sm;
    gen.build_info = build_info;
    gen.mainFunc = mainFunc;
    gen.free_list.init();
    gen.used_list.init();
    gen.header_fragments.init();
    gen.header = string_buffer.create(8192, false, 2);
    gen.imports.init(nil);  // note: cannot get string values! (not needed)
    gen.decls.init(16);

    gen.stdargName = astPool.addStr("stdarg", true);
    gen.stdioName = astPool.addStr("stdio", true);
    gen.stdinName = astPool.addStr("stdin", true);
    gen.stdoutName = astPool.addStr("stdout", true);
    gen.stderrName = astPool.addStr("stderr", true);
}

fn void Generator.free(Generator* gen) {
    while (!gen.free_list.isEmpty()) {
        linked_list.Element* e = gen.free_list.popFront();
        Fragment* f = to_container(Fragment, list, e);
        f.free();
    }
    gen.out.free();
    gen.header.free();
    gen.imports.free();
    gen.decls.free();
}

fn void Generator.write(Generator* gen, const char* output_dir, const char* filename, string_buffer.Buf* buf) {
    char[constants.Max_path] fullname;
    stdio.sprintf(fullname, "%s/%s", output_dir, filename);

    file_utils.Writer writer;
    bool ok = writer.write(fullname, buf.udata(), buf.size());
    if (!ok) {
        console.error("%s", writer.getError());
    }
}

public fn void generate(string_pool.Pool* astPool,
                        string_pool.Pool* auxPool,
                        const char* target,
                        build_target.Kind kind,
                        const char* output_dir,
                        source_mgr.SourceMgr* sm,
                        const build_file.Info* build_info,
                        const target_info.Info* targetInfo,
                        component.List* comps,
                        const module_list.List* allmodules,
                        Decl* mainFunc,
                        string_list.List* asm_files,
                        bool enable_asserts,
                        bool fast_build)
{
    char[constants.Max_path] dir;
    stdio.sprintf(dir, "%s/%s", output_dir, Dir);
    i32 err = file_utils.create_directory(dir);
    if (err) {
        console.error("cannot create directory %s: %s", dir, string.strerror(err));
        return;
    }

    Generator gen;
    gen.init(astPool, target, kind, output_dir, dir, sm, build_info, mainFunc);
    gen.enable_asserts = enable_asserts;
    gen.fast_build = fast_build;
    gen.targetInfo = targetInfo;
    gen.cgen_dir = dir;
    string_buffer.Buf* out = gen.out;

    if (!fast_build) {
        add_gen_warning(out);
    }

    // generate C2-internal and external lib stuff in external.h, the main component in build.c
    gen.emit_external_header(enable_asserts, target);

    if (fast_build) {
        gen.write(gen.cgen_dir, "external.h", gen.out);
        out.clear();

        gen.cur_external = true;
    }

    if (gen.target_kind != build_target.Kind.Executable) {
        gen.generateC2TypesHeader();
    }

    // generate external components
    for (u32 i=0; i<comps.size()-1; i++) {
        component.Component* c = comps.get(i);
        gen.cur_external = c.isExternal();
        c.visitModules(Generator.on_module, &gen);
    }

    // generate main module
    gen.cur_external = false;
    component.Component* c = comps.get(comps.size()-1);

    c.visitModules(Generator.on_module, &gen);

    if (!fast_build) {
        gen.write(dir, "build.c", gen.out);
    }

    u32 libc_name = auxPool.addStr("libc", true);

    gen.createMakefile(dir, comps, allmodules, asm_files, enable_asserts, libc_name);
    gen.createExportsFile(dir, comps.get(comps.size()-1));

    if (c.isLibrary()) manifest_writer.write(output_dir, c, constants.manifest_name);

    gen.free();
}

public fn void build(const char* output_dir)
{
    // TODO use stringbuf for this
    char[constants.Max_path] dir;
    stdio.sprintf(dir, "%s/%s/", output_dir, Dir);

    //i32 retval = process_utils.run(dir, "/usr/bin/make", LogFile);
    i32 retval = process_utils.run_args(dir, "make", LogFile, "-j");
    if (retval != 0) {
        console.error("error during external C compilation");
        console.log("see %s%s for details", dir, LogFile);
    }
}

const char[] Warning_control =
    "#if defined(__clang__)\n"
    "#  pragma clang diagnostic ignored \"-Wincompatible-library-redeclaration\"\n"
    "#  pragma clang diagnostic ignored \"-Wunknown-warning-option\"\n"
    "#  pragma clang diagnostic ignored \"-Wparentheses-equality\"\n"
    "#  pragma clang diagnostic ignored \"-Wsometimes-uninitialized\"\n"
    "#  pragma clang diagnostic ignored \"-Wtypedef-redefinition\"\n"
    "#  if (__clang_major__ >= 10)\n"
    "#    define fallthrough  __attribute__((fallthrough))\n"
    "#  endif\n"
    "#elif defined(__GNUC__)\n"
    "#  if (__GNUC__ >= 11)\n"
    "#    define fallthrough  [[fallthrough]]\n"
    "#  elif (__GNUC__ >= 7)\n"
    "#    define fallthrough  __attribute__((fallthrough))\n"
    "#  endif\n"
    "#  pragma GCC diagnostic ignored \"-Wmain\"\n"
    "#  if (__GNUC__ >= 10)\n"
    "#    pragma GCC diagnostic ignored \"-Wzero-length-bounds\"\n"
    "#  endif\n"
    "#  if (__GNUC__ >= 7)\n"
    "#    pragma GCC diagnostic ignored \"-Wformat-overflow\"\n"
    "#    pragma GCC diagnostic ignored \"-Wstringop-overflow\"\n"
    "#  endif\n"
    "#endif\n"
    "\n"
    "#ifndef fallthrough\n"
    "#  define fallthrough\n"
    "#endif\n\n"
    ;

fn void Generator.emit_external_header(Generator* gen, bool enable_asserts, const char* target) {
    string_buffer.Buf* out = gen.out;

    out.add("#ifndef EXTERNAL_H\n");
    out.add("#define EXTERNAL_H\n\n");
    out.add(Warning_control);
    out.add("// --- internally added ---\n");
    out.add("typedef unsigned char bool;\n");
    out.add("typedef signed char int8_t;\n");
    out.add("typedef unsigned char uint8_t;\n");
    out.add("typedef signed short int16_t;\n");
    out.add("typedef unsigned short uint16_t;\n");
    out.add("typedef signed int int32_t;\n");
    out.add("typedef unsigned int uint32_t;\n");
    // FIXME: these should be target dependent
    out.add("typedef signed long int64_t;\n");
    out.add("typedef unsigned long uint64_t;\n");
    out.add("typedef long ssize_t;\n");
    out.add("typedef unsigned long size_t;\n");
    out.add("#define true 1\n");
    out.add("#define false 0\n");

    out.add("#define NULL ((void*)0)\n");
    out.add("#define ARRAY_SIZE(x) (sizeof(x)/sizeof((x)[0]))\n");
    out.add("#define offsetof(TYPE, MEMBER) ((size_t) &((TYPE *)0)->MEMBER)\n");
    out.add("#define to_container(type, member, ptr) ((type *)((char *)(ptr)-(size_t)(&((type *)0)->member)))\n\n");

    if (enable_asserts) {
        out.add("int dprintf(int fd, const char *format, ...);\n");
        out.add("void abort(void);\n\n");
        out.add("static void c2_assert(bool condition, const char* location, const char* condstr) {\n");
        out.add("  if (condition) return;\n");
        out.print("  static const char me[] = \"%s\";\n", target);
        out.add("  dprintf(2, \"%s: %s: Assertion '%s' failed\\n\", me, location, condstr);\n");
        out.add("  abort();\n");
        out.add("}\n\n");
    }

    // for sswitch
    out.add("static bool c2_strequal(const char* s1, const char* s2) {\n");
    out.add("  while (*s1 == *s2) {\n");
    out.add("    if (*s1 == 0) return true;\n");
    out.add("    s1++;\n");
    out.add("    s2++;\n");
    out.add("  }\n");
    out.add("  return false;\n");
    out.add("}\n\n");

    out.add("#endif\n");
}

