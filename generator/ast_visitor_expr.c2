/* Copyright 2022-2025 Bas van den Berg
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

module ast_visitor;

import ast local;

fn void Visitor.handleExpr(Visitor* v, Expr* e) {
    assert(e);

    switch (e.getKind()) {
    case IntegerLiteral:
        return;
    case FloatLiteral:
        return;
    case BooleanLiteral:
        return;
    case CharLiteral:
        return;
    case StringLiteral:
        return;
    case Nil:
        return;
    case Identifier:
        IdentifierExpr* i = (IdentifierExpr*)e;
        Ref ref = i.getRef();
        v.on_ref(v.arg, &ref);
        break;
    case Type:
        TypeExpr* t = (TypeExpr*)e;
        v.handleTypeRef(t.getTypeRef());
        break;
    case Call:
        v.handleCallExpr((CallExpr*)e);
        break;
    case InitList:
        InitListExpr* ili = (InitListExpr*)e;
        u32 count = ili.getNumValues();
        Expr** exprs = ili.getValues();
        for (u32 i=0; i<count; i++) v.handleExpr(exprs[i]);
        break;
    case FieldDesignatedInit:
        FieldDesignatedInitExpr* f = (FieldDesignatedInitExpr*)e;
        Ref ref = {
            .loc = e.getLoc(),
            .name_idx = f.getField(),
            .decl = f.getDecl(),
        }
        v.on_ref(v.arg, &ref);
        v.handleExpr(f.getInit());
        break;
    case ArrayDesignatedInit:
        ArrayDesignatedInitExpr* a = (ArrayDesignatedInitExpr*)e;
        v.handleExpr(a.getDesignator());
        v.handleExpr(a.getInit());
        break;
    case BinaryOperator:
        BinaryOperator* b = (BinaryOperator*)e;
        v.handleExpr(b.getLHS());
        v.handleExpr(b.getRHS());
        break;
    case UnaryOperator:
        UnaryOperator* u = (UnaryOperator*)e;
        v.handleExpr(u.getInner());
        break;
    case ConditionalOperator:
        ConditionalOperator* c = (ConditionalOperator*)e;
        v.handleExpr(c.getCond());
        v.handleExpr(c.getLHS());
        v.handleExpr(c.getRHS());
        break;
    case Builtin:
        v.handleBuiltinExpr((BuiltinExpr*)e);
        break;
    case ArraySubscript:
        ArraySubscriptExpr* a = (ArraySubscriptExpr*)e;
        v.handleExpr(a.getBase());
        v.handleExpr(a.getIndex());
        break;
    case Member:
        v.handleMemberExpr((MemberExpr*)e);
        break;
    case Paren:
        ParenExpr* p = (ParenExpr*)e;
        v.handleExpr(p.getInner());
        break;
    case BitOffset:
        BitOffsetExpr* bi = (BitOffsetExpr*)e;
        v.handleExpr(bi.getLHS());
        v.handleExpr(bi.getRHS());
        break;
    case ExplicitCast:
        ExplicitCastExpr* ec = (ExplicitCastExpr*)e;
        v.handleTypeRef(ec.getTypeRef());
        v.handleExpr(ec.getInner());
        break;
    case ImplicitCast:
        ImplicitCastExpr* ic = (ImplicitCastExpr*)e;
        v.handleExpr(ic.getInner());
        break;
    case Range:
        RangeExpr* b = (RangeExpr*)e;
        v.handleExpr(b.getLHS());
        v.handleExpr(b.getRHS());
        break;
    case NamedArgument:
        NamedArgument* n = (NamedArgument*)e;
        v.handleExpr(n.getInner());
        break;
    }
}

fn void Visitor.handleCallExpr(Visitor* v, CallExpr* c) {
    v.handleExpr(c.getFunc());
    u32 num_args = c.getNumArgs();
    Expr** args  = c.getArgs();
    for (u32 i=0; i<num_args; i++) v.handleExpr(args[i]);
}

fn void Visitor.handleMemberExpr(Visitor* v, MemberExpr* m) {
    if (m.hasExpr()) v.handleExpr(m.getExprBase());

    for (u32 i=0; i<m.getNumRefs(); i++) {
        Ref ref = m.getRef(i);
        v.on_ref(v.arg, &ref);
    }
}

fn void Visitor.handleBuiltinExpr(Visitor* v, BuiltinExpr* b) {
    v.handleExpr(b.getInner());
    switch (b.getKind()) {
    case Sizeof:
        break;
    case Elemsof:
        break;
    case EnumMin:
        break;
    case EnumMax:
        break;
    case OffsetOf:
        v.handleExpr(b.getOffsetOfMember());
        break;
    case ToContainer:
        v.handleExpr(b.getToContainerMember());
        v.handleExpr(b.getToContainerPointer());
        break;
    }
}
