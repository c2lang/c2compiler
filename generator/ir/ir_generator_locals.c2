/* Copyright 2022-2025 Bas van den Berg
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

module ir_gen_locals;
import ast;
import ir;

import std;

public type StackVar struct {
    ir.Ref ref;        // never changes
    ir.Type ir_type;
    u32 size;
}

public type Locals struct {
    StackVar* vars;
    u32 count;
    u32 capacity;
    u32 index; // first free
}

public fn void Locals.init(Locals* l) {
    l.clear();
    l.resize(128);
}

public fn void Locals.free(Locals* l) {
    std.free(l.vars);
}

public fn void Locals.clear(Locals* l) {
    l.count = 0;
    l.index = 1;    // start at 1
}

fn void Locals.resize(Locals* l, u32 capacity) {
    l.capacity = capacity;
    StackVar* vars2 = std.malloc(capacity * sizeof(StackVar));
    if (l.count) {
        std.memcpy(vars2, l.vars, l.count * sizeof(StackVar));
        std.free(l.vars);
    }
    l.vars = vars2;
}

// NOTE: type may be char, but size 12 for char[12]
public fn void Locals.add(Locals* l, ast.VarDecl* vd, u32 width, u32 align, u32 size, ir.Ref slot, ir.Type ir_type) {
    if (l.count == l.capacity) l.resize(l.capacity * 2);

    StackVar* var = &l.vars[l.count];
    var.ref = slot;
    var.ir_type = ir_type;
    var.size = size;
    //var.width = width;
    //var.align = align;
    ast.Decl* d = cast<ast.Decl*>(vd);
    d.setGenIdx(l.count);   // index into vars
    l.count++;
}

public fn StackVar* Locals.find(const Locals* l, const ast.VarDecl* vd) {
    const ast.Decl* d = cast<ast.Decl*>(vd);
    if (!d.hasGenIdx()) {
        d.dump();
    }
    assert(d.hasGenIdx());
    u32 idx = d.getGenIdx();
    return &l.vars[idx];
}

